// Code generated by go-bindata.
// sources:
// tmpl/consulregister.go.tmpl
// tmpl/file.tmpl
// tmpl/gk.json.tmpl
// tmpl/partials/alias_type.tmpl
// tmpl/partials/constants.tmpl
// tmpl/partials/endpoint_func.tmpl
// tmpl/partials/endpoint_method_func.tmpl
// tmpl/partials/func.tmpl
// tmpl/partials/func_parameters.tmpl
// tmpl/partials/func_results.tmpl
// tmpl/partials/func_return.tmpl
// tmpl/partials/imports.tmpl
// tmpl/partials/interface.tmpl
// tmpl/partials/interface_func.tmpl
// tmpl/partials/interface_stub.tmpl
// tmpl/partials/middleware_instrumenting.tmpl
// tmpl/partials/middleware_logging.tmpl
// tmpl/partials/struct.tmpl
// tmpl/partials/struct_function.tmpl
// tmpl/partials/struct_type.tmpl
// tmpl/partials/transport_grpc_client_decode_func.tmpl
// tmpl/partials/transport_grpc_client_encode_func.tmpl
// tmpl/partials/transport_grpc_server_decode_func.tmpl
// tmpl/partials/transport_grpc_server_encode_func.tmpl
// tmpl/partials/vars.tmpl
// tmpl/proto.pb.tmpl
// tmpl/proto_compile.bat.tmpl
// tmpl/proto_compile.sh.tmpl
// tmpl/svc.thrift.tmpl
// tmpl/thrift_compile.bat.tmpl
// tmpl/thrift_compile.sh.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplConsulregisterGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x5f\x6b\xdc\xc6\x17\x7d\xd6\x7c\x8a\xf9\x09\x12\x24\xb3\xd6\xfc\xf2\xba\xe0\x07\x63\x43\xbb\xd0\x86\x25\xce\x5b\x29\x65\xac\x9d\x9d\x1d\x76\x34\x23\x46\xa3\x2d\xc6\x18\x1c\x28\xa4\x85\xa5\x2f\x75\x31\xb8\x29\x69\x29\xa1\x7d\x29\x35\x34\xb4\x21\x6c\xe8\x97\xf1\x6e\xe2\x27\x7f\x85\x72\x47\x7f\x56\xda\x3f\xae\xb0\xc1\xba\x73\xe6\xe8\xdc\x7b\xcf\xbd\x4e\x69\x3c\xa6\x9c\xe1\x58\xab\x2c\x97\x86\x71\x91\x59\x66\x10\x12\x49\xaa\x8d\xc5\x01\xf2\xfc\x61\x62\x7d\xe4\xf9\x56\x24\xcc\x47\xc8\xf3\xb9\xb0\xa3\xfc\x38\x8a\x75\x42\xb8\xde\x1d\x0b\x4b\xe0\x57\x6a\xee\x23\xaf\xa0\xc9\x06\x78\x0b\x2a\x1b\x90\x02\xe2\xb7\x89\x46\x34\x1b\x89\x58\x9b\xb4\x3c\x26\x34\x15\x3e\x0a\x11\xb2\x27\x29\xc3\x07\x2e\xf6\xa4\x14\x87\x33\x6b\xf2\xd8\xe2\x53\xe4\x15\x07\xfb\x83\x81\x61\x59\x86\xd7\x9e\xcc\x1a\xa1\x38\x26\xa4\x4c\x0f\xd3\x02\x89\xbc\x23\x66\x26\x22\x66\x8f\x69\xc2\xd6\xaf\x35\x2f\x66\x05\x10\x2b\x9a\xb0\xfa\x5a\xaf\xbf\xe9\x52\x75\x0d\x79\x4f\x29\xdf\xa0\xa6\x7e\x3e\xfb\x7c\x4d\x98\xa5\x7c\xa9\xaa\x0f\x95\xdf\xf0\x08\x55\x86\x09\xa9\x64\x41\x93\x90\x77\xc8\xaa\xc6\x1d\x18\x61\x45\x4c\x65\xc9\xb4\x3f\x84\x7a\x41\xe7\xa2\xc3\xdc\x50\x2b\xb4\x42\x5e\x4f\x59\x66\x26\x54\x6e\x51\xb7\x82\x96\x9a\x73\x66\xb6\xe6\x22\x35\x8f\x3e\x71\x10\x74\x86\xd0\x30\x57\x31\x7e\xcc\xbe\x6c\x37\x2c\x88\x9b\x6d\xea\x54\x35\x85\xe2\xd7\x2f\xbd\x7e\x59\xbd\x3a\xe2\xaa\x20\x94\xed\xb8\xe2\xd4\x45\xeb\xe0\x52\xd1\xf2\xcb\x21\xde\x59\x71\xc8\x29\xf2\x0c\xb3\xb9\x51\xf8\x61\xfb\xe4\x14\x79\x6d\xd3\x74\xd7\x53\x6a\xab\x45\x5e\xd3\x2c\x1b\xe0\xb8\x95\xcf\x12\xde\xeb\x6f\x04\xe3\x65\xc6\x00\x06\xab\x6c\xc1\x15\xdd\xa0\xbc\xa9\x01\x8a\x72\x9f\x06\x38\x07\xf8\xfd\x8e\xe8\xb6\x9b\x1c\x3c\x0a\xf1\x4e\x11\xfa\x54\xa8\xdc\xba\x2c\x2a\x97\x6c\x13\xb7\xc2\xf0\xff\x9a\xe2\x88\xc5\x5a\x0d\x80\xa2\x68\xd4\xf6\xec\x8a\xf3\x0e\xf2\xce\xc0\x3b\x84\xe0\x91\xb5\x69\xd6\x25\xa4\xb1\x18\x4c\xbe\x6b\x74\x3c\x66\x86\x70\x3d\x16\x76\x37\x95\xf4\x84\x1b\x9d\xab\x01\x39\x96\xfa\x98\x24\x14\x92\x24\x52\x1b\x96\xec\x96\xbb\xa3\x4a\x3d\xe2\x7a\x0b\xeb\x88\x5a\xa9\x15\x93\x27\x64\xc4\xa4\xd4\x5c\x4b\xaa\x78\x8b\x30\xa3\x49\x2a\x19\xa1\x83\x41\x59\x59\x22\xa0\x20\x8a\x4a\xc2\x4d\x1a\x67\xa6\x5c\x54\x5f\x34\x3f\xe6\xec\x1f\x98\x55\x3b\x86\xcb\x91\xf8\xe8\x49\xff\xa0\x1e\x8b\x10\x07\x3b\xd5\xc2\x8c\x8a\xa8\xa1\xa6\x83\x99\x31\xda\x84\x60\xe2\xe2\xf4\x40\xab\xa1\xe0\xb8\xbb\x87\x69\x2a\xa2\x43\x36\xa4\xb9\xb4\x45\x30\x08\xdb\xa0\xa8\xda\x85\x7b\xd8\x44\x2d\xa3\xd7\x38\x29\x18\x0c\x15\x33\xa6\x62\x04\x75\x2e\x1a\x34\xa9\x42\xe4\x89\xa1\x83\xfd\x6f\x0f\x2b\x21\x41\x4f\x35\x55\x4a\x48\xc7\x00\xad\xf3\x62\x77\x17\xc8\xea\x64\xd6\x18\xdd\x4b\x88\x60\x2c\x5d\x22\x0f\xe1\xbb\xfb\x9c\x29\x5b\xfa\xb2\x4a\x1f\xdc\x04\x1f\xea\x1d\x96\xbe\x19\x26\x36\x3a\x4a\x8d\x50\x76\x18\xf8\x0f\x26\xbb\xee\xc7\xef\x60\x13\x1d\x35\xd7\x48\xfd\xda\xeb\x37\x5e\x60\x1c\x42\xb0\x62\x3d\xbb\x2d\x3a\xe8\x64\x34\x62\x54\xda\x51\x34\x79\x14\xad\xf3\x86\xad\x11\x35\xd1\xd3\x72\x1a\xeb\x31\x6c\x7d\x09\x4e\xea\xb5\xd2\x14\x04\x4b\x67\xc4\xe2\x71\x77\x3d\x6f\x17\x87\x84\x3d\x42\xf0\xfc\xd9\xab\xf9\xdb\xbf\x17\xbf\x9c\x2f\x5e\xbe\xba\xbd\x7c\x7d\x7b\x75\x01\x07\xcb\x49\x34\x51\xf5\x77\x74\xe4\x96\x61\xe0\x04\x7a\xc4\x79\x12\x2f\x2e\xfe\x58\x4c\x9f\xdd\xcd\xa6\x8b\x6f\x7e\xfd\xf0\xf3\xb4\xc9\xf6\xfe\xea\xab\xf9\x8b\xeb\xf9\x8f\xe7\x77\xb3\x69\xf5\xbf\xe3\x66\x76\x75\x33\xfb\x69\xfe\xf5\x35\xfe\xb8\x28\x81\xd3\x82\xe7\xcf\xdf\x2d\xbe\xbf\xbe\x79\xf3\x3b\x30\x83\x5f\xbb\xab\x3d\xe8\x3e\x98\x90\x76\xad\xd6\x8a\xbe\xa9\x8e\x90\xe1\xe2\xcf\xdf\x6e\x2f\xce\x17\x97\x7f\xdd\x5e\xbe\xbe\x9b\x4d\xdf\xff\xf0\x66\xfe\xee\xbb\x9b\xb7\xdf\x7e\xf8\xe7\xf9\xe2\xc5\xcb\x22\x0e\xd0\xff\xda\x5f\x26\xba\x1f\xd1\xaa\xcf\x99\x5b\x31\x95\x77\x9b\x26\xad\x87\x2e\x88\xcb\xb1\x30\x8c\x83\xf6\x62\x35\x85\x1d\x70\x3a\x3a\x43\xff\x06\x00\x00\xff\xff\x24\xf7\x5c\x2d\x26\x09\x00\x00"

func tmplConsulregisterGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplConsulregisterGoTmpl,
		"tmpl/consulregister.go.tmpl",
	)
}

func tmplConsulregisterGoTmpl() (*asset, error) {
	bytes, err := tmplConsulregisterGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/consulregister.go.tmpl", size: 2342, mode: os.FileMode(420), modTime: time.Unix(1562223521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplFileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6a\xb4\x40\x10\xc4\xef\x3e\x45\x33\x78\xf8\x3e\x08\x92\x73\x20\x87\xb0\xa7\x3d\x24\x04\x12\x72\x5d\x1a\xb7\x35\x43\xb4\x35\x63\xaf\xb0\x34\xf3\xee\x61\xfc\xc7\xb8\x51\xc8\x4d\xbb\xaa\x7f\x55\x34\xa3\x6a\x0b\x60\x82\xec\xd0\xd4\x35\xb1\x80\x31\xde\xab\xce\xbf\xde\x27\xaa\xc4\x67\xef\x93\xa4\xc5\xfc\x0b\x4b\x02\xd5\xec\x75\xfc\x0c\xd3\x01\x50\x0a\xfc\xab\x88\x21\x3b\xd6\x6d\xe3\xa4\xfb\x0f\xf7\xc3\xa6\x50\xdd\x56\x28\x04\xc6\x8e\x82\x59\x2c\x31\x79\xcd\x38\x34\xdc\x09\xf2\x16\x25\x9f\x25\x13\xd9\xf6\x49\x1f\xe8\x36\x20\x3d\xba\xb0\x1f\xc4\xfd\xd5\xa7\xca\x62\xf7\x7e\x6d\xe9\xf7\x3e\x06\xe9\x24\xd7\x96\x4c\xe4\xdb\x47\x1d\x59\xc8\x15\x98\xd3\xd2\xc5\x21\x97\x04\xa9\xbd\x4b\x7b\x78\x78\x8c\x1d\xe1\xf6\xd1\xd1\xe6\xb9\x81\xb4\x8f\x02\x76\x82\xde\xc4\x5d\x72\xd9\x4d\x99\xe4\x75\x44\x37\x0c\xff\xc6\x7f\x26\xf9\x6c\xce\x37\xfc\x28\x60\xd2\x07\xd1\x16\x40\xdf\x90\xf6\x53\x6a\xf6\x82\x35\x0d\x6f\x6b\x75\xca\xe2\xc2\xf9\x98\xad\x4a\x55\x47\x37\xf2\x58\xee\x14\x5c\x62\x1b\xde\x6e\xb9\x94\xfd\x09\x00\x00\xff\xff\x0d\x88\xed\x2a\xcb\x02\x00\x00"

func tmplFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFileTmpl,
		"tmpl/file.tmpl",
	)
}

func tmplFileTmpl() (*asset, error) {
	bytes, err := tmplFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/file.tmpl", size: 715, mode: os.FileMode(420), modTime: time.Unix(1562043715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x3f\x6f\xc2\x30\x10\xc5\x77\x3e\x85\xe5\xb9\xa2\x7b\x56\xa4\x8e\x5d\x42\x67\x38\x92\x03\x2c\xe2\x3f\xbd\xbb\xb4\xaa\xac\x7c\xf7\x2a\x10\x27\x38\xcd\x50\x21\x31\xc6\xf7\xee\xf7\xee\xbd\xc4\x95\x52\x9a\x91\xbe\x4c\x85\xba\xe8\xbf\x94\xd2\x01\xe4\xac\x0b\x1d\x2e\xa7\x18\x8f\xa6\xc1\x12\x03\x10\x88\xa7\xae\x8b\x71\x1f\xa3\xf8\xd2\xc1\x05\x37\xc0\xa8\xd6\xe5\x6d\xf9\x1d\x2c\x76\xdd\xbe\x57\xcc\x56\x12\xfd\xe5\x06\xef\xa7\x3b\x07\x16\x75\x91\x8c\xd7\x27\x9f\xa6\xc6\x09\xd2\x11\xaa\x51\x32\x18\x7e\x84\x80\xf4\x66\x88\x65\x03\x16\x9b\x65\xeb\x32\x77\x62\xa1\xb6\x92\xd1\x4b\xda\xc3\x00\xfb\x07\x62\xa5\x54\xd7\x63\xb4\x35\x75\xdd\xe0\x37\xd0\x54\xcf\x00\x9c\x26\xfd\xfd\xe3\x02\xba\x3a\x78\xe3\x84\x9f\x54\xe7\xc4\x5f\x28\x74\x1c\xde\x55\x4a\xf8\xd9\x22\x0b\xef\xee\x85\xe9\x31\xd3\x71\xf0\x8e\x71\x2e\x1c\x5e\xb3\x90\x42\xe0\x38\x78\x92\x27\x85\x1c\xf9\x8b\x29\xaf\xc0\xf5\x36\x69\xb6\x3f\xe1\x86\xc9\x4e\x0c\x87\x3f\xb7\x1d\x1e\x38\x6d\x02\x56\xb6\x1e\x88\x09\x58\xd9\xfa\x11\xe2\x35\x51\x16\xc8\x82\x71\xd9\xf1\x95\x77\xdc\x36\x84\x27\xc3\x82\xa4\x0b\x95\x25\x51\x7d\xcd\xaf\x33\xcd\x42\x4f\xb9\x22\x33\xa8\xf1\x08\x6d\x23\xbb\xbb\x1f\xa9\xcf\x22\x41\xaf\xba\xdf\x00\x00\x00\xff\xff\xb6\x7d\x5d\x57\x13\x04\x00\x00"

func tmplGkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl,
		"tmpl/gk.json.tmpl",
	)
}

func tmplGkJsonTmpl() (*asset, error) {
	bytes, err := tmplGkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json.tmpl", size: 1043, mode: os.FileMode(420), modTime: time.Unix(1562224234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsAlias_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\x01\x0b\x66\xa6\x29\xe4\xa5\x2a\xa8\x94\xe9\x39\xe7\xe7\xe6\xa6\xe6\x95\x28\x28\x29\xd5\xd6\x56\x57\x23\x04\x40\xbc\xd4\xbc\x94\xda\x5a\xae\x92\xca\x82\x54\x05\xb0\x94\x5f\x62\x6e\x6a\x6d\x2d\x84\x1d\x52\x59\x90\x0a\x36\x09\xa2\x08\x4a\x03\x02\x00\x00\xff\xff\x50\x74\x8a\x9b\x82\x00\x00\x00"

func tmplPartialsAlias_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsAlias_typeTmpl,
		"tmpl/partials/alias_type.tmpl",
	)
}

func tmplPartialsAlias_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsAlias_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/alias_type.tmpl", size: 130, mode: os.FileMode(420), modTime: time.Unix(1562050070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsConstantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x4d\xce\xcf\x2b\x2e\x51\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\xb8\x34\xa1\x0c\x40\x00\x00\x00\xff\xff\x13\xc6\xee\xf4\x7e\x00\x00\x00"

func tmplPartialsConstantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsConstantsTmpl,
		"tmpl/partials/constants.tmpl",
	)
}

func tmplPartialsConstantsTmpl() (*asset, error) {
	bytes, err := tmplPartialsConstantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/constants.tmpl", size: 126, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x31\x6b\xc3\x30\x10\x85\xf7\xfe\x8a\x57\xf0\x60\x83\x11\x9d\x5d\x32\x85\x76\xec\x50\x68\xd7\x22\x9c\x73\x10\xa8\x72\x7a\x92\x4d\xe0\xb8\xff\x5e\x64\x27\x21\x8e\x29\x19\x9a\x25\x58\xdc\xbd\xf7\xbd\x77\x0f\x00\xc0\x94\x06\x0e\xe8\x86\xd0\x96\x6d\x3a\xa2\xed\x43\xa2\x63\x32\xdb\xf9\xbf\x06\x44\x5c\x87\x7d\x42\xe9\x29\xc0\xbc\xd3\xcf\x40\x31\x99\x4f\xcb\xb1\xc2\x93\x2a\xcf\x0f\x22\xe4\x23\xa9\x7e\x89\x50\xd8\xa9\xc2\x85\x44\xdc\xd9\x96\x44\x2b\x94\x57\x5f\x35\x88\xb9\xe7\x0a\x32\x01\x9c\x7f\xf7\x6d\xd0\x6c\x70\x72\x33\xa5\xc8\x65\xe6\xcd\x7e\x93\x6a\xb5\x50\x73\x5d\x76\x39\x6d\x98\xd1\x7a\xb7\xb3\x89\xca\xea\x79\x7a\x7e\xdc\x20\x38\x7f\x03\x70\xd5\xc6\x24\x1e\x0f\x7d\x88\x74\x52\x97\x17\xe6\x26\xef\xce\xf8\x8b\x45\xbd\xc9\x31\xe5\x17\x61\x1b\xf6\x84\xc2\xd5\xc5\x98\x39\xcc\xd6\x7a\xef\xc2\x3e\x2b\x0f\x3e\xc5\x3c\x52\x8c\x67\xf9\x1c\x3e\xf4\x39\xbd\x8d\x09\x85\x43\x71\x3b\x5f\xa9\xd6\x17\xed\xb9\xe2\x66\x83\x38\xb6\x46\xe4\x32\x3b\xab\xe5\x43\xd6\x6b\x80\xeb\x4e\x55\xa7\x62\xee\x20\x2c\xae\xb0\xf2\x5f\x36\xfe\x77\x75\x58\xa1\xac\xc2\x65\xcd\xd4\x7f\x1c\x0e\xc4\xaf\x8e\xb3\xfd\x19\xab\xf9\x77\x4b\x5a\xe7\x63\x4f\xac\xfa\x1b\x00\x00\xff\xff\x08\x87\x27\xd9\xf3\x02\x00\x00"

func tmplPartialsEndpoint_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_funcTmpl,
		"tmpl/partials/endpoint_func.tmpl",
	)
}

func tmplPartialsEndpoint_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_func.tmpl", size: 755, mode: os.FileMode(420), modTime: time.Unix(1562639479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_method_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xd6\x53\xcc\x0f\x3a\xd8\x60\x04\xff\x35\x90\x53\x69\x8f\xa5\x04\xda\xbb\xa8\x37\x41\xe0\xac\xdd\x95\x1c\x02\x8b\xde\xbd\xc8\x51\x7c\x28\x3e\x49\x48\x33\xb3\xf3\xad\x01\x00\xa1\x38\xf7\x20\x11\x1c\x8e\x20\xa7\xea\x5e\xfc\x38\x06\xbe\xb8\x77\x7f\xa5\x9c\x5f\x79\x98\xa7\xc0\xa9\xfd\x4e\xf7\x1e\xaa\xee\x44\x3f\x0b\xc5\x54\xbf\x15\xaa\xe2\xf9\x42\xb0\xa1\xb7\xb7\x12\x62\x37\xc9\x97\x97\x98\xb3\x6a\x9a\x3e\xe7\x99\xe4\x2d\x48\x4c\xb0\xb7\x6a\x3d\xa8\xa2\x0d\x3c\xd0\x1d\x76\x1b\xfa\xe1\xc5\x5f\x29\x91\x44\xb4\x7e\x18\x60\x03\xfe\x77\xdd\xea\x40\x89\x0a\x67\xf0\x94\xd0\x8e\xbe\x44\x85\x3f\xc3\xba\x9c\x7b\x55\xe2\xa1\x48\xd7\x03\xb9\x33\x4d\x38\xaf\x80\xff\x8e\xe0\x30\x42\x4d\xd3\x08\xa5\x45\xd8\x34\xd9\x34\x65\x01\x13\x47\x2a\xd5\xcb\xdd\xb5\x2b\xe4\xe3\xb1\x56\xed\x4c\x75\xec\xd3\x56\xed\x03\xf7\x99\xe7\x54\x37\xd4\xbd\xde\x4f\xe2\x13\xc5\x65\x4c\x3b\xd5\x7f\x03\x00\x00\xff\xff\xe0\x99\x34\x6c\x9f\x01\x00\x00"

func tmplPartialsEndpoint_method_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_method_funcTmpl,
		"tmpl/partials/endpoint_method_func.tmpl",
	)
}

func tmplPartialsEndpoint_method_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_method_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_method_func.tmpl", size: 415, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFuncTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x39\xc5\xa0\x55\xb2\x31\xff\x0c\xbf\x37\xe8\x05\x42\x48\x94\x12\x70\x94\xd6\x96\x17\x45\xe8\xee\xc5\x4e\x5b\xe8\x6e\x46\x1a\xde\x8c\xd9\xb6\x42\x18\xe1\x72\xec\x3b\x8b\x82\xc8\xdd\xec\x63\xab\x66\x59\xdc\xd7\x22\x33\xcc\x94\xf7\x7b\x9c\x94\x41\x9b\x28\xa7\x75\x9a\x79\xac\x2f\x42\x70\x87\xe1\xc4\x1d\x8a\x9e\x1f\x08\xff\xc7\xf2\x04\xd1\xd0\x88\xd5\x34\x5c\xcc\xec\xde\xb5\xe4\x4d\xd1\x47\x16\x84\x2b\xe7\x12\x35\x0f\xf8\x73\x4f\xac\x25\xc9\x4f\x59\xad\x18\xcf\x3b\x7d\xc3\x0d\xd2\xc6\x01\x6f\xd1\xf9\x2b\x00\x00\xff\xff\x07\xa4\xf4\xd5\xd0\x00\x00\x00"

func tmplPartialsFuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFuncTmpl,
		"tmpl/partials/func.tmpl",
	)
}

func tmplPartialsFuncTmpl() (*asset, error) {
	bytes, err := tmplPartialsFuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_parametersTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x25\x0a\x1a\x39\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\x05\x08\x00\x00\xff\xff\x15\x5b\x78\xe8\x50\x00\x00\x00"

func tmplPartialsFunc_parametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_parametersTmpl,
		"tmpl/partials/func_parameters.tmpl",
	)
}

func tmplPartialsFunc_parametersTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_parametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_parameters.tmpl", size: 80, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_resultsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xd5\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x20\xfd\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\xa5\x09\xa5\x01\x01\x00\x00\xff\xff\xcc\x6e\x26\x22\x6c\x00\x00\x00"

func tmplPartialsFunc_resultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_resultsTmpl,
		"tmpl/partials/func_results.tmpl",
	)
}

func tmplPartialsFunc_resultsTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_resultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_results.tmpl", size: 108, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_returnTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\x05\x31\x33\xd3\x14\xf2\xf2\x4b\x14\x34\x72\x12\x8b\x4b\x14\x54\x32\x15\x54\x34\x6b\x6b\x75\xaa\xab\x53\xf3\x52\x40\xb2\x60\x0a\x10\x00\x00\xff\xff\xbc\x66\xba\xd5\x44\x00\x00\x00"

func tmplPartialsFunc_returnTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_returnTmpl,
		"tmpl/partials/func_return.tmpl",
	)
}

func tmplPartialsFunc_returnTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_returnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_return.tmpl", size: 68, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsImportsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x50\xa9\xad\xcd\xcc\x2d\xc8\x2f\x2a\xd1\xe0\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x05\xc9\x81\xd5\xe4\xe5\x97\x28\x68\xa4\x16\x2a\xa8\x94\xe9\xf9\x25\xe6\xa6\x2a\x28\x29\x69\x82\x64\xa0\xdc\xda\x5a\x85\xea\xea\xd4\xbc\x14\xa8\x50\x48\x65\x41\x6a\x6d\x2d\x17\x54\x88\x4b\x13\xca\x00\x04\x00\x00\xff\xff\x34\xce\x15\xc7\x6d\x00\x00\x00"

func tmplPartialsImportsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsImportsTmpl,
		"tmpl/partials/imports.tmpl",
	)
}

func tmplPartialsImportsTmpl() (*asset, error) {
	bytes, err := tmplPartialsImportsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/imports.tmpl", size: 109, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterfaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\x08\x59\x4a\x0e\x20\xb8\x72\xad\x57\x90\xd0\xbe\x68\xc0\x4c\x4b\x1d\x0b\x32\xcc\xdd\xa5\xa0\xdd\xbd\xb7\xf8\x7e\xb3\x56\x21\x44\x3e\x4f\xbd\x53\x14\x31\xba\x9b\xfd\xef\xb6\x29\xa3\xbb\x7e\x66\xc2\x2c\x5f\x4b\xa7\x3b\x9a\x28\x97\x5a\x06\xc2\x82\xd9\x52\xe4\x4e\xa4\x76\x48\x2b\x8e\x27\xe4\x0b\xf5\x31\x8d\xaf\x0d\x2b\xfb\xfc\x2c\x4a\xc4\x9d\xdc\xea\x5b\x86\x88\xb4\xba\x87\x5f\x3d\xf8\x37\x00\x00\xff\xff\x19\x53\x8a\x78\x88\x00\x00\x00"

func tmplPartialsInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterfaceTmpl,
		"tmpl/partials/interface.tmpl",
	)
}

func tmplPartialsInterfaceTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface.tmpl", size: 136, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x2b\xcd\x4b\x8e\x2f\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\x52\xd0\x0b\x80\x73\x6a\x6b\x35\x31\x94\x16\xa5\x16\x97\xe6\x94\x80\xd4\x05\x41\x58\xb5\xb5\x80\x00\x00\x00\xff\xff\xc1\x2e\xd4\xb5\x59\x00\x00\x00"

func tmplPartialsInterface_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_funcTmpl,
		"tmpl/partials/interface_func.tmpl",
	)
}

func tmplPartialsInterface_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_func.tmpl", size: 89, mode: os.FileMode(420), modTime: time.Unix(1562123977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_stubTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x2e\x29\x2a\x4d\x2e\x51\x52\xd0\xab\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\xd4\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x45\xd5\x54\x9a\x14\x9f\x56\x9a\x97\x5c\x92\x99\x9f\xa7\xa4\xa0\x52\x56\x5b\xcb\xc5\x55\x5d\x9d\x9a\x97\x52\x5b\x0b\x08\x00\x00\xff\xff\x39\x10\x5c\x96\x5d\x00\x00\x00"

func tmplPartialsInterface_stubTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_stubTmpl,
		"tmpl/partials/interface_stub.tmpl",
	)
}

func tmplPartialsInterface_stubTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_stubTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_stub.tmpl", size: 93, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsMiddleware_instrumentingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x4a\xc3\x40\x10\x86\xcf\xe9\x53\x8c\x21\x87\x5d\x08\x03\x5e\x85\x1e\xa4\x57\xa9\x60\x45\x0f\xe2\x21\x4d\x26\xe9\x40\x76\xa2\xb3\x93\x58\x59\xf6\xdd\xa5\xad\x97\xea\x69\x98\x99\xef\x87\xef\x2f\x3a\xea\x49\xa1\x9f\xa5\x75\x7b\x1a\x58\xc0\x38\x10\x3e\x73\x20\x0f\x69\x55\x14\xe3\x12\xe1\x6e\x0d\x6f\xef\xd1\x94\x65\x48\x65\x20\x3b\x4c\x5d\x59\x43\x99\x52\x85\x9b\x66\x1c\x59\x06\xdc\x36\x81\x72\x3e\x5d\x49\x75\xd2\xb2\x86\x3e\x18\xee\x3e\x94\xc5\x1c\xa9\xc2\xcd\x1a\x84\x47\x9f\x57\x45\xc1\x01\x95\x3e\x67\x8a\xb6\x99\x66\x31\x7c\x65\x3b\xb8\x71\x89\x88\xe8\xf1\xbe\xeb\xdc\xad\xbf\xa2\x1e\x1a\x23\x69\xbf\xaf\xb9\xc7\x7d\x24\x5d\xc8\x9d\x75\x77\x2c\x2d\x5d\xfc\x3d\xee\xa8\x9d\xa4\x8b\xce\xfb\x55\x91\x2f\xff\xed\xf4\x75\x5e\x95\x6c\x56\x01\x0e\x28\x74\x34\xfc\x5f\xc0\xb5\x76\xac\x21\x25\x6d\x64\x20\xa8\xb8\xae\x96\x53\xfb\x0a\x9f\x2e\x2a\xf8\xd2\x68\xcc\x39\xa5\x6a\xf9\x4d\xa4\xc4\x3d\xc8\x64\xe0\xc6\x26\x1a\x54\xfc\x07\xf6\x39\xd7\x29\x91\x74\x27\xf4\x3c\xfc\x4f\x00\x00\x00\xff\xff\xe9\x81\x20\xf9\x74\x01\x00\x00"

func tmplPartialsMiddleware_instrumentingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_instrumentingTmpl,
		"tmpl/partials/middleware_instrumenting.tmpl",
	)
}

func tmplPartialsMiddleware_instrumentingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_instrumentingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_instrumenting.tmpl", size: 372, mode: os.FileMode(420), modTime: time.Unix(1562052640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsMiddleware_loggingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xbf\x4a\x04\x31\x10\xc7\xf1\x7a\xf7\x29\x7e\x84\x14\x09\x84\x3c\x80\x60\x65\x2b\x57\x88\xd8\xc7\xdb\xd9\x18\xc8\x1f\x9c\xcd\x9e\x07\x61\xde\x5d\x4e\x44\x0e\x6d\xbc\x6a\x18\x98\x2f\x7c\x66\x5a\x68\x25\xc6\xba\xd7\xa3\x79\xa5\x98\x2a\x7a\x2a\xe4\x9f\x53\x21\x8b\x31\x4f\x00\x90\x8b\xcf\x2d\x46\x62\xff\xd8\xa2\x51\x85\xfa\x5b\x5b\x94\x83\x1a\x43\xfb\x87\x90\x73\xaa\xd1\x1f\x42\x21\x11\xe5\x30\x06\x87\x1a\x09\x3a\x39\x7d\xc2\xdd\x3d\xb4\x7f\xa2\xf7\x9d\xb6\xee\x5f\x02\x6f\x22\x97\xec\x74\x7d\xff\xb3\x61\x8c\xb4\xa2\xb6\x0e\x93\xc3\xd6\xa1\xd3\xaf\xd8\x8a\xb8\x31\xa8\x2e\x22\xdf\xc3\x41\x11\xb3\x72\x20\x66\x3b\x4f\x62\xbe\xf8\x87\xf6\x61\xac\x9d\xe7\x89\xa9\xef\x5c\x2f\x1f\x54\x3a\x77\xff\x17\x6c\x8e\xfd\xfc\x0f\xf3\x15\xf2\x76\xa3\xfd\x0c\x00\x00\xff\xff\xb0\xf5\xcb\x68\x65\x01\x00\x00"

func tmplPartialsMiddleware_loggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_loggingTmpl,
		"tmpl/partials/middleware_logging.tmpl",
	)
}

func tmplPartialsMiddleware_loggingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_loggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_logging.tmpl", size: 357, mode: os.FileMode(420), modTime: time.Unix(1561962713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStructTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\x08\x59\x4a\x0e\x50\x70\xe5\xde\x95\xb8\x6e\xd0\x51\x2a\x64\x5a\x92\x58\x28\x8f\xb9\xbb\xb4\xd8\xee\xbe\x19\x78\xfc\xe4\xf0\x82\x0a\xe2\x65\xcc\x59\xb4\xc1\x7b\x33\x72\x3f\x57\x8b\x3e\xcd\xda\x32\x09\xc8\x78\x4d\x59\xcc\x50\x5b\xf9\x3e\x1a\xe8\x40\x96\xa4\x6f\x41\x18\x4e\x61\x46\x77\x46\xbc\xa7\x52\xcd\x1c\x40\x86\x79\x1f\x6c\xbe\x2d\xd3\xea\xfe\x53\x47\xed\xfc\xf6\x3a\x3a\xbe\xc7\x3f\xe5\x60\xbf\x00\x00\x00\xff\xff\x71\x9c\x4c\xf4\x96\x00\x00\x00"

func tmplPartialsStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStructTmpl,
		"tmpl/partials/struct.tmpl",
	)
}

func tmplPartialsStructTmpl() (*asset, error) {
	bytes, err := tmplPartialsStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct.tmpl", size: 150, mode: os.FileMode(420), modTime: time.Unix(1562053863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_functionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x6e\x84\x30\x10\x44\xfb\x7c\xc5\xc8\x15\x34\x56\xbe\x21\xe9\x53\x24\xe9\x11\x82\x25\x42\xb2\x0d\x31\xeb\x02\xad\xe6\xdf\x23\x9b\xdc\x9d\xae\xda\x9d\xd1\xec\xbe\x31\x5b\x17\x24\x81\x7f\xdf\x62\x94\xa4\x70\x8e\x34\xbb\xc9\xba\x4b\x9a\xc9\xa5\xa4\x09\x9d\x99\xff\xd2\x5c\x26\xf5\x1f\x63\x14\x12\x0f\xe3\xfb\xdc\x85\xec\x61\xa6\x12\xf7\x30\xaa\xc0\xad\x49\x25\x2f\xe3\x24\x43\x3d\x77\xf0\xa4\xe1\x22\x6e\x8a\x4e\x7e\xe1\xdf\xb6\xf9\x84\x73\x7d\x83\x56\xd1\x88\xe1\x10\xf2\xa5\x25\x7f\x14\x5d\x90\x04\xff\x29\x47\x09\x7a\xf4\x78\x25\xb3\x68\xc9\xe9\x89\x55\x09\xc3\xe5\xbb\x7b\xb8\x3d\x69\xfd\xff\x07\xf8\x17\x00\x00\xff\xff\x61\xb8\x92\x3e\xf1\x00\x00\x00"

func tmplPartialsStruct_functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_functionTmpl,
		"tmpl/partials/struct_function.tmpl",
	)
}

func tmplPartialsStruct_functionTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_function.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\xc8\x4b\x55\xd0\x73\xce\xcf\xcd\x4d\xcd\x2b\x51\x50\x52\xaa\xad\xad\xae\x86\x71\x41\xec\xd4\xbc\x94\xda\x5a\xae\x92\xca\x82\x54\x85\xea\x6a\x3d\xbf\xc4\xdc\xd4\xda\x5a\x10\x2b\xa4\xb2\x20\xb5\xb6\x16\x10\x00\x00\xff\xff\xac\xed\xb2\x28\x41\x00\x00\x00"

func tmplPartialsStruct_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_typeTmpl,
		"tmpl/partials/struct_type.tmpl",
	)
}

func tmplPartialsStruct_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_type.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1561742882, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\xa3\x64\x68\xa1\x64\x70\x2c\x38\xea\xe8\x50\xd0\x3d\xe8\xb5\x04\x62\x9a\x5e\xd2\x82\x1c\xf7\xdf\x25\xa5\x16\xd1\x2c\x8f\xdc\x7d\xef\xdd\x2b\x60\x7b\x84\xc1\xbd\xa0\x3d\xc2\x40\xe1\xde\xe5\x8f\xae\x98\x75\x87\xd3\x8c\x31\xe9\x8b\x79\xa2\x48\xfd\x85\xa7\x99\x3c\xac\x44\x0c\xa3\x8f\xb8\x21\x0c\xcc\x64\xfc\x80\xa0\x6c\xa3\x96\x9c\xa8\xf6\x94\x9b\xa1\x28\xc2\x9c\xc6\x6b\x08\x48\x67\x4b\x31\x81\x5a\x36\x6b\xcb\x6c\x7b\xc0\xe9\x33\x81\xf2\x44\x54\x8a\xc4\x44\x07\x24\xaa\xd6\x8a\x9a\x79\x37\xd4\xcc\xe8\x22\x8a\xfc\x6d\x98\xd1\x3f\xb2\xd8\x1e\xfc\x98\xa0\x72\x26\x5f\xb2\x3f\x5d\x6a\x91\x66\x47\x57\x01\x69\xc0\x5b\x57\xbc\x03\x00\x00\xff\xff\xd1\x45\x06\x24\x18\x01\x00\x00"

func tmplPartialsTransport_grpc_client_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_decode_funcTmpl,
		"tmpl/partials/transport_grpc_client_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_decode_func.tmpl", size: 280, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xca\xc3\x30\x0c\x05\xe0\x3d\xa7\xd0\xe0\x21\x81\x90\x03\x04\xfe\xf5\x1f\x3b\x14\xda\xdd\x50\xb5\x18\x52\xd9\x91\x9d\x2c\x0f\xdd\xbd\x38\x98\x50\xaa\xe5\x49\xf0\xe9\x75\xd4\x46\x79\xa5\xf9\xaf\xc6\xc6\xb9\x4c\x3d\x30\x5d\xdb\x7e\xf1\x6f\x36\x1b\xbe\x68\xd9\x54\xe8\x10\x39\x45\xc9\xdc\x08\x08\x50\x2f\x2f\x26\x17\x46\xb7\xd7\x3e\x77\xb6\xdc\xbd\x66\x33\xa0\xc4\x5b\x4a\xac\xff\x41\x73\x21\xb7\xb7\xd7\x59\x79\x9d\x80\xf3\x06\xc2\x93\x24\x16\xea\x17\x5f\x5d\xf8\x69\x1a\xcc\x46\x80\xe5\x51\xe9\x11\x64\x23\x49\x58\xba\x4f\x00\x00\x00\xff\xff\x11\x58\x8e\xd7\xd2\x00\x00\x00"

func tmplPartialsTransport_grpc_client_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_encode_funcTmpl,
		"tmpl/partials/transport_grpc_client_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_encode_func.tmpl", size: 210, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xb1\x0a\x83\x30\x10\xc6\xf1\xdd\xa7\xb8\x21\x83\x82\xe4\x01\x84\xae\x1d\x3b\x08\xed\x1e\xda\xab\x04\x6c\x4c\x2e\xd1\xe5\xe3\xde\xbd\x28\x41\x4a\x6f\x39\x0e\x7e\xf7\x6f\xa8\x8e\x70\xa2\xe1\x42\x93\xc4\xe7\xc8\xc9\xb6\x80\x1d\x39\xad\x9c\x8b\xbd\xb9\x0f\xab\x76\x3f\xb4\xac\x12\xe8\x10\x39\x2e\x21\x73\x25\x20\x40\x5c\x98\x98\x8c\xef\xcd\xb6\xf7\xcc\x59\x79\x38\xc9\xaa\x40\x59\xee\x31\xb2\x5c\xbd\xe4\x42\x66\xab\xaf\x83\x70\xb2\xc0\x79\x03\xfe\x4d\x61\x29\xd4\xce\x6e\x77\xfe\xaf\xd4\xa9\xf6\x00\x87\xd7\x4e\x8f\x45\xda\x53\xf0\x73\xf3\x0d\x00\x00\xff\xff\x7f\x0c\x8c\x97\xd2\x00\x00\x00"

func tmplPartialsTransport_grpc_server_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_decode_funcTmpl,
		"tmpl/partials/transport_grpc_server_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_decode_func.tmpl", size: 210, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\xa3\x64\x68\xa1\x64\x70\x2c\x38\xea\xe8\x50\xd0\x3d\xe8\xb5\x04\x62\x9a\x5e\xd2\x82\x1c\xf7\xdf\x25\xa5\x16\xd1\x2c\x8f\xdc\x7d\xef\xdd\x2b\x60\x7b\x84\xc1\xbd\xa0\x3d\xc2\x40\xe1\xde\xe5\x8f\xae\x98\x75\x87\xd3\x8c\x31\xe9\x8b\x79\xa2\x48\xfd\x85\xa7\x99\x3c\xac\x44\x0c\xa3\x8f\xb8\x21\x0c\xcc\x64\xfc\x80\xa0\x6c\xa3\x96\x9c\xa8\xf6\x94\x9b\xa1\x28\xc2\x9c\xc6\x6b\x08\x48\x67\x4b\x31\x81\x5a\x36\x6b\xcb\x6c\x7b\xc0\xe9\x33\x81\xf2\x44\x54\x8a\x20\xd1\x21\x26\xaa\xd6\x8a\x9a\x79\x37\xd4\xcc\xe8\x22\x8a\xfc\x6d\x98\xd1\x3f\xb2\xd8\x1e\xfc\x98\xa0\x72\x26\x5f\xb2\x3f\x5d\x6a\x91\x66\x47\x57\x01\x69\xc0\x5b\x57\xbc\x03\x00\x00\xff\xff\x70\x5e\xc5\xa5\x18\x01\x00\x00"

func tmplPartialsTransport_grpc_server_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_encode_funcTmpl,
		"tmpl/partials/transport_grpc_server_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_encode_func.tmpl", size: 280, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsVarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x2d\x4b\x2c\x52\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\xb8\x34\xa1\x0c\x40\x00\x00\x00\xff\xff\xd8\x54\xdd\xc2\x7c\x00\x00\x00"

func tmplPartialsVarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsVarsTmpl,
		"tmpl/partials/vars.tmpl",
	)
}

func tmplPartialsVarsTmpl() (*asset, error) {
	bytes, err := tmplPartialsVarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/vars.tmpl", size: 124, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProtoPbTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xcf\x4e\xc3\x30\x0c\xc6\xef\x79\x0a\xab\xca\x61\x93\xa6\xee\xc0\x8d\xaa\x8f\x00\x42\xd3\xc4\x89\x4b\x68\xdd\x2d\x6a\x9b\x86\xc4\xad\xa8\x2c\xbf\x3b\x5a\x69\x19\x8c\x3f\xda\x81\x53\xf2\xc5\xb1\xfd\xfb\xbe\x38\x3a\x32\xaf\x90\x43\xe2\x43\x47\xdd\x4d\x92\x29\xe5\x4d\x51\x9b\x03\x82\x7f\xce\x94\xda\x6e\x61\x7f\x44\x60\x4e\xef\x4d\x8b\x22\x10\x31\x0c\xb6\x40\x28\xb1\xb2\xce\x92\xed\x5c\xaa\x96\xb7\xf3\x2f\x56\x00\x00\xcc\xc1\xb8\x03\x82\xb6\x1b\x3d\xc0\x6d\x0e\xe9\x1d\xd2\xb1\x2b\xa3\xc8\x54\x0f\xbe\x00\x66\x3d\x2c\x5d\xab\x4f\x62\x87\x2f\x3d\x46\x5a\x43\x40\xea\x83\x8b\x17\x45\xdf\x8c\xeb\x79\x8b\x30\xdb\x0a\x5c\x47\xb0\x6a\x4c\x24\xd0\x16\xf4\xb2\x68\x2d\xc2\xec\x83\x75\x54\x41\xf2\xe4\x92\x93\x44\x57\x7e\x1c\x4a\xd4\x5f\x90\x2d\xc6\x78\x8a\xe2\x3b\x17\xf0\xb9\xb1\xde\xe8\x7a\xea\xd4\x43\xfa\x60\x82\x69\x91\x30\x44\x91\xf7\x08\x74\x3d\xa4\xfb\xd1\x4f\xa9\x4c\x62\x36\x9b\xcf\xf2\xd1\x34\x3d\x8a\x64\x97\x2e\xea\xaf\xe3\xae\x70\xf2\x33\xae\x6f\xc6\xdf\x60\x77\x18\xfb\x86\xfe\x87\x74\x9e\x75\x55\xe0\xd3\xed\x2d\x00\x00\xff\xff\xce\x43\x06\x7b\x7b\x02\x00\x00"

func tmplProtoPbTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProtoPbTmpl,
		"tmpl/proto.pb.tmpl",
	)
}

func tmplProtoPbTmpl() (*asset, error) {
	bytes, err := tmplProtoPbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto.pb.tmpl", size: 635, mode: os.FileMode(420), modTime: time.Unix(1562118577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x6a\x04\x31\x0c\x45\xfb\x39\x85\x2e\x60\xbb\x48\x67\xd8\x3a\xa4\x49\x13\x52\x07\xcd\xac\xa2\x35\x68\x2c\x63\xc9\x21\xb0\xec\xdd\x83\x67\x03\x21\x90\x26\x8d\x10\x9f\xf7\x1f\xfc\x9c\xe1\xa9\x9a\xa3\x08\xb4\xae\xae\x0f\x71\xc9\x19\x2e\xee\xcd\x72\x4a\x5c\xfc\x32\xd6\xb8\xe9\x9e\x58\x95\x85\xd2\x01\xad\xe3\x3d\x75\x12\x42\x23\x9b\xf8\x6b\x3b\xa3\xd3\x5d\xb0\xc1\xa3\xc2\x5a\xea\xb9\x54\x36\xf8\x28\x38\x01\x60\x05\x26\x87\x30\xe0\x97\x52\xb0\xf2\x8f\xf2\x78\xfe\x89\x6f\x81\xa9\x06\x9e\xb5\xd9\x7c\x21\x02\x14\xbb\x5b\xfe\x5a\xd1\xdb\x76\x9c\xc0\x9a\xbc\x13\xa5\x1d\xcd\xa9\x27\xfa\xc4\xbd\x09\xd9\xb2\x7c\xaf\xb8\x5e\xe3\x33\xee\x74\xbb\xc5\x23\x80\x10\x58\xdf\x74\xf8\xa9\xc9\xe0\x52\xed\x34\x2d\x39\x7e\x05\x00\x00\xff\xff\xa9\xcb\x56\x7a\x40\x01\x00\x00"

func tmplProto_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileBatTmpl,
		"tmpl/proto_compile.bat.tmpl",
	)
}

func tmplProto_compileBatTmpl() (*asset, error) {
	bytes, err := tmplProto_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.bat.tmpl", size: 320, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\x2b\x31\x14\x84\x7b\x3d\xc5\x5c\xb6\xbd\x2b\x15\xe9\x6c\x5c\x87\x34\x49\x61\x52\x07\xad\x7c\x7c\x56\x44\xd2\x59\xf4\xe3\x24\x18\xbf\x7b\x58\x79\x09\x04\xd2\x48\x83\x18\xbe\x6f\x34\xfc\x33\xad\x64\x33\xf9\x64\x28\x5d\x50\x66\xa5\x06\x3c\xa5\x52\x6d\x08\x58\xb2\x54\x79\xc0\x39\x4b\x44\x91\x96\x1d\x21\x5a\xf7\x72\x84\xa4\xf0\xa5\xd5\x00\x4c\x99\x3e\xe0\xb7\xba\x6d\x55\x9c\xa4\x73\x0f\xd1\xbe\x13\x82\x9f\xaa\x48\x58\x9b\xec\x2b\x5c\x90\x44\x98\x6b\x5d\xca\xce\x18\xf6\x75\x6e\x93\x76\x12\x0d\x8b\x70\x20\xd3\x7d\x53\x3b\xaf\x7d\x6d\x56\x0a\x53\xd2\x65\xc6\x1e\xda\xac\x64\xcf\x2d\x13\xf6\xe8\xf0\xed\xda\xec\x6a\x50\x03\x5e\x97\x93\xad\x74\xdf\xed\xf0\x28\x98\x7c\x3a\xf9\xc4\x05\x17\x6f\xfb\x0a\x01\x53\xc5\xd8\xf0\xcb\x1e\x6c\xe2\x1f\xbb\xb9\xf6\xf4\xff\x4e\x19\x99\xd2\xc8\x72\xeb\xfc\x23\x11\x6c\x28\xb2\xa2\xfe\xfa\x46\x5e\x5c\x3f\x46\x16\x53\x33\x91\x89\xb6\x54\xca\x86\x3e\x6d\x5c\x02\x15\xa5\xb6\x69\xd7\xab\x7e\xb6\x91\x6e\x37\xdd\x1f\x30\x8e\x2c\x6f\xd2\xea\x61\x09\x8d\x7d\x2a\x87\x95\xb2\xd3\xdf\x01\x00\x00\xff\xff\xf5\x6a\x2e\xbe\x9e\x01\x00\x00"

func tmplProto_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileShTmpl,
		"tmpl/proto_compile.sh.tmpl",
	)
}

func tmplProto_compileShTmpl() (*asset, error) {
	bytes, err := tmplProto_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.sh.tmpl", size: 414, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplSvcThriftTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x2d\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x56\x29\xd3\x0b\x4a\x2d\xc8\xa9\xac\xad\xad\xe6\xaa\xe5\x42\x15\x2e\x2c\x4d\x2d\x2e\x01\x4b\x54\x57\xa7\xe6\xa5\xd4\xd6\x72\x71\x15\xa7\x16\x95\x65\x26\xa7\x2a\x54\x57\xeb\xf9\x25\xe6\xa6\xd6\xd6\x06\xc3\x04\xb8\xf0\xd8\x86\x62\x0f\x84\x03\xd1\xad\xa0\x61\x68\x85\x66\x9b\x42\x51\x6a\xa1\x26\x17\xd4\xc2\x5a\x2e\x2e\x40\x00\x00\x00\xff\xff\x3c\x08\xab\xcd\xc5\x00\x00\x00"

func tmplSvcThriftTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSvcThriftTmpl,
		"tmpl/svc.thrift.tmpl",
	)
}

func tmplSvcThriftTmpl() (*asset, error) {
	bytes, err := tmplSvcThriftTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/svc.thrift.tmpl", size: 197, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\x41\xaa\xc3\x20\x10\xc6\xf1\xbd\xa7\x90\xac\x9f\xce\x5e\xc8\x01\xde\xa6\xf4\x06\x61\x92\x98\x51\x6a\x1c\x31\x53\x5a\x10\xef\xde\x85\x59\xce\x8f\xf9\xf8\x3b\xa7\xff\xf3\x25\x98\x92\x96\x50\xe3\x21\xda\xe9\x20\x52\x2e\x07\x30\xc0\x62\xc1\x2d\x78\xcb\x95\x60\xe7\x4f\x4e\x8c\xbb\xba\x7f\x4d\xd5\xc6\x90\xcf\x7a\x22\x76\x05\xb7\x17\x92\x5f\x4a\xf5\x47\xfc\xce\xad\xd9\xe7\x90\xde\x81\x7c\x36\xc4\xf0\x37\x76\x4b\x3c\x0b\x57\x99\x29\x4a\x78\xaf\x76\xe3\x13\x46\xe4\x4e\x42\x8a\x2b\x10\xdf\xd7\xa4\x5b\xb3\x0f\x3c\x7d\xef\x76\x88\x52\xea\x17\x00\x00\xff\xff\x24\x72\xa9\x61\xb8\x00\x00\x00"

func tmplThrift_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileBatTmpl,
		"tmpl/thrift_compile.bat.tmpl",
	)
}

func tmplThrift_compileBatTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.bat.tmpl", size: 184, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x0a\xd1\x5c\x17\x9b\x6d\xb7\x40\xaf\x83\x5d\xb6\xbd\x41\xb1\x53\x55\x11\x73\x2c\x63\xab\x6b\x21\xe4\xdd\x47\xb1\x4f\x3d\xea\xff\x24\xfd\xdf\x00\x9f\xa9\xaa\x8f\x11\x74\x29\x7c\x51\x58\xfd\xfc\x5d\xad\x19\xe0\xd5\x42\x28\x78\x03\xee\x3c\x88\x54\x35\x03\xbc\x3d\xe5\x91\x03\xfe\x61\x7a\xa0\xf7\x27\xd4\x5e\x9a\x01\x3e\xa4\x40\xe4\x74\xbd\x43\x45\x84\x09\x16\xd5\x5c\x27\xe7\xda\x82\xf5\xd9\xcf\x0b\x5a\x29\xe4\xce\x72\x4b\x51\xfc\xd9\x74\x9d\xb1\xc0\x38\x12\x26\x38\x90\x4c\xd9\xcf\xbf\x9e\xf0\x94\x0b\x5e\xf8\x7e\xdc\x36\xfb\xd3\x92\x7d\x77\x84\x69\x24\x71\x2f\xed\xee\xc4\x6b\x96\xa2\x47\x62\x5d\xae\xc1\xce\xb2\xba\x56\xd2\x2b\x5d\xe4\xe0\x48\xfa\x74\x80\x6d\xb3\x5f\x7e\xc5\x7d\xb7\xdd\xd9\x98\xff\x00\x00\x00\xff\xff\xef\x99\x12\x70\x1a\x01\x00\x00"

func tmplThrift_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileShTmpl,
		"tmpl/thrift_compile.sh.tmpl",
	)
}

func tmplThrift_compileShTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.sh.tmpl", size: 282, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/consulregister.go.tmpl": tmplConsulregisterGoTmpl,
	"tmpl/file.tmpl": tmplFileTmpl,
	"tmpl/gk.json.tmpl": tmplGkJsonTmpl,
	"tmpl/partials/alias_type.tmpl": tmplPartialsAlias_typeTmpl,
	"tmpl/partials/constants.tmpl": tmplPartialsConstantsTmpl,
	"tmpl/partials/endpoint_func.tmpl": tmplPartialsEndpoint_funcTmpl,
	"tmpl/partials/endpoint_method_func.tmpl": tmplPartialsEndpoint_method_funcTmpl,
	"tmpl/partials/func.tmpl": tmplPartialsFuncTmpl,
	"tmpl/partials/func_parameters.tmpl": tmplPartialsFunc_parametersTmpl,
	"tmpl/partials/func_results.tmpl": tmplPartialsFunc_resultsTmpl,
	"tmpl/partials/func_return.tmpl": tmplPartialsFunc_returnTmpl,
	"tmpl/partials/imports.tmpl": tmplPartialsImportsTmpl,
	"tmpl/partials/interface.tmpl": tmplPartialsInterfaceTmpl,
	"tmpl/partials/interface_func.tmpl": tmplPartialsInterface_funcTmpl,
	"tmpl/partials/interface_stub.tmpl": tmplPartialsInterface_stubTmpl,
	"tmpl/partials/middleware_instrumenting.tmpl": tmplPartialsMiddleware_instrumentingTmpl,
	"tmpl/partials/middleware_logging.tmpl": tmplPartialsMiddleware_loggingTmpl,
	"tmpl/partials/struct.tmpl": tmplPartialsStructTmpl,
	"tmpl/partials/struct_function.tmpl": tmplPartialsStruct_functionTmpl,
	"tmpl/partials/struct_type.tmpl": tmplPartialsStruct_typeTmpl,
	"tmpl/partials/transport_grpc_client_decode_func.tmpl": tmplPartialsTransport_grpc_client_decode_funcTmpl,
	"tmpl/partials/transport_grpc_client_encode_func.tmpl": tmplPartialsTransport_grpc_client_encode_funcTmpl,
	"tmpl/partials/transport_grpc_server_decode_func.tmpl": tmplPartialsTransport_grpc_server_decode_funcTmpl,
	"tmpl/partials/transport_grpc_server_encode_func.tmpl": tmplPartialsTransport_grpc_server_encode_funcTmpl,
	"tmpl/partials/vars.tmpl": tmplPartialsVarsTmpl,
	"tmpl/proto.pb.tmpl": tmplProtoPbTmpl,
	"tmpl/proto_compile.bat.tmpl": tmplProto_compileBatTmpl,
	"tmpl/proto_compile.sh.tmpl": tmplProto_compileShTmpl,
	"tmpl/svc.thrift.tmpl": tmplSvcThriftTmpl,
	"tmpl/thrift_compile.bat.tmpl": tmplThrift_compileBatTmpl,
	"tmpl/thrift_compile.sh.tmpl": tmplThrift_compileShTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"consulregister.go.tmpl": &bintree{tmplConsulregisterGoTmpl, map[string]*bintree{}},
		"file.tmpl": &bintree{tmplFileTmpl, map[string]*bintree{}},
		"gk.json.tmpl": &bintree{tmplGkJsonTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"alias_type.tmpl": &bintree{tmplPartialsAlias_typeTmpl, map[string]*bintree{}},
			"constants.tmpl": &bintree{tmplPartialsConstantsTmpl, map[string]*bintree{}},
			"endpoint_func.tmpl": &bintree{tmplPartialsEndpoint_funcTmpl, map[string]*bintree{}},
			"endpoint_method_func.tmpl": &bintree{tmplPartialsEndpoint_method_funcTmpl, map[string]*bintree{}},
			"func.tmpl": &bintree{tmplPartialsFuncTmpl, map[string]*bintree{}},
			"func_parameters.tmpl": &bintree{tmplPartialsFunc_parametersTmpl, map[string]*bintree{}},
			"func_results.tmpl": &bintree{tmplPartialsFunc_resultsTmpl, map[string]*bintree{}},
			"func_return.tmpl": &bintree{tmplPartialsFunc_returnTmpl, map[string]*bintree{}},
			"imports.tmpl": &bintree{tmplPartialsImportsTmpl, map[string]*bintree{}},
			"interface.tmpl": &bintree{tmplPartialsInterfaceTmpl, map[string]*bintree{}},
			"interface_func.tmpl": &bintree{tmplPartialsInterface_funcTmpl, map[string]*bintree{}},
			"interface_stub.tmpl": &bintree{tmplPartialsInterface_stubTmpl, map[string]*bintree{}},
			"middleware_instrumenting.tmpl": &bintree{tmplPartialsMiddleware_instrumentingTmpl, map[string]*bintree{}},
			"middleware_logging.tmpl": &bintree{tmplPartialsMiddleware_loggingTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{tmplPartialsStructTmpl, map[string]*bintree{}},
			"struct_function.tmpl": &bintree{tmplPartialsStruct_functionTmpl, map[string]*bintree{}},
			"struct_type.tmpl": &bintree{tmplPartialsStruct_typeTmpl, map[string]*bintree{}},
			"transport_grpc_client_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_client_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_encode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_encode_funcTmpl, map[string]*bintree{}},
			"vars.tmpl": &bintree{tmplPartialsVarsTmpl, map[string]*bintree{}},
		}},
		"proto.pb.tmpl": &bintree{tmplProtoPbTmpl, map[string]*bintree{}},
		"proto_compile.bat.tmpl": &bintree{tmplProto_compileBatTmpl, map[string]*bintree{}},
		"proto_compile.sh.tmpl": &bintree{tmplProto_compileShTmpl, map[string]*bintree{}},
		"svc.thrift.tmpl": &bintree{tmplSvcThriftTmpl, map[string]*bintree{}},
		"thrift_compile.bat.tmpl": &bintree{tmplThrift_compileBatTmpl, map[string]*bintree{}},
		"thrift_compile.sh.tmpl": &bintree{tmplThrift_compileShTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

