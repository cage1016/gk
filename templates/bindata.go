// Code generated by go-bindata.
// sources:
// tmpl/file.tmpl
// tmpl/gk.json.tmpl
// tmpl/partials/constants.tmpl
// tmpl/partials/endpoint_func.tmpl
// tmpl/partials/endpoint_method_func.tmpl
// tmpl/partials/func.tmpl
// tmpl/partials/func_parameters.tmpl
// tmpl/partials/func_results.tmpl
// tmpl/partials/func_return.tmpl
// tmpl/partials/imports.tmpl
// tmpl/partials/interface.tmpl
// tmpl/partials/interface_func.tmpl
// tmpl/partials/interface_stub.tmpl
// tmpl/partials/middleware_instrumenting.tmpl
// tmpl/partials/middleware_logging.tmpl
// tmpl/partials/struct.tmpl
// tmpl/partials/struct_function.tmpl
// tmpl/partials/struct_type.tmpl
// tmpl/partials/transport_grpc_client_decode_func.tmpl
// tmpl/partials/transport_grpc_client_encode_func.tmpl
// tmpl/partials/transport_grpc_server_decode_func.tmpl
// tmpl/partials/transport_grpc_server_encode_func.tmpl
// tmpl/partials/vars.tmpl
// tmpl/proto.pb.tmpl
// tmpl/proto_compile.bat.tmpl
// tmpl/proto_compile.sh.tmpl
// tmpl/svc.thrift.tmpl
// tmpl/thrift_compile.bat.tmpl
// tmpl/thrift_compile.sh.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplFileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3f\x6b\x85\x40\x10\xc4\x7b\x3f\xc5\x72\x58\x24\x10\x24\x75\x20\xd5\xab\x5e\x91\x10\x08\xa4\x0d\xc7\xbd\xd5\x1c\xf1\xf6\xcc\xb9\xda\x2c\xf7\xdd\xc3\xf9\x2f\x2a\x0a\xe9\x74\x67\xe6\x37\xeb\x2a\x62\x4b\x20\x84\xe2\xe2\x9d\x43\x62\x50\x2a\x46\x91\xf9\x35\xc6\x4c\x04\xe9\x16\x63\xa3\xcd\xb7\xae\x10\x44\x8a\xb7\xf1\x31\xf9\x6c\x09\x15\xc3\x5d\x8d\x04\xc5\xd5\x35\x3e\x70\x7b\x0f\x8f\x43\x8a\xd1\x35\xb5\x66\x04\x65\x47\x41\x2d\x96\x94\x1c\xa0\x5b\xc0\xc5\x53\xcb\x9a\x8e\x10\x66\x96\xd4\xca\x76\x82\xf9\xd0\xe1\x80\xd0\xeb\x90\xc2\x49\x3c\xc9\x5d\x89\x31\x94\xda\xe0\x92\x0e\x9a\x2a\x84\xdc\x3e\xe4\x3d\x3c\x3d\xaf\x1d\x29\xbb\xfa\xc0\x79\xae\x20\xef\xff\x4e\x76\xd8\xf2\xce\xa1\x33\x7c\x5a\x31\xc9\x5b\x7e\x3b\x0c\xff\x01\x7f\x41\xfe\xf2\xb7\x1d\x7c\x45\x9f\xf4\x29\x86\x3f\x90\xf7\x53\x63\xf1\xaa\x1d\x0e\x3f\x7f\x73\xb5\xb2\x23\x33\xf6\x8a\x60\xdd\xe2\x4e\x1e\x17\xfb\x4c\x2e\xb6\x9e\x16\x67\xda\x6c\xb7\x68\x96\xfd\x06\x00\x00\xff\xff\xc8\xf1\xa5\xaa\x6b\x02\x00\x00"

func tmplFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFileTmpl,
		"tmpl/file.tmpl",
	)
}

func tmplFileTmpl() (*asset, error) {
	bytes, err := tmplFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/file.tmpl", size: 619, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xb1\x6e\xc3\x20\x10\x86\xf7\x3c\x05\x62\xae\xfc\x00\x5e\x23\x75\xec\xe2\x74\x4e\xae\xe6\x9c\xa0\x18\x8c\x8e\x73\xab\x0a\xf1\xee\x15\xb5\xc1\xa5\xf2\x50\x55\xca\x88\x7e\xee\xfb\x3f\xfd\xe1\x20\x84\xf4\x48\xef\xba\x47\xd9\xa6\x97\x10\xd2\x01\xdf\x64\x2b\xdd\xfd\x1a\xc2\xa0\x47\xec\xd0\x01\x01\x4f\x14\x63\x08\x97\x10\x78\xea\x2c\xdc\xf1\x08\x1e\x45\xd3\x2d\xc7\x2f\x60\x30\xc6\x4b\xfa\xf1\xeb\x24\xd3\x9f\x16\x78\x4a\xcf\x16\x0c\xca\x36\x17\x37\xd7\x29\xa7\xda\x32\xd2\x00\x7d\xf9\xb2\x16\xbe\x3a\x87\xf4\xac\xc9\xf3\x11\x0c\x8e\xfb\xd5\x5d\xdd\xe4\x99\xe6\x9e\x4b\x17\xcf\x6f\x2b\xec\x0f\x88\x83\x10\x31\x61\xa4\xd1\x4a\x8d\xf8\x01\xb4\xcd\xb3\x02\xb7\x24\xf9\x97\x03\xb4\xca\x4d\xda\xb2\x7f\xd0\x9c\x1b\x7f\x67\xd0\x12\x56\x4a\x4c\x60\xbd\x9b\x88\x1f\xa4\x54\xf8\xbb\x4e\xdf\xc0\xe6\x94\xff\x9c\x3e\xdd\x82\xa9\x14\x7b\xa3\x56\xb9\xec\xd6\x1b\xf5\x0f\xb7\x45\xa0\xea\x37\xa0\x6d\xd5\xa5\x70\x80\x79\xe4\xf3\x8f\x59\xe4\x8d\xd9\xc9\x43\xfc\x0a\x00\x00\xff\xff\xac\x79\x54\xd8\x0f\x03\x00\x00"

func tmplGkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl,
		"tmpl/gk.json.tmpl",
	)
}

func tmplGkJsonTmpl() (*asset, error) {
	bytes, err := tmplGkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json.tmpl", size: 783, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsConstantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x4d\xce\xcf\x2b\x2e\x51\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\xb8\x34\xa1\x0c\x40\x00\x00\x00\xff\xff\x13\xc6\xee\xf4\x7e\x00\x00\x00"

func tmplPartialsConstantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsConstantsTmpl,
		"tmpl/partials/constants.tmpl",
	)
}

func tmplPartialsConstantsTmpl() (*asset, error) {
	bytes, err := tmplPartialsConstantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/constants.tmpl", size: 126, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x3f\x6b\xc3\x30\x14\xc4\xf7\x7e\x8a\x1b\x3c\xd8\x20\x44\x67\x43\xa6\x40\xc7\x0e\x81\x76\x2d\xc2\x7d\x36\x02\x55\x76\x25\xd9\x04\x1e\xef\xbb\x17\xf9\x1f\x49\x3c\x64\xa8\x17\x63\x73\xba\xfb\xdd\xe9\x05\x00\x02\xa5\x31\x78\xb4\xa3\x6f\xca\x26\x5d\xd1\xf4\x3e\xd1\x35\xe9\xf3\xf2\x56\x00\xb3\x6d\xd1\x25\x94\x8e\x3c\xf4\x85\x7e\x47\x8a\x49\x7f\x9a\x10\x2b\xbc\x8a\x84\xe5\x07\x33\xb9\x48\x22\x5f\xcc\xe4\xbf\x45\x60\x7d\xa2\xd0\x9a\x86\x58\x2a\x94\x37\x5f\x0a\x14\x42\x1f\x2a\xf0\x0c\xb0\x3d\xcf\x63\x50\x9f\xb0\xa6\xe9\x92\x79\xd7\xbc\x9b\x1f\x12\xa9\x1e\xdc\x66\x0a\xe6\x60\x7c\x47\x28\xac\x2a\xa6\x7c\x5e\x9f\x8d\x73\xd6\x77\xfa\x42\x71\x74\x29\x66\x49\x31\xad\x16\x33\x82\xef\x33\x83\x89\x09\x85\x45\xf1\xa8\xaf\x44\xd4\xee\xbd\x14\xad\x4f\x88\x53\xa3\x99\x77\xed\xe2\x96\xe7\x54\x47\x80\xdb\x66\x22\xb9\x90\x7e\x82\x70\xb7\xc5\x21\xff\xbe\xf7\x7a\x9d\xf3\x3a\x71\xe8\x7d\xa4\xcd\x18\x07\x94\x43\xb9\xec\x99\xfa\x8f\x61\xa0\xf0\x66\x43\x8e\xdf\xb0\xea\x7f\xaf\x24\x0a\xde\xba\x99\x55\xfe\x02\x00\x00\xff\xff\xc7\x92\xd3\xbe\x79\x02\x00\x00"

func tmplPartialsEndpoint_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_funcTmpl,
		"tmpl/partials/endpoint_func.tmpl",
	)
}

func tmplPartialsEndpoint_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_func.tmpl", size: 633, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_method_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xd6\x53\xcc\x0f\x3a\xd8\x60\x04\xff\x35\x90\x53\x69\x8f\xa5\x04\xda\xbb\xa8\x37\x41\xe0\xac\xdd\x95\x1c\x02\x8b\xde\xbd\xc8\x51\x7c\x28\x3e\x49\x48\x33\xb3\xf3\xad\x01\x00\xa1\x38\xf7\x20\x11\x1c\x8e\x20\xa7\xea\x5e\xfc\x38\x06\xbe\xb8\x77\x7f\xa5\x9c\x5f\x79\x98\xa7\xc0\xa9\xfd\x4e\xf7\x1e\xaa\xee\x44\x3f\x0b\xc5\x54\xbf\x15\xaa\xe2\xf9\x42\xb0\xa1\xb7\xb7\x12\x62\x37\xc9\x97\x97\x98\xb3\x6a\x9a\x3e\xe7\x99\xe4\x2d\x48\x4c\xb0\xb7\x6a\x3d\xa8\xa2\x0d\x3c\xd0\x1d\x76\x1b\xfa\xe1\xc5\x5f\x29\x91\x44\xb4\x7e\x18\x60\x03\xfe\x77\xdd\xea\x40\x89\x0a\x67\xf0\x94\xd0\x8e\xbe\x44\x85\x3f\xc3\xba\x9c\x7b\x55\xe2\xa1\x48\xd7\x03\xb9\x33\x4d\x38\xaf\x80\xff\x8e\xe0\x30\x42\x4d\xd3\x08\xa5\x45\xd8\x34\xd9\x34\x65\x01\x13\x47\x2a\xd5\xcb\xdd\xb5\x2b\xe4\xe3\xb1\x56\xed\x4c\x75\xec\xd3\x56\xed\x03\xf7\x99\xe7\x54\x37\xd4\xbd\xde\x4f\xe2\x13\xc5\x65\x4c\x3b\xd5\x7f\x03\x00\x00\xff\xff\xe0\x99\x34\x6c\x9f\x01\x00\x00"

func tmplPartialsEndpoint_method_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_method_funcTmpl,
		"tmpl/partials/endpoint_method_func.tmpl",
	)
}

func tmplPartialsEndpoint_method_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_method_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_method_func.tmpl", size: 415, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFuncTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x39\xc5\xa0\x55\xb2\x31\xff\x0c\xbf\x37\xe8\x05\x42\x48\x94\x12\x70\x94\xd6\x96\x17\x45\xe8\xee\xc5\x4e\x5b\xe8\x6e\x46\x1a\xde\x8c\xd9\xb6\x42\x18\xe1\x72\xec\x3b\x8b\x82\xc8\xdd\xec\x63\xab\x66\x59\xdc\xd7\x22\x33\xcc\x94\xf7\x7b\x9c\x94\x41\x9b\x28\xa7\x75\x9a\x79\xac\x2f\x42\x70\x87\xe1\xc4\x1d\x8a\x9e\x1f\x08\xff\xc7\xf2\x04\xd1\xd0\x88\xd5\x34\x5c\xcc\xec\xde\xb5\xe4\x4d\xd1\x47\x16\x84\x2b\xe7\x12\x35\x0f\xf8\x73\x4f\xac\x25\xc9\x4f\x59\xad\x18\xcf\x3b\x7d\xc3\x0d\xd2\xc6\x01\x6f\xd1\xf9\x2b\x00\x00\xff\xff\x07\xa4\xf4\xd5\xd0\x00\x00\x00"

func tmplPartialsFuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFuncTmpl,
		"tmpl/partials/func.tmpl",
	)
}

func tmplPartialsFuncTmpl() (*asset, error) {
	bytes, err := tmplPartialsFuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_parametersTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x25\x0a\x1a\x39\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\x05\x08\x00\x00\xff\xff\x15\x5b\x78\xe8\x50\x00\x00\x00"

func tmplPartialsFunc_parametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_parametersTmpl,
		"tmpl/partials/func_parameters.tmpl",
	)
}

func tmplPartialsFunc_parametersTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_parametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_parameters.tmpl", size: 80, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_resultsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xd5\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x20\xfd\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\xa5\x09\xa5\x01\x01\x00\x00\xff\xff\xcc\x6e\x26\x22\x6c\x00\x00\x00"

func tmplPartialsFunc_resultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_resultsTmpl,
		"tmpl/partials/func_results.tmpl",
	)
}

func tmplPartialsFunc_resultsTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_resultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_results.tmpl", size: 108, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_returnTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\x05\x31\x33\xd3\x14\xf2\xf2\x4b\x14\x34\x72\x12\x8b\x4b\x14\x54\x32\x15\x54\x34\x6b\x6b\x75\xaa\xab\x53\xf3\x52\x40\xb2\x60\x0a\x10\x00\x00\xff\xff\xbc\x66\xba\xd5\x44\x00\x00\x00"

func tmplPartialsFunc_returnTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_returnTmpl,
		"tmpl/partials/func_return.tmpl",
	)
}

func tmplPartialsFunc_returnTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_returnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_return.tmpl", size: 68, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsImportsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x50\xa9\xad\xcd\xcc\x2d\xc8\x2f\x2a\xd1\xe0\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x05\xc9\x81\xd5\xe4\xe5\x97\x28\x68\xa4\x16\x2a\xa8\x94\xe9\xf9\x25\xe6\xa6\x2a\x28\x29\x69\x82\x64\xa0\xdc\xda\x5a\x85\xea\xea\xd4\xbc\x14\xa8\x50\x48\x65\x41\x6a\x6d\x2d\x17\x54\x88\x4b\x13\xca\x00\x04\x00\x00\xff\xff\x34\xce\x15\xc7\x6d\x00\x00\x00"

func tmplPartialsImportsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsImportsTmpl,
		"tmpl/partials/imports.tmpl",
	)
}

func tmplPartialsImportsTmpl() (*asset, error) {
	bytes, err := tmplPartialsImportsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/imports.tmpl", size: 109, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterfaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\x08\x59\x4a\x0e\x20\xb8\x72\xad\x57\x90\xd0\xbe\x68\xc0\x4c\x4b\x1d\x0b\x32\xcc\xdd\xa5\xa0\xdd\xbd\xb7\xf8\x7e\xb3\x56\x21\x44\x3e\x4f\xbd\x53\x14\x31\xba\x9b\xfd\xef\xb6\x29\xa3\xbb\x7e\x66\xc2\x2c\x5f\x4b\xa7\x3b\x9a\x28\x97\x5a\x06\xc2\x82\xd9\x52\xe4\x4e\xa4\x76\x48\x2b\x8e\x27\xe4\x0b\xf5\x31\x8d\xaf\x0d\x2b\xfb\xfc\x2c\x4a\xc4\x9d\xdc\xea\x5b\x86\x88\xb4\xba\x87\x5f\x3d\xf8\x37\x00\x00\xff\xff\x19\x53\x8a\x78\x88\x00\x00\x00"

func tmplPartialsInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterfaceTmpl,
		"tmpl/partials/interface.tmpl",
	)
}

func tmplPartialsInterfaceTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface.tmpl", size: 136, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x2b\xcd\x4b\x8e\x2f\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\x52\xd0\x0b\x80\x73\x6a\x6b\x35\x31\x94\x16\xa5\x16\x97\xe6\x94\x80\xd4\x05\x41\x58\xb5\xb5\x80\x00\x00\x00\xff\xff\xc1\x2e\xd4\xb5\x59\x00\x00\x00"

func tmplPartialsInterface_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_funcTmpl,
		"tmpl/partials/interface_func.tmpl",
	)
}

func tmplPartialsInterface_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_func.tmpl", size: 89, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_stubTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x2e\x29\x2a\x4d\x2e\x51\x52\xd0\xab\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\xd4\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x45\xd5\x54\x9a\x14\x9f\x56\x9a\x97\x5c\x92\x99\x9f\xa7\xa4\xa0\x52\x56\x5b\xcb\xc5\x55\x5d\x9d\x9a\x97\x52\x5b\x0b\x08\x00\x00\xff\xff\x39\x10\x5c\x96\x5d\x00\x00\x00"

func tmplPartialsInterface_stubTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_stubTmpl,
		"tmpl/partials/interface_stub.tmpl",
	)
}

func tmplPartialsInterface_stubTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_stubTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_stub.tmpl", size: 93, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsMiddleware_instrumentingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4b\xc4\x30\x10\x85\xcf\xfa\x2b\x9e\x25\x87\x16\xca\x80\x57\xa1\x07\xf1\x2a\x1e\x14\xf4\x1c\xda\xe9\x6e\xa0\x49\xd6\x64\xba\x2e\x0c\xf9\xef\xd2\x28\x08\xbb\x1e\xf6\x92\x0c\x8f\x8f\x79\xdf\xdc\xa8\x26\x1b\x76\x0c\xe3\x7a\x73\xc4\xc3\x00\x43\xaf\x9c\x0f\x31\x64\xa6\x77\x9b\x72\x29\xaa\xe6\x48\x2f\xd6\xf3\x36\xba\x19\x21\x0a\xda\xc5\x66\x81\x71\xe7\x74\x57\x4a\xaf\xca\x61\xda\xd8\xfa\x61\x80\xf3\x14\xf8\x24\xa4\x6a\xe8\xc9\x2e\x8b\x0b\xbb\xdf\x7d\xed\x28\xa7\x1e\xff\x2a\x7c\xae\x9c\xe5\x5a\x83\x3f\xf8\x52\xa0\xbb\x05\x00\x37\x83\x53\xc2\xdd\x80\xe0\x16\x68\xcd\x6a\xee\x49\x55\xe2\x73\xfc\xe2\x84\x73\x3d\xfa\x70\xb2\x6f\x1b\xcf\xb2\x8f\x53\xd3\xa3\xb9\xbc\x60\x4b\xf3\x3a\x8e\x9c\x73\xd3\x63\xf6\x42\x6f\x87\xe4\x82\xb4\x5b\xdb\x50\xdb\xba\x8e\x1e\xa7\xa9\xbd\xff\x11\x29\xf5\x4d\x2c\x6b\x0a\xdf\x01\x00\x00\xff\xff\xd1\x62\xa2\x9a\x7d\x01\x00\x00"

func tmplPartialsMiddleware_instrumentingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_instrumentingTmpl,
		"tmpl/partials/middleware_instrumenting.tmpl",
	)
}

func tmplPartialsMiddleware_instrumentingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_instrumentingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_instrumenting.tmpl", size: 381, mode: os.FileMode(420), modTime: time.Unix(1561904243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsMiddleware_loggingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xbf\x4a\x04\x31\x10\xc7\xf1\x7a\xf7\x29\x7e\x84\x14\x09\x84\x3c\x80\x60\x65\x2b\x57\x88\xd8\xc7\xdb\xd9\x18\xc8\x1f\x9c\xcd\x9e\x07\x61\xde\x5d\x4e\x44\x0e\x6d\xbc\x6a\x18\x98\x2f\x7c\x66\x5a\x68\x25\xc6\xba\xd7\xa3\x79\xa5\x98\x2a\x7a\x2a\xe4\x9f\x53\x21\x8b\x31\x4f\x00\x90\x8b\xcf\x2d\x46\x62\xff\xd8\xa2\x51\x85\xfa\x5b\x5b\x94\x83\x1a\x43\xfb\x87\x90\x73\xaa\xd1\x1f\x42\x21\x11\xe5\x30\x06\x87\x1a\x09\x3a\x39\x7d\xc2\xdd\x3d\xb4\x7f\xa2\xf7\x9d\xb6\xee\x5f\x02\x6f\x22\x97\xec\x74\x7d\xff\xb3\x61\x8c\xb4\xa2\xb6\x0e\x93\xc3\xd6\xa1\xd3\xaf\xd8\x8a\xb8\x31\xa8\x2e\x22\xdf\xc3\x41\x11\xb3\x72\x20\x66\x3b\x4f\x62\xbe\xf8\x87\xf6\x61\xac\x9d\xe7\x89\xa9\xef\x5c\x2f\x1f\x54\x3a\x77\xff\x17\x6c\x8e\xfd\xfc\x0f\xf3\x15\xf2\x76\xa3\xfd\x0c\x00\x00\xff\xff\xb0\xf5\xcb\x68\x65\x01\x00\x00"

func tmplPartialsMiddleware_loggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_loggingTmpl,
		"tmpl/partials/middleware_logging.tmpl",
	)
}

func tmplPartialsMiddleware_loggingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_loggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_logging.tmpl", size: 357, mode: os.FileMode(420), modTime: time.Unix(1561962713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStructTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x0a\xc2\x40\x14\x84\xe1\x7e\x4f\x31\x84\x2d\x65\x0f\x20\x58\xd9\x5b\x89\xfd\xa2\x4f\x49\xb1\xcf\xb0\x79\x06\xc2\x30\x77\x17\x85\xa4\xfb\xa6\x98\x9f\x1c\x9f\x70\x43\x39\xbf\x5b\x33\x0f\x0c\x83\x44\x6e\xf3\x67\xf3\x87\x14\xeb\x64\x20\xcb\xa5\x36\x93\x30\x47\xff\xdc\x03\x4c\x20\x7b\xf5\x97\x21\x8f\x87\xbc\xe0\x78\x42\xb9\xd5\x3e\x4b\x09\x20\xf3\xb2\x1d\xfe\xbe\xae\x93\xed\xc5\x04\x7d\x03\x00\x00\xff\xff\x10\x9c\xe5\x4e\x7d\x00\x00\x00"

func tmplPartialsStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStructTmpl,
		"tmpl/partials/struct.tmpl",
	)
}

func tmplPartialsStructTmpl() (*asset, error) {
	bytes, err := tmplPartialsStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct.tmpl", size: 125, mode: os.FileMode(420), modTime: time.Unix(1561788560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_functionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x6e\x84\x30\x10\x44\xfb\x7c\xc5\xc8\x15\x34\x56\xbe\x21\xe9\x53\x24\xe9\x11\x82\x25\x42\xb2\x0d\x31\xeb\x02\xad\xe6\xdf\x23\x9b\xdc\x9d\xae\xda\x9d\xd1\xec\xbe\x31\x5b\x17\x24\x81\x7f\xdf\x62\x94\xa4\x70\x8e\x34\xbb\xc9\xba\x4b\x9a\xc9\xa5\xa4\x09\x9d\x99\xff\xd2\x5c\x26\xf5\x1f\x63\x14\x12\x0f\xe3\xfb\xdc\x85\xec\x61\xa6\x12\xf7\x30\xaa\xc0\xad\x49\x25\x2f\xe3\x24\x43\x3d\x77\xf0\xa4\xe1\x22\x6e\x8a\x4e\x7e\xe1\xdf\xb6\xf9\x84\x73\x7d\x83\x56\xd1\x88\xe1\x10\xf2\xa5\x25\x7f\x14\x5d\x90\x04\xff\x29\x47\x09\x7a\xf4\x78\x25\xb3\x68\xc9\xe9\x89\x55\x09\xc3\xe5\xbb\x7b\xb8\x3d\x69\xfd\xff\x07\xf8\x17\x00\x00\xff\xff\x61\xb8\x92\x3e\xf1\x00\x00\x00"

func tmplPartialsStruct_functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_functionTmpl,
		"tmpl/partials/struct_function.tmpl",
	)
}

func tmplPartialsStruct_functionTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_function.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\xc8\x4b\x55\xd0\x73\xce\xcf\xcd\x4d\xcd\x2b\x51\x50\x52\xaa\xad\xad\xae\x86\x71\x41\xec\xd4\xbc\x94\xda\x5a\xae\x92\xca\x82\x54\x85\xea\x6a\x3d\xbf\xc4\xdc\xd4\xda\x5a\x10\x2b\xa4\xb2\x20\xb5\xb6\x16\x10\x00\x00\xff\xff\xac\xed\xb2\x28\x41\x00\x00\x00"

func tmplPartialsStruct_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_typeTmpl,
		"tmpl/partials/struct_type.tmpl",
	)
}

func tmplPartialsStruct_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_type.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1561742882, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\xa3\x64\x68\xa1\x64\x70\x2c\x38\xea\xe8\x50\xd0\x3d\xe8\xb5\x04\x62\x9a\x5e\xd2\x82\x1c\xf7\xdf\x25\xa5\x16\xd1\x2c\x8f\xdc\x7d\xef\xdd\x2b\x60\x7b\x84\xc1\xbd\xa0\x3d\xc2\x40\xe1\xde\xe5\x8f\xae\x98\x75\x87\xd3\x8c\x31\xe9\x8b\x79\xa2\x48\xfd\x85\xa7\x99\x3c\xac\x44\x0c\xa3\x8f\xb8\x21\x0c\xcc\x64\xfc\x80\xa0\x6c\xa3\x96\x9c\xa8\xf6\x94\x9b\xa1\x28\xc2\x9c\xc6\x6b\x08\x48\x67\x4b\x31\x81\x5a\x36\x6b\xcb\x6c\x7b\xc0\xe9\x33\x81\xf2\x44\x54\x8a\xc4\x44\x07\x24\xaa\xd6\x8a\x9a\x79\x37\xd4\xcc\xe8\x22\x8a\xfc\x6d\x98\xd1\x3f\xb2\xd8\x1e\xfc\x98\xa0\x72\x26\x5f\xb2\x3f\x5d\x6a\x91\x66\x47\x57\x01\x69\xc0\x5b\x57\xbc\x03\x00\x00\xff\xff\xd1\x45\x06\x24\x18\x01\x00\x00"

func tmplPartialsTransport_grpc_client_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_decode_funcTmpl,
		"tmpl/partials/transport_grpc_client_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_decode_func.tmpl", size: 280, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xca\xc3\x30\x0c\x05\xe0\x3d\xa7\xd0\xe0\x21\x81\x90\x03\x04\xfe\xf5\x1f\x3b\x14\xda\xdd\x50\xb5\x18\x52\xd9\x91\x9d\x2c\x0f\xdd\xbd\x38\x98\x50\xaa\xe5\x49\xf0\xe9\x75\xd4\x46\x79\xa5\xf9\xaf\xc6\xc6\xb9\x4c\x3d\x30\x5d\xdb\x7e\xf1\x6f\x36\x1b\xbe\x68\xd9\x54\xe8\x10\x39\x45\xc9\xdc\x08\x08\x50\x2f\x2f\x26\x17\x46\xb7\xd7\x3e\x77\xb6\xdc\xbd\x66\x33\xa0\xc4\x5b\x4a\xac\xff\x41\x73\x21\xb7\xb7\xd7\x59\x79\x9d\x80\xf3\x06\xc2\x93\x24\x16\xea\x17\x5f\x5d\xf8\x69\x1a\xcc\x46\x80\xe5\x51\xe9\x11\x64\x23\x49\x58\xba\x4f\x00\x00\x00\xff\xff\x11\x58\x8e\xd7\xd2\x00\x00\x00"

func tmplPartialsTransport_grpc_client_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_encode_funcTmpl,
		"tmpl/partials/transport_grpc_client_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_encode_func.tmpl", size: 210, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\xb1\x0a\x83\x30\x10\xc6\xf1\xdd\xa7\xb8\x21\x83\x82\xe4\x01\x84\xae\x1d\x3b\x08\xed\x1e\xda\xab\x04\x6c\x4c\x2e\xd1\xe5\xe3\xde\xbd\x28\x41\x4a\x6f\x39\x0e\x7e\xf7\x6f\xa8\x8e\x70\xa2\xe1\x42\x93\xc4\xe7\xc8\xc9\xb6\x80\x1d\x39\xad\x9c\x8b\xbd\xb9\x0f\xab\x76\x3f\xb4\xac\x12\xe8\x10\x39\x2e\x21\x73\x25\x20\x40\x5c\x98\x98\x8c\xef\xcd\xb6\xf7\xcc\x59\x79\x38\xc9\xaa\x40\x59\xee\x31\xb2\x5c\xbd\xe4\x42\x66\xab\xaf\x83\x70\xb2\xc0\x79\x03\xfe\x4d\x61\x29\xd4\xce\x6e\x77\xfe\xaf\xd4\xa9\xf6\x00\x87\xd7\x4e\x8f\x45\xda\x53\xf0\x73\xf3\x0d\x00\x00\xff\xff\x7f\x0c\x8c\x97\xd2\x00\x00\x00"

func tmplPartialsTransport_grpc_server_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_decode_funcTmpl,
		"tmpl/partials/transport_grpc_server_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_decode_func.tmpl", size: 210, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\xa3\x64\x68\xa1\x64\x70\x2c\x38\xea\xe8\x50\xd0\x3d\xe8\xb5\x04\x62\x9a\x5e\xd2\x82\x1c\xf7\xdf\x25\xa5\x16\xd1\x2c\x8f\xdc\x7d\xef\xdd\x2b\x60\x7b\x84\xc1\xbd\xa0\x3d\xc2\x40\xe1\xde\xe5\x8f\xae\x98\x75\x87\xd3\x8c\x31\xe9\x8b\x79\xa2\x48\xfd\x85\xa7\x99\x3c\xac\x44\x0c\xa3\x8f\xb8\x21\x0c\xcc\x64\xfc\x80\xa0\x6c\xa3\x96\x9c\xa8\xf6\x94\x9b\xa1\x28\xc2\x9c\xc6\x6b\x08\x48\x67\x4b\x31\x81\x5a\x36\x6b\xcb\x6c\x7b\xc0\xe9\x33\x81\xf2\x44\x54\x8a\x20\xd1\x21\x26\xaa\xd6\x8a\x9a\x79\x37\xd4\xcc\xe8\x22\x8a\xfc\x6d\x98\xd1\x3f\xb2\xd8\x1e\xfc\x98\xa0\x72\x26\x5f\xb2\x3f\x5d\x6a\x91\x66\x47\x57\x01\x69\xc0\x5b\x57\xbc\x03\x00\x00\xff\xff\x70\x5e\xc5\xa5\x18\x01\x00\x00"

func tmplPartialsTransport_grpc_server_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_encode_funcTmpl,
		"tmpl/partials/transport_grpc_server_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_encode_func.tmpl", size: 280, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsVarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x2d\x4b\x2c\x52\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\xb8\x34\xa1\x0c\x40\x00\x00\x00\xff\xff\xd8\x54\xdd\xc2\x7c\x00\x00\x00"

func tmplPartialsVarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsVarsTmpl,
		"tmpl/partials/vars.tmpl",
	)
}

func tmplPartialsVarsTmpl() (*asset, error) {
	bytes, err := tmplPartialsVarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/vars.tmpl", size: 124, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProtoPbTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x0a\x82\x40\x10\x86\xef\xfb\x14\x83\x78\x28\x08\x3d\x74\x4b\x7c\x84\x3a\x44\x2f\xb0\xe9\xa4\x4b\xb9\xbb\xed\xac\x92\x0c\xf3\xee\xa1\x64\x51\x87\x8e\xf3\x7f\x1f\x1f\x43\xa3\x8d\xfa\x01\x25\x24\x3e\xb8\xe8\xb6\x49\xa1\xbc\xae\xae\xba\x41\xf0\xe7\x42\xe5\x39\x9c\x5a\x04\xe6\xec\xa0\x3b\x14\x01\xc2\x30\x98\x0a\xa1\xc6\x8b\xb1\x26\x1a\x67\x33\xb5\x6c\x1f\x8b\x15\x73\xd0\xb6\x41\x48\xcd\x26\x1d\x60\x57\x42\xb6\xc7\xd8\xba\x9a\x44\x20\xf8\x0a\x98\xd3\x61\xb1\x57\xf3\x71\xc4\x7b\x8f\x14\x45\xd6\x10\x30\xf6\xc1\xd2\x1b\xf8\xdb\x38\xcd\x2c\x8a\x19\x6d\x2d\x22\xff\xfa\x1d\x12\x4d\xff\x7f\x57\x81\x95\xa8\x1f\x34\x77\x67\xf0\xea\x3e\x03\x00\x00\xff\xff\x30\xc0\xb8\x3f\x0e\x01\x00\x00"

func tmplProtoPbTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProtoPbTmpl,
		"tmpl/proto.pb.tmpl",
	)
}

func tmplProtoPbTmpl() (*asset, error) {
	bytes, err := tmplProtoPbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto.pb.tmpl", size: 270, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x6a\x04\x31\x0c\x45\xfb\x39\x85\x2e\x60\xbb\x48\x67\xd8\x3a\xa4\x49\x13\x52\x07\xcd\xac\xa2\x35\x68\x2c\x63\xc9\x21\xb0\xec\xdd\x83\x67\x03\x21\x90\x26\x8d\x10\x9f\xf7\x1f\xfc\x9c\xe1\xa9\x9a\xa3\x08\xb4\xae\xae\x0f\x71\xc9\x19\x2e\xee\xcd\x72\x4a\x5c\xfc\x32\xd6\xb8\xe9\x9e\x58\x95\x85\xd2\x01\xad\xe3\x3d\x75\x12\x42\x23\x9b\xf8\x6b\x3b\xa3\xd3\x5d\xb0\xc1\xa3\xc2\x5a\xea\xb9\x54\x36\xf8\x28\x38\x01\x60\x05\x26\x87\x30\xe0\x97\x52\xb0\xf2\x8f\xf2\x78\xfe\x89\x6f\x81\xa9\x06\x9e\xb5\xd9\x7c\x21\x02\x14\xbb\x5b\xfe\x5a\xd1\xdb\x76\x9c\xc0\x9a\xbc\x13\xa5\x1d\xcd\xa9\x27\xfa\xc4\xbd\x09\xd9\xb2\x7c\xaf\xb8\x5e\xe3\x33\xee\x74\xbb\xc5\x23\x80\x10\x58\xdf\x74\xf8\xa9\xc9\xe0\x52\xed\x34\x2d\x39\x7e\x05\x00\x00\xff\xff\xa9\xcb\x56\x7a\x40\x01\x00\x00"

func tmplProto_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileBatTmpl,
		"tmpl/proto_compile.bat.tmpl",
	)
}

func tmplProto_compileBatTmpl() (*asset, error) {
	bytes, err := tmplProto_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.bat.tmpl", size: 320, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\x2b\x31\x14\x84\x7b\x3d\xc5\x5c\xb6\xbd\x2b\x15\xe9\x6c\x5c\x87\x34\x49\x61\x52\x07\xad\x7c\x7c\x56\x44\xd2\x59\xf4\xe3\x24\x18\xbf\x7b\x58\x79\x09\x04\xd2\x48\x83\x18\xbe\x6f\x34\xfc\x33\xad\x64\x33\xf9\x64\x28\x5d\x50\x66\xa5\x06\x3c\xa5\x52\x6d\x08\x58\xb2\x54\x79\xc0\x39\x4b\x44\x91\x96\x1d\x21\x5a\xf7\x72\x84\xa4\xf0\xa5\xd5\x00\x4c\x99\x3e\xe0\xb7\xba\x6d\x55\x9c\xa4\x73\x0f\xd1\xbe\x13\x82\x9f\xaa\x48\x58\x9b\xec\x2b\x5c\x90\x44\x98\x6b\x5d\xca\xce\x18\xf6\x75\x6e\x93\x76\x12\x0d\x8b\x70\x20\xd3\x7d\x53\x3b\xaf\x7d\x6d\x56\x0a\x53\xd2\x65\xc6\x1e\xda\xac\x64\xcf\x2d\x13\xf6\xe8\xf0\xed\xda\xec\x6a\x50\x03\x5e\x97\x93\xad\x74\xdf\xed\xf0\x28\x98\x7c\x3a\xf9\xc4\x05\x17\x6f\xfb\x0a\x01\x53\xc5\xd8\xf0\xcb\x1e\x6c\xe2\x1f\xbb\xb9\xf6\xf4\xff\x4e\x19\x99\xd2\xc8\x72\xeb\xfc\x23\x11\x6c\x28\xb2\xa2\xfe\xfa\x46\x5e\x5c\x3f\x46\x16\x53\x33\x91\x89\xb6\x54\xca\x86\x3e\x6d\x5c\x02\x15\xa5\xb6\x69\xd7\xab\x7e\xb6\x91\x6e\x37\xdd\x1f\x30\x8e\x2c\x6f\xd2\xea\x61\x09\x8d\x7d\x2a\x87\x95\xb2\xd3\xdf\x01\x00\x00\xff\xff\xf5\x6a\x2e\xbe\x9e\x01\x00\x00"

func tmplProto_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileShTmpl,
		"tmpl/proto_compile.sh.tmpl",
	)
}

func tmplProto_compileShTmpl() (*asset, error) {
	bytes, err := tmplProto_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.sh.tmpl", size: 414, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplSvcThriftTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x2d\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x56\x29\xd3\x0b\x4a\x2d\xc8\xa9\xac\xad\xad\xe6\xaa\xe5\x42\x15\x2e\x2c\x4d\x2d\x2e\x01\x4b\x54\x57\xa7\xe6\xa5\xd4\xd6\x72\x71\x15\xa7\x16\x95\x65\x26\xa7\x2a\x54\x57\xeb\xf9\x25\xe6\xa6\xd6\xd6\x06\xc3\x04\xb8\xf0\xd8\x86\x62\x0f\x84\x03\xd1\xad\xa0\x61\x68\x85\x66\x9b\x42\x51\x6a\xa1\x26\x17\xd4\xc2\x5a\x2e\x2e\x40\x00\x00\x00\xff\xff\x3c\x08\xab\xcd\xc5\x00\x00\x00"

func tmplSvcThriftTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSvcThriftTmpl,
		"tmpl/svc.thrift.tmpl",
	)
}

func tmplSvcThriftTmpl() (*asset, error) {
	bytes, err := tmplSvcThriftTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/svc.thrift.tmpl", size: 197, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\x41\xaa\xc3\x20\x10\xc6\xf1\xbd\xa7\x90\xac\x9f\xce\x5e\xc8\x01\xde\xa6\xf4\x06\x61\x92\x98\x51\x6a\x1c\x31\x53\x5a\x10\xef\xde\x85\x59\xce\x8f\xf9\xf8\x3b\xa7\xff\xf3\x25\x98\x92\x96\x50\xe3\x21\xda\xe9\x20\x52\x2e\x07\x30\xc0\x62\xc1\x2d\x78\xcb\x95\x60\xe7\x4f\x4e\x8c\xbb\xba\x7f\x4d\xd5\xc6\x90\xcf\x7a\x22\x76\x05\xb7\x17\x92\x5f\x4a\xf5\x47\xfc\xce\xad\xd9\xe7\x90\xde\x81\x7c\x36\xc4\xf0\x37\x76\x4b\x3c\x0b\x57\x99\x29\x4a\x78\xaf\x76\xe3\x13\x46\xe4\x4e\x42\x8a\x2b\x10\xdf\xd7\xa4\x5b\xb3\x0f\x3c\x7d\xef\x76\x88\x52\xea\x17\x00\x00\xff\xff\x24\x72\xa9\x61\xb8\x00\x00\x00"

func tmplThrift_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileBatTmpl,
		"tmpl/thrift_compile.bat.tmpl",
	)
}

func tmplThrift_compileBatTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.bat.tmpl", size: 184, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x0a\xd1\x5c\x17\x9b\x6d\xb7\x40\xaf\x83\x5d\xb6\xbd\x41\xb1\x53\x55\x11\x73\x2c\x63\xab\x6b\x21\xe4\xdd\x47\xb1\x4f\x3d\xea\xff\x24\xfd\xdf\x00\x9f\xa9\xaa\x8f\x11\x74\x29\x7c\x51\x58\xfd\xfc\x5d\xad\x19\xe0\xd5\x42\x28\x78\x03\xee\x3c\x88\x54\x35\x03\xbc\x3d\xe5\x91\x03\xfe\x61\x7a\xa0\xf7\x27\xd4\x5e\x9a\x01\x3e\xa4\x40\xe4\x74\xbd\x43\x45\x84\x09\x16\xd5\x5c\x27\xe7\xda\x82\xf5\xd9\xcf\x0b\x5a\x29\xe4\xce\x72\x4b\x51\xfc\xd9\x74\x9d\xb1\xc0\x38\x12\x26\x38\x90\x4c\xd9\xcf\xbf\x9e\xf0\x94\x0b\x5e\xf8\x7e\xdc\x36\xfb\xd3\x92\x7d\x77\x84\x69\x24\x71\x2f\xed\xee\xc4\x6b\x96\xa2\x47\x62\x5d\xae\xc1\xce\xb2\xba\x56\xd2\x2b\x5d\xe4\xe0\x48\xfa\x74\x80\x6d\xb3\x5f\x7e\xc5\x7d\xb7\xdd\xd9\x98\xff\x00\x00\x00\xff\xff\xef\x99\x12\x70\x1a\x01\x00\x00"

func tmplThrift_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileShTmpl,
		"tmpl/thrift_compile.sh.tmpl",
	)
}

func tmplThrift_compileShTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.sh.tmpl", size: 282, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/file.tmpl": tmplFileTmpl,
	"tmpl/gk.json.tmpl": tmplGkJsonTmpl,
	"tmpl/partials/constants.tmpl": tmplPartialsConstantsTmpl,
	"tmpl/partials/endpoint_func.tmpl": tmplPartialsEndpoint_funcTmpl,
	"tmpl/partials/endpoint_method_func.tmpl": tmplPartialsEndpoint_method_funcTmpl,
	"tmpl/partials/func.tmpl": tmplPartialsFuncTmpl,
	"tmpl/partials/func_parameters.tmpl": tmplPartialsFunc_parametersTmpl,
	"tmpl/partials/func_results.tmpl": tmplPartialsFunc_resultsTmpl,
	"tmpl/partials/func_return.tmpl": tmplPartialsFunc_returnTmpl,
	"tmpl/partials/imports.tmpl": tmplPartialsImportsTmpl,
	"tmpl/partials/interface.tmpl": tmplPartialsInterfaceTmpl,
	"tmpl/partials/interface_func.tmpl": tmplPartialsInterface_funcTmpl,
	"tmpl/partials/interface_stub.tmpl": tmplPartialsInterface_stubTmpl,
	"tmpl/partials/middleware_instrumenting.tmpl": tmplPartialsMiddleware_instrumentingTmpl,
	"tmpl/partials/middleware_logging.tmpl": tmplPartialsMiddleware_loggingTmpl,
	"tmpl/partials/struct.tmpl": tmplPartialsStructTmpl,
	"tmpl/partials/struct_function.tmpl": tmplPartialsStruct_functionTmpl,
	"tmpl/partials/struct_type.tmpl": tmplPartialsStruct_typeTmpl,
	"tmpl/partials/transport_grpc_client_decode_func.tmpl": tmplPartialsTransport_grpc_client_decode_funcTmpl,
	"tmpl/partials/transport_grpc_client_encode_func.tmpl": tmplPartialsTransport_grpc_client_encode_funcTmpl,
	"tmpl/partials/transport_grpc_server_decode_func.tmpl": tmplPartialsTransport_grpc_server_decode_funcTmpl,
	"tmpl/partials/transport_grpc_server_encode_func.tmpl": tmplPartialsTransport_grpc_server_encode_funcTmpl,
	"tmpl/partials/vars.tmpl": tmplPartialsVarsTmpl,
	"tmpl/proto.pb.tmpl": tmplProtoPbTmpl,
	"tmpl/proto_compile.bat.tmpl": tmplProto_compileBatTmpl,
	"tmpl/proto_compile.sh.tmpl": tmplProto_compileShTmpl,
	"tmpl/svc.thrift.tmpl": tmplSvcThriftTmpl,
	"tmpl/thrift_compile.bat.tmpl": tmplThrift_compileBatTmpl,
	"tmpl/thrift_compile.sh.tmpl": tmplThrift_compileShTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"file.tmpl": &bintree{tmplFileTmpl, map[string]*bintree{}},
		"gk.json.tmpl": &bintree{tmplGkJsonTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"constants.tmpl": &bintree{tmplPartialsConstantsTmpl, map[string]*bintree{}},
			"endpoint_func.tmpl": &bintree{tmplPartialsEndpoint_funcTmpl, map[string]*bintree{}},
			"endpoint_method_func.tmpl": &bintree{tmplPartialsEndpoint_method_funcTmpl, map[string]*bintree{}},
			"func.tmpl": &bintree{tmplPartialsFuncTmpl, map[string]*bintree{}},
			"func_parameters.tmpl": &bintree{tmplPartialsFunc_parametersTmpl, map[string]*bintree{}},
			"func_results.tmpl": &bintree{tmplPartialsFunc_resultsTmpl, map[string]*bintree{}},
			"func_return.tmpl": &bintree{tmplPartialsFunc_returnTmpl, map[string]*bintree{}},
			"imports.tmpl": &bintree{tmplPartialsImportsTmpl, map[string]*bintree{}},
			"interface.tmpl": &bintree{tmplPartialsInterfaceTmpl, map[string]*bintree{}},
			"interface_func.tmpl": &bintree{tmplPartialsInterface_funcTmpl, map[string]*bintree{}},
			"interface_stub.tmpl": &bintree{tmplPartialsInterface_stubTmpl, map[string]*bintree{}},
			"middleware_instrumenting.tmpl": &bintree{tmplPartialsMiddleware_instrumentingTmpl, map[string]*bintree{}},
			"middleware_logging.tmpl": &bintree{tmplPartialsMiddleware_loggingTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{tmplPartialsStructTmpl, map[string]*bintree{}},
			"struct_function.tmpl": &bintree{tmplPartialsStruct_functionTmpl, map[string]*bintree{}},
			"struct_type.tmpl": &bintree{tmplPartialsStruct_typeTmpl, map[string]*bintree{}},
			"transport_grpc_client_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_client_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_encode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_encode_funcTmpl, map[string]*bintree{}},
			"vars.tmpl": &bintree{tmplPartialsVarsTmpl, map[string]*bintree{}},
		}},
		"proto.pb.tmpl": &bintree{tmplProtoPbTmpl, map[string]*bintree{}},
		"proto_compile.bat.tmpl": &bintree{tmplProto_compileBatTmpl, map[string]*bintree{}},
		"proto_compile.sh.tmpl": &bintree{tmplProto_compileShTmpl, map[string]*bintree{}},
		"svc.thrift.tmpl": &bintree{tmplSvcThriftTmpl, map[string]*bintree{}},
		"thrift_compile.bat.tmpl": &bintree{tmplThrift_compileBatTmpl, map[string]*bintree{}},
		"thrift_compile.sh.tmpl": &bintree{tmplThrift_compileShTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

