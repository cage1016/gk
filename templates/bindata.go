// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/custom_errors.go.tmpl (2.429kB)
// tmpl/custom_responses.go.tmpl (362B)
// tmpl/custom_responses_decode.go.tmpl (2.398kB)
// tmpl/custom_responses_error.go.tmpl (324B)
// tmpl/custom_responses_httpstatus.go.tmpl (1.364kB)
// tmpl/file.tmpl (715B)
// tmpl/gk.json.tmpl (1.427kB)
// tmpl/partials/alias_type.tmpl (130B)
// tmpl/partials/constants.tmpl (126B)
// tmpl/partials/endpoint_func.tmpl (778B)
// tmpl/partials/endpoint_method_func.tmpl (450B)
// tmpl/partials/endpoint_response.tmpl (252B)
// tmpl/partials/func.tmpl (208B)
// tmpl/partials/func_parameters.tmpl (80B)
// tmpl/partials/func_results.tmpl (108B)
// tmpl/partials/func_return.tmpl (68B)
// tmpl/partials/imports.tmpl (109B)
// tmpl/partials/interface.tmpl (180B)
// tmpl/partials/interface_func.tmpl (89B)
// tmpl/partials/interface_stub.tmpl (93B)
// tmpl/partials/middleware_instrumenting.tmpl (372B)
// tmpl/partials/middleware_logging.tmpl (325B)
// tmpl/partials/struct.tmpl (151B)
// tmpl/partials/struct_function.tmpl (241B)
// tmpl/partials/struct_type.tmpl (65B)
// tmpl/partials/transport_grpc_client_decode_func.tmpl (324B)
// tmpl/partials/transport_grpc_client_encode_func.tmpl (286B)
// tmpl/partials/transport_grpc_server_decode_func.tmpl (286B)
// tmpl/partials/transport_grpc_server_encode_func.tmpl (281B)
// tmpl/partials/vars.tmpl (208B)
// tmpl/proto.pb.tmpl (622B)
// tmpl/proto_compile.bat.tmpl (320B)
// tmpl/proto_compile.sh.tmpl (414B)
// tmpl/svc.thrift.tmpl (197B)
// tmpl/thrift_compile.bat.tmpl (184B)
// tmpl/thrift_compile.sh.tmpl (282B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCustom_errorsGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x8e\xdb\x36\x10\x3d\x8b\x5f\x31\x15\x90\x56\x2a\x0c\xf9\xbe\x85\x0f\x45\x9a\x02\x01\xba\x41\xd1\x0d\xd0\x43\x51\x24\x5c\x79\xa4\x65\x23\x91\xc2\x0c\x95\xcd\xc2\xf1\x35\x1f\x90\x4f\xcc\x97\x14\x23\x92\xb2\xbc\x56\x77\x51\x5d\x6c\x91\xf3\x86\x6f\xde\xbc\xa1\x06\x5d\x7f\xd0\x2d\x02\x12\x39\x62\xa5\x4c\x3f\x38\xf2\x50\xa8\x2c\x6f\x7a\x9f\xab\x2c\x67\x4f\xc6\xb6\x9c\xab\x52\x29\xff\x30\x20\xbc\x9a\x42\x81\x3d\x8d\xb5\x87\x83\xca\x7e\x71\xbd\x36\x16\xc2\x13\xc2\xe1\xfd\x3f\xec\xec\x55\xbe\x9f\xb6\x36\xae\x37\x1e\xfb\xc1\x3f\xe4\xef\x55\x76\x8d\xcc\x72\xe4\x4a\x78\x1f\xb6\x24\xea\x0f\xd4\xec\xd6\x93\xd2\xb4\x75\x9e\xf4\x37\x57\x6b\x6f\x22\xe0\x3c\xbc\x8b\x5b\xeb\x80\xb7\x52\xd2\x3a\x40\xb6\xce\x40\x47\xa5\x9a\xd1\xd6\xf0\x2b\xb9\x7e\x52\xa1\x40\xa2\x08\x2e\xe1\xaf\xbf\xa3\x32\x07\x95\x7d\xd4\x04\x84\x3c\xaf\xa9\xac\x71\x04\xef\x36\x80\x70\xb5\x03\xd2\xb6\x4d\x87\x72\x75\x33\x74\xc6\x4b\xa6\x0d\xe4\xdf\xbe\x7c\xcd\x4b\x49\x90\x09\x7a\x07\x7a\x18\xd0\xee\x0b\x42\xde\x44\xdd\x65\x2f\x49\x78\x35\xe7\x78\x4b\xa6\xbf\x19\x74\x8d\x05\x96\x1b\x95\x65\xc7\x52\x65\x47\x95\x11\xfa\x91\xac\x30\x11\xee\xdb\x6d\xc8\x01\x3c\x60\x6d\x1a\x83\x0c\xda\xc2\xcf\xbf\xbf\x06\x7f\xa7\x3d\xf4\x23\x7b\xb8\x45\x68\xc6\xae\x6b\x4c\x87\x7b\xb8\x7d\x08\xbe\x00\xe9\xfb\xa2\xf9\x60\xac\x47\x6a\x74\x8d\x42\x35\xa5\x65\x88\xc7\x9d\x19\x44\x65\xe1\xb5\x38\x09\xa4\x4e\x18\x30\xfd\xd0\x61\x8f\xd6\x33\xf8\xbb\x68\xc3\x53\xfa\x2a\xa2\x8b\x32\x56\x1a\xa0\xd7\xdc\xc6\xb3\x38\x22\xa2\x71\x54\x76\xcd\xed\xa3\xe0\x57\x44\x73\xf0\x3d\x89\xa0\xfb\x00\x9a\x72\x17\x65\x20\x22\xfa\x48\xd3\xde\x45\x5e\x3b\x28\x7e\xac\x47\xf6\xb1\xd1\x65\x61\x4d\x57\x4e\x12\x2e\x56\xd3\x0c\x10\x0e\x84\x3c\x15\xa1\xe1\x5a\x1b\xdb\x74\xe3\xa7\x78\xc8\xa4\xda\x0a\xe6\xa0\xb2\x9e\x5b\x98\x9f\x48\x39\xdb\x5f\x0e\x93\xf4\xf1\x62\x18\x54\xd6\x5d\x5a\xfe\xb4\xb8\xb0\xb5\xca\xc4\xa5\xf3\x33\x97\x3b\x59\xb9\xa8\x11\xce\x0a\x85\x8b\x76\x09\x55\xd3\x40\x8d\xf0\xdd\x0e\xac\xe9\x26\x7b\x4e\x0b\x95\x24\x5e\x2c\x26\xbf\x45\xd7\xa6\x04\x87\xf8\x33\xbb\xb6\xc6\xaa\xe7\xf6\x78\xdc\xc4\x1c\x55\x3a\xb3\xaa\xaa\x52\xdc\xab\xd4\x9c\xeb\xd9\x24\x4b\xa3\xcf\xc1\xc7\xe7\x0a\x9c\x4d\xf2\xff\xab\x6b\x7a\x5f\xdd\x0c\x64\xac\x6f\x8a\xfc\x05\xc3\xb7\x2f\x5f\xe1\x05\xe7\x9b\xc8\xe8\xbc\xa8\xa2\x7c\x5c\x50\x88\x5a\xb2\xce\xf3\x27\xd8\x2e\x0d\x2d\x34\xce\xb3\x3c\x59\x65\xf2\xf6\x39\x0c\x89\xe2\x65\xf0\xd2\x59\xaf\x8d\x65\x30\x56\x6e\x04\xcf\x60\x9a\x80\xf8\x81\xd3\x44\x81\x61\x60\xdd\x23\xe8\x38\x6a\x02\x34\x16\x34\xb5\xa3\x8c\x6d\x05\xaf\x1b\xb0\xce\x83\xf1\x50\x3b\xeb\x8d\x1d\x91\xa1\x19\xc9\xdf\x21\xc1\x68\xa7\x89\x13\x13\x6e\xb7\xd0\xe9\x07\x24\x06\x17\x0f\x81\xd1\x7a\xd3\x09\xb0\x71\xa3\xdd\xb3\xfc\x73\x09\x03\xba\xeb\x22\x20\x54\x98\xc8\x4a\xa5\x13\x5c\xee\x52\x0c\xb5\xde\x3a\xd7\x9d\xfa\xb8\x0b\x2d\xfb\xfc\x19\xe6\xff\x87\xa5\xfc\x71\x71\xea\x40\x68\x74\xd0\x78\xb7\x03\x4c\x4d\x5b\x22\x3c\x8d\xb8\x08\x0e\xc2\x5e\x26\x6e\x74\xc7\x53\xdc\x2c\xf6\x82\x72\x40\x6d\x00\xcb\xa8\xfd\x9f\x52\x63\xba\x96\x74\xbc\x33\xc3\x3d\x3c\x95\x2f\xde\xbb\x37\xfe\x2e\x5e\x59\x14\x44\x10\x54\x11\x57\x66\x15\x88\x92\x0e\x73\xb7\x4d\x93\x70\x4b\x35\x88\x56\x68\x27\x25\xe2\xeb\xf7\x0b\x13\x49\x54\xcf\xed\x55\xca\x15\x74\x92\xcf\x0b\x12\x5d\xc1\x4b\xcd\xd3\x67\x4b\x56\x4e\xf3\x96\x56\xd7\x38\x3d\xcd\x40\x02\x36\xe0\x3e\xc8\x17\x52\xe6\xa7\x08\x4e\xfe\x49\x96\x16\xe1\xf8\x2c\xdd\xc5\xf0\xcd\x64\xad\xe9\x12\xcd\xed\x16\xde\xe0\xfd\x7f\x88\xdf\x38\xea\xb5\xdc\xe3\xe1\x7b\xd4\x9a\x8f\x68\xc1\xe3\x27\x5f\x85\xf2\xde\xe0\x7d\x21\xaf\xf3\x57\xff\xf1\x84\xad\x32\x12\xc4\x0a\x95\x7f\x03\x00\x00\xff\xff\x44\xbb\x4d\xea\x7d\x09\x00\x00"

func tmplCustom_errorsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCustom_errorsGoTmpl,
		"tmpl/custom_errors.go.tmpl",
	)
}

func tmplCustom_errorsGoTmpl() (*asset, error) {
	bytes, err := tmplCustom_errorsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/custom_errors.go.tmpl", size: 2429, mode: os.FileMode(0644), modTime: time.Unix(1575536785, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x3, 0x27, 0x1f, 0x16, 0x20, 0xc1, 0x93, 0xf7, 0xc1, 0x4d, 0x90, 0xf4, 0x5a, 0x83, 0xe, 0x4a, 0x55, 0x9f, 0xc1, 0x17, 0xd, 0x1, 0xb0, 0x13, 0x34, 0x30, 0x1, 0xe9, 0x3d, 0x1e, 0x3a}}
	return a, nil
}

var _tmplCustom_responsesGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x31\x4b\xc4\x40\x10\x85\xeb\xdb\x5f\x31\xa4\xba\xeb\xc5\xc2\x4e\x11\x44\x10\x3c\x82\xd8\x88\x90\x31\x4e\xc2\x68\xdc\x5d\x76\x26\x45\x08\xf9\xef\x32\x49\xd6\x48\xe0\xb6\x7c\xdf\xbc\xf7\xf6\x45\xac\xbf\xb1\x25\x48\x24\x31\x78\x21\x71\x4e\x87\x48\x70\x8f\x8a\x25\x09\x88\xa6\xbe\x56\x18\xdd\xe1\xf6\xfc\xf8\x4a\x49\x38\x78\x13\xd9\xb7\x30\xbf\xea\x4b\x82\xbf\x29\x30\xf2\x4a\x8b\xca\x1d\xcc\xbd\x60\x60\xaf\x94\x1a\xac\x69\x9c\xf2\xed\x27\x2a\x16\x95\x9b\xd6\xaa\x72\xad\x4e\xdb\xad\xf5\x65\xf9\x78\x82\x63\x22\xf9\x1f\x74\xfa\xf3\xde\xb1\xc7\x34\x5c\x48\x78\x20\x5d\x78\x8e\x78\x7b\xff\x18\x94\x36\xf7\x19\x5b\xdb\xb1\x6d\x7c\x09\x8a\x1d\x40\xcf\x5e\xaf\xaf\xf2\x77\xd5\x44\x5b\xf5\xdc\x34\x42\xba\xa3\x61\x16\x0d\x3f\xf1\x0f\xeb\xde\xdc\x99\x38\x8f\xfd\x0d\x00\x00\xff\xff\xfa\x7c\xa6\xa5\x6a\x01\x00\x00"

func tmplCustom_responsesGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCustom_responsesGoTmpl,
		"tmpl/custom_responses.go.tmpl",
	)
}

func tmplCustom_responsesGoTmpl() (*asset, error) {
	bytes, err := tmplCustom_responsesGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/custom_responses.go.tmpl", size: 362, mode: os.FileMode(0644), modTime: time.Unix(1597307642, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xac, 0xb1, 0xa5, 0xdf, 0xc9, 0xff, 0xae, 0x14, 0x86, 0x4f, 0xc1, 0xd6, 0x74, 0x76, 0xc0, 0x2, 0xc2, 0xfa, 0xeb, 0x25, 0x60, 0xa5, 0x7f, 0x8e, 0x2d, 0xdc, 0x95, 0x64, 0x58, 0xca, 0xfa}}
	return a, nil
}

var _tmplCustom_responses_decodeGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x0a\x46\xc0\x06\xb2\x50\xe8\x3d\x0e\x09\xfc\xb0\x66\x49\xdb\x0d\x4d\x82\x38\x5d\x1f\x8a\xa2\xe0\xa4\x93\xac\x45\x26\x35\x92\x8e\x13\x18\xfe\xdf\x87\x3b\x52\xb2\xdc\xb9\xcb\x80\x3e\x38\xa0\xc8\xfb\xf1\xdd\x77\xdf\x5d\x7a\x5d\x3e\xe8\x06\xb8\x03\xdf\x5b\xe3\xc1\x33\xd6\xae\x7a\xeb\x02\x17\x2c\xcb\x4b\x6b\x02\x3c\x85\x9c\x65\x39\x98\xd2\x56\xad\x69\x66\x7f\x79\x6b\xf0\xa2\x5e\xd1\x7d\x6b\xf1\xaf\x81\x30\x5b\x86\xd0\xe3\xd9\x07\xd7\x9a\xc6\xe7\x8c\x65\x78\x15\x9c\x36\x9e\x22\xe6\x4d\x1b\x96\xeb\x3f\x55\x69\x57\xb3\xc6\x9e\x3e\xb4\x61\x86\xbf\xd1\x60\x8c\xd0\x58\xdb\x74\xa0\x1a\xdb\x69\xd3\x28\xeb\x9a\x59\xe3\xfa\x72\xe6\x83\x0e\x6b\x8a\x9b\x6f\xb7\xea\xd2\x39\xeb\xfc\x6d\xc4\xbf\xdb\xe5\x4c\x32\x56\x5a\xe3\x09\x39\x01\x37\xe1\xfe\xb9\x07\x1e\xf1\xf0\x39\xcf\x75\xdf\x77\x6d\xa9\x43\x6b\x4d\x2a\x43\x32\x56\xaf\x4d\xc9\x7f\x5b\xdc\x5c\x53\xc0\x5f\xa1\xb4\x15\x38\xe1\xf8\x2b\x44\xa3\xee\x12\x2f\x92\x03\x3e\xf3\xed\x61\xec\xb3\x39\x77\xea\x2d\xe8\x0a\x9c\x7a\x03\x41\xe4\x17\xf1\xf1\x14\x5f\x73\xc9\xb2\xb6\xe6\x27\x89\x10\x85\x6f\xba\x35\x5e\x4c\x22\x14\x47\x50\x49\xcc\x92\x39\x08\x6b\x67\x78\xbd\x0a\xb1\xd4\x5a\xe4\xf0\xd4\x43\x19\xa0\x22\xb8\xbc\xb6\x6e\xa5\x03\x7e\x12\xb4\x82\x37\x36\xf0\x69\x7e\xfe\x83\xcf\x0b\x3e\x49\x26\x59\xb6\x63\xd9\xa3\x76\x7c\xc3\x29\xe6\x47\xa7\xfb\x1e\x1c\xc1\x04\xe7\xb0\x1c\x44\xa0\xae\x61\x33\x12\xa1\x5e\xdb\xea\x59\xaa\xf8\x2d\x7e\xdc\xc8\x73\x32\x3d\x99\x73\xd3\x76\x53\xa4\xe0\x1c\xc5\xdf\x7f\x5a\xe7\x31\x94\xd8\xc4\x0a\x24\xdb\x25\xba\x2f\x51\x4c\x80\x55\x0c\xfc\x8a\x2f\x3c\x89\x8d\x68\x82\xa7\x50\xf0\x0d\x3f\x68\xc1\x47\xd7\x06\x70\xc5\x28\x55\xde\x9a\x00\xae\xd6\x25\x6c\x77\x93\xf6\x6c\x52\x3f\x84\x54\x8b\x7f\x75\xe4\x08\xdd\xe7\xbc\x5c\x6a\xe7\x21\xcc\xd7\xa1\x3e\xfd\x39\x35\x6d\x49\x31\x30\x9d\x7d\xa0\x2e\xa7\xa4\x4a\x1c\x68\x3a\xe5\x02\x27\xcf\xd1\x10\xd9\xa8\xad\xe3\x0f\x05\x7f\xd4\xdd\x1a\x3c\xb9\x6a\xd3\xc0\x18\x30\x79\x78\x11\xbb\x4c\xe6\x5f\x0a\xfe\xb8\xb7\x4c\x9e\xf4\x3a\xad\xe6\x97\xaa\x12\x18\x58\xe2\xc3\x8e\xd1\x6f\x87\x72\xac\x48\x87\xc4\xd5\x82\x46\xe4\xe6\x77\xaa\xc1\x97\x2f\xa1\x8f\xe6\x17\xd8\xe8\x7d\x01\x14\x70\xce\x7d\x39\x79\x16\x51\x3a\x1b\x45\x4d\x48\x90\xd0\x30\xb2\x15\x5d\x0e\x30\x5c\xdb\x44\xfc\x54\x22\xa6\xed\x30\x0e\xf9\xe8\x23\xdc\x0e\xad\x9e\xa0\x49\x9e\x83\x2c\xa3\x72\x9c\xd8\x48\x15\x8f\x42\xbb\x51\x21\x42\xca\x18\xfe\x45\xa7\x21\xe5\x44\x92\xa8\x9f\x23\xba\xac\x39\x3e\x0b\x92\xd7\x1f\xba\x1b\x64\x1d\x05\xcd\x89\x03\x14\xa2\x94\xd1\xee\x88\x8c\x71\x5a\xd2\x84\x1e\x55\x34\x09\x61\x98\xf6\xef\x89\x71\x4c\x0a\xef\x70\x46\x8c\xee\x16\xe0\x1e\xc1\x11\x6a\x96\xd1\x0a\x58\x81\xf7\xb8\xf9\xe3\x76\x4a\x97\xe0\x9c\xe7\x9f\x3e\x4f\x8b\xf4\x2c\x7b\x69\xa6\x0e\x57\x0c\x49\x6f\xe8\x6d\xdc\xd9\xea\xca\xd9\x15\x45\x43\x22\xe5\x39\x3f\x49\xdd\xcd\x66\x33\xfe\xf6\xfe\xfe\x16\x8f\x7e\xd3\x86\x72\xc9\x47\xa6\xcf\xe6\x78\x56\x22\x60\xd8\x68\x5d\x6a\x0f\x07\x1d\x38\xa3\x21\x49\x8a\xad\xc7\x2e\x49\x46\xf7\x71\xab\xd1\x8d\x7a\xef\x1b\x21\x71\x6b\xe5\x79\x1a\xad\x2c\x31\x50\xc4\xaa\xe7\x5f\xd9\x16\xfb\xef\xc8\x83\xa0\xc1\xa3\xc9\xcb\x2a\xa8\xf5\xba\x0b\x31\xfd\x1e\x78\x8a\x4c\x30\x5b\x8b\x7e\x1f\xcc\xb0\xb4\x2f\x6f\xae\x0a\xba\xbc\xb9\x8a\x6e\x03\xec\x49\xb7\x5e\xeb\xea\x0e\xfe\x5e\x83\x0f\x64\x71\x90\x65\x92\xe6\x80\x93\x94\xee\x15\x89\x7d\xf1\x6c\x82\x7e\xba\x8c\x4a\x89\x57\x1f\xcc\x4a\x3b\xbf\xd4\x1d\xb6\x67\x42\xda\xff\xc8\x1f\x6b\xa5\x89\xca\xb2\x6c\xca\xd2\x57\x1d\x8d\x0c\xd1\xf8\xed\x79\x8d\xb6\xfe\xd3\x4f\x9f\xd5\xfb\x78\x33\x2e\x2e\x0e\x9d\x87\x51\x00\x6f\xee\x6e\x2f\xd8\x1e\x0f\xea\x21\xc2\xc1\x1c\xb4\x7d\xf0\x7f\x67\x05\x29\xfe\xb7\x70\xf8\x21\x4d\xb2\xfb\x2f\x18\x54\xd2\xd1\x6d\x96\x7d\x7b\x69\x50\x9a\x3b\xf0\xdb\xe1\xf0\x2e\xc0\x6a\x8b\x4f\x05\x3f\xd0\xd2\x6e\x47\x7b\x68\xc7\xfe\x09\x00\x00\xff\xff\xa7\x5b\x2f\x2f\x5e\x09\x00\x00"

func tmplCustom_responses_decodeGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCustom_responses_decodeGoTmpl,
		"tmpl/custom_responses_decode.go.tmpl",
	)
}

func tmplCustom_responses_decodeGoTmpl() (*asset, error) {
	bytes, err := tmplCustom_responses_decodeGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/custom_responses_decode.go.tmpl", size: 2398, mode: os.FileMode(0644), modTime: time.Unix(1597307749, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0x27, 0x98, 0xe7, 0xa4, 0xde, 0x28, 0x52, 0xa3, 0x5, 0x26, 0x2, 0xca, 0x1f, 0xfb, 0xde, 0x7d, 0x5c, 0x78, 0x9b, 0x46, 0xf8, 0x32, 0x3f, 0xcf, 0xc7, 0xc4, 0xb9, 0x4f, 0xf3, 0x72, 0x4a}}
	return a, nil
}

var _tmplCustom_responses_errorGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbf\x0e\x82\x30\x10\xc6\x67\xee\x29\xbe\x74\xd2\xc5\x07\x70\x35\x0e\x0e\x26\xc6\xc5\xc1\x98\x40\xe0\x42\xd0\xd0\x36\x77\xe7\x60\x08\xef\x6e\x0a\x0c\x20\x76\xeb\xf7\xa7\xfd\x7d\xb1\x28\x5f\x45\xcd\x10\xd6\x18\xbc\xb2\x12\x35\x6d\x0c\x62\xd8\x50\xe6\xba\x6e\x77\x14\x09\xa2\x97\x31\xd6\xf7\x8e\xb6\x44\xf6\x89\x8c\xc1\xb8\x49\x11\x23\x0b\xd4\xe4\x5d\x1a\x3a\xca\x06\x39\xdd\x1b\x5f\x23\x7f\x6a\xf0\x7b\xc7\x49\x73\x39\xf5\xf3\xea\x95\xf5\x64\xdc\xce\xaa\x87\x50\x31\x00\x34\xde\x30\x3f\xd3\x2b\x65\xa8\xd8\xe5\x94\x9d\x59\x35\x21\x4f\x7f\xfc\xc6\xda\xd1\x4e\xc9\x91\x1d\xb8\x3f\x06\x02\x9d\xc6\x2c\xb0\xf4\x0f\xd7\x6a\xce\x02\x78\x35\xea\x1b\x00\x00\xff\xff\xba\x07\x22\x86\x44\x01\x00\x00"

func tmplCustom_responses_errorGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCustom_responses_errorGoTmpl,
		"tmpl/custom_responses_error.go.tmpl",
	)
}

func tmplCustom_responses_errorGoTmpl() (*asset, error) {
	bytes, err := tmplCustom_responses_errorGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/custom_responses_error.go.tmpl", size: 324, mode: os.FileMode(0644), modTime: time.Unix(1597307749, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xe5, 0x8e, 0x3c, 0xd8, 0x4a, 0x3e, 0xc4, 0x3d, 0xa2, 0x1a, 0x7f, 0x0, 0xe0, 0x52, 0x97, 0x54, 0x3a, 0xce, 0xd9, 0xa6, 0x83, 0xd4, 0x40, 0xf1, 0x13, 0xca, 0x66, 0xed, 0x6f, 0x93, 0xc6}}
	return a, nil
}

var _tmplCustom_responses_httpstatusGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4f\x4f\xdb\x4c\x10\xc6\xcf\xd9\x4f\xb1\xca\x09\x2e\xf6\x9d\x1b\x6f\x48\xde\x22\x5a\x12\x85\xf0\x01\x26\xbb\xc3\x66\xc5\x7a\xc6\x9d\x9d\x0d\x50\xc4\x77\xaf\x8c\xa1\xc5\xc8\x96\xda\xde\xf2\xe7\xf9\xcd\xfc\x34\x7e\xdc\x82\xbb\x87\x80\x56\x30\xb7\x4c\x19\xb3\x31\xb1\x69\x59\xd4\x9e\x98\xd9\x9c\x50\xeb\x83\x6a\x3b\x37\x66\x36\x0f\xcc\x21\x61\x15\x38\x01\x85\x8a\x25\xd4\x41\x5a\x57\x3b\xf6\x98\xe7\xe6\xd4\x98\xba\xb6\x5f\x76\xbb\xcd\x8d\x82\x96\xbc\x12\x6e\x16\xec\xd1\x3a\xa6\x23\x8a\x66\x0b\x36\x6c\x37\x0b\x8b\x22\x2c\xb6\xa3\x6c\x24\x65\xab\x87\x2e\x23\xbd\x80\x8f\x14\x5e\x87\xfc\x12\xb2\xf9\x75\x5c\xd5\x4d\xbf\x41\x3c\xb3\x9d\x4f\x3e\xab\xeb\x10\xf5\x50\xf6\x95\xe3\xa6\xee\xcd\xa0\x8d\xf9\xe3\xc7\x7d\xe2\x7d\xdd\x40\x56\x94\xb7\x9f\xeb\x77\xdf\xaa\x15\x56\x36\x77\x85\xdc\x88\xf2\x89\xeb\xbd\x3d\xe6\xaa\xfb\x7e\xda\x89\xda\x67\x33\xcb\x0f\x51\xdd\xa1\x77\x7f\x36\x33\x07\xf9\x3d\xb6\xbe\x3a\x33\xb3\x99\xa0\x16\xa1\x57\xc3\xaa\x1f\xb9\xbe\x1a\xc4\x16\x40\x0e\x13\xfa\xf1\xf0\x16\xbf\x17\xcc\xba\x8b\x0d\x72\xd1\x01\x78\x4b\xf7\xc4\x0f\x34\xce\x5d\x92\xa2\x10\xa4\x1b\x94\x23\xca\xb2\xbb\xef\x00\xbe\xa4\x23\xa4\xe8\xcf\x25\x94\x06\x49\xc7\x87\xfc\x07\xfe\x6d\xff\x80\xbd\x40\xf0\x29\x12\x2e\x1f\x1d\xa2\x9f\x32\xff\x1f\x14\x1f\xe0\x69\xcc\xfc\x9a\x75\xc5\x85\x26\xc0\xf7\x7f\x07\xc8\x79\x12\x04\xff\xb4\x7c\x8c\x59\xf3\x38\xb7\x60\xba\x4b\xd1\x0d\x57\x6d\x50\x9a\x98\x73\x64\xba\x40\x8a\x53\xae\x2b\x96\x7d\xf4\x1e\xe9\xd3\x81\xa1\xe8\x01\x49\xa3\x03\x9d\x42\xfb\x10\x4b\xfc\x81\x43\xe3\x2d\x66\x2e\xe2\x70\xf9\x78\x80\x92\x27\xf9\x1d\xf3\x37\xa0\xa7\xb7\x3b\xe7\xc1\x88\x15\xc4\x84\x7e\x23\xe8\xba\xb7\x40\x23\x4f\x3c\xec\x8f\x89\x9e\x19\xde\x6e\xcf\x32\xb9\x7f\xf4\x6a\xeb\xa2\xeb\xbb\x2d\x50\xc0\xbf\x2a\xc6\x2d\xc5\xa6\x4d\xd8\x15\x6a\x6a\xdd\x35\xeb\xe5\xef\xcc\xa7\x4a\xf6\x95\xfd\xb7\x42\xdf\x12\x1c\x21\x26\xd8\xa7\x09\xe7\x0e\x8c\x0e\x3f\xe4\x86\xa5\x06\x85\xaf\x9c\x27\xba\x35\xba\xfd\xc5\x98\x3f\x8c\xbe\x98\x9f\x01\x00\x00\xff\xff\x99\x26\x71\xce\x54\x05\x00\x00"

func tmplCustom_responses_httpstatusGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplCustom_responses_httpstatusGoTmpl,
		"tmpl/custom_responses_httpstatus.go.tmpl",
	)
}

func tmplCustom_responses_httpstatusGoTmpl() (*asset, error) {
	bytes, err := tmplCustom_responses_httpstatusGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/custom_responses_httpstatus.go.tmpl", size: 1364, mode: os.FileMode(0644), modTime: time.Unix(1597307619, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x5c, 0x6e, 0x4a, 0x42, 0x3b, 0xca, 0xb1, 0x12, 0x32, 0x26, 0x17, 0xc1, 0x4d, 0xc9, 0xf2, 0x8a, 0xde, 0x55, 0xa3, 0xee, 0xd6, 0x6a, 0x4e, 0xb5, 0x3d, 0xb, 0xc9, 0xf7, 0xb8, 0xf, 0xf2}}
	return a, nil
}

var _tmplFileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6a\xb4\x40\x10\xc4\xef\x3e\x45\x33\x78\xf8\x3e\x08\x92\x73\x20\x87\xb0\xa7\x3d\x24\x04\x12\x72\x5d\x1a\xb7\x35\x43\xb4\x35\x63\xaf\xb0\x34\xf3\xee\x61\xfc\xc7\xb8\x51\xc8\x4d\xbb\xaa\x7f\x55\x34\xa3\x6a\x0b\x60\x82\xec\xd0\xd4\x35\xb1\x80\x31\xde\xab\xce\xbf\xde\x27\xaa\xc4\x67\xef\x93\xa4\xc5\xfc\x0b\x4b\x02\xd5\xec\x75\xfc\x0c\xd3\x01\x50\x0a\xfc\xab\x88\x21\x3b\xd6\x6d\xe3\xa4\xfb\x0f\xf7\xc3\xa6\x50\xdd\x56\x28\x04\xc6\x8e\x82\x59\x2c\x31\x79\xcd\x38\x34\xdc\x09\xf2\x16\x25\x9f\x25\x13\xd9\xf6\x49\x1f\xe8\x36\x20\x3d\xba\xb0\x1f\xc4\xfd\xd5\xa7\xca\x62\xf7\x7e\x6d\xe9\xf7\x3e\x06\xe9\x24\xd7\x96\x4c\xe4\xdb\x47\x1d\x59\xc8\x15\x98\xd3\xd2\xc5\x21\x97\x04\xa9\xbd\x4b\x7b\x78\x78\x8c\x1d\xe1\xf6\xd1\xd1\xe6\xb9\x81\xb4\x8f\x02\x76\x82\xde\xc4\x5d\x72\xd9\x4d\x99\xe4\x75\x44\x37\x0c\xff\xc6\x7f\x26\xf9\x6c\xce\x37\xfc\x28\x60\xd2\x07\xd1\x16\x40\xdf\x90\xf6\x53\x6a\xf6\x82\x35\x0d\x6f\x6b\x75\xca\xe2\xc2\xf9\x98\xad\x4a\x55\x47\x37\xf2\x58\xee\x14\x5c\x62\x1b\xde\x6e\xb9\x94\xfd\x09\x00\x00\xff\xff\x0d\x88\xed\x2a\xcb\x02\x00\x00"

func tmplFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFileTmpl,
		"tmpl/file.tmpl",
	)
}

func tmplFileTmpl() (*asset, error) {
	bytes, err := tmplFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/file.tmpl", size: 715, mode: os.FileMode(0644), modTime: time.Unix(1562043715, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x9c, 0x84, 0x48, 0xdc, 0xd5, 0x5c, 0xc9, 0xb7, 0x99, 0xde, 0x6e, 0xd3, 0xc8, 0xba, 0x85, 0x4d, 0xf0, 0x1b, 0x4d, 0x81, 0xd, 0x33, 0x91, 0xf1, 0xc1, 0xec, 0x35, 0x5, 0x8d, 0xb0, 0x87}}
	return a, nil
}

var _tmplGkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xcd\x6e\xc2\x30\x10\x84\xef\x3c\x85\x95\x73\xc5\x03\x70\x45\xea\xb1\x97\xd0\x73\x58\xe2\x05\x22\x62\x7b\xbb\xde\xb4\xaa\xa2\xbc\x7b\x15\xf2\xe3\x98\xa4\x52\xa1\x52\x7b\x64\x77\xf2\xcd\x78\xd8\x7a\xa5\x54\xe2\x91\xdf\x8b\x1c\x93\x8d\x6a\x7f\x2a\x95\x10\xc8\x39\xd9\xa8\xa4\xb0\x82\x6c\xa1\xac\xeb\x63\x51\x62\x8a\x04\x0c\xe2\xb8\x69\x80\x68\x36\xab\xeb\x7d\x5d\x8b\x4b\x2d\x5c\x70\x0b\x1e\xd5\x3a\xed\xb8\x2f\x60\xb0\x69\xf6\xad\xe2\xe6\x93\xc1\xf8\xa9\xb3\x6d\xb7\x99\x05\xd3\x26\x19\x42\xad\x4f\x6e\x58\x5f\xd3\x1c\x21\x0f\x9a\xde\xf2\x95\x08\xf9\xb9\x60\x2f\x5b\x30\x58\x2e\x9b\xa7\xb1\x97\x17\xae\x72\x09\x6e\x52\x1d\x7a\xda\x0f\x18\x2b\xa5\x9a\x96\x93\x98\x42\xeb\x12\x3f\x80\x27\xe5\x0d\xc8\xb0\x6b\xdf\x30\x7e\x82\x56\x93\x2b\xac\xf8\xbf\xaf\x3b\x58\x2f\x15\x3e\x6e\x27\x95\x33\xbe\x55\xe8\xc5\x67\x91\x72\x98\x46\x42\x4f\xce\x7a\x9c\x29\xfb\x71\x54\x81\x30\x58\x4f\x8e\xff\xa3\x83\x89\xf7\x52\x09\x57\xe2\x7a\x37\x88\x76\x9f\xd4\x71\xa2\xfc\x74\x98\xe7\xa6\xc3\x03\xe9\x02\x32\x37\x7a\xce\xcc\x8d\x7e\x04\xba\xf4\x2e\x03\x85\x8d\xde\x90\x57\x5e\x9c\xc9\x90\xd9\xf1\x3d\x7f\x03\x5d\x4e\xf3\xbb\xea\x20\x8b\x47\x75\x5d\x2d\x39\x8f\xa7\xf1\x4b\xf3\xc0\xb9\xe3\x14\x7b\x69\x97\x2e\xfb\x26\x71\x2f\xd2\x98\x3b\x8d\xb1\xa8\x9b\x4d\x44\x67\x11\xf2\x02\x52\xdd\xd0\xc2\x3c\xea\x40\xe3\x11\xaa\x52\xb2\xf1\x1a\x07\x6d\xb2\x6a\xbe\x02\x00\x00\xff\xff\xd9\x90\xca\x51\x93\x05\x00\x00"

func tmplGkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl,
		"tmpl/gk.json.tmpl",
	)
}

func tmplGkJsonTmpl() (*asset, error) {
	bytes, err := tmplGkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json.tmpl", size: 1427, mode: os.FileMode(0644), modTime: time.Unix(1597116073, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x85, 0x5, 0x7, 0xe4, 0xf8, 0x51, 0x99, 0x7, 0xf7, 0x69, 0x17, 0xfa, 0x74, 0xc2, 0x60, 0x6, 0x16, 0xd6, 0x58, 0x88, 0x9, 0x8a, 0x2a, 0x46, 0x5f, 0xa, 0x30, 0xba, 0x7c, 0xe1, 0x99}}
	return a, nil
}

var _tmplPartialsAlias_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\x01\x0b\x66\xa6\x29\xe4\xa5\x2a\xa8\x94\xe9\x39\xe7\xe7\xe6\xa6\xe6\x95\x28\x28\x29\xd5\xd6\x56\x57\x23\x04\x40\xbc\xd4\xbc\x94\xda\x5a\xae\x92\xca\x82\x54\x05\xb0\x94\x5f\x62\x6e\x6a\x6d\x2d\x84\x1d\x52\x59\x90\x0a\x36\x09\xa2\x08\x4a\x03\x02\x00\x00\xff\xff\x50\x74\x8a\x9b\x82\x00\x00\x00"

func tmplPartialsAlias_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsAlias_typeTmpl,
		"tmpl/partials/alias_type.tmpl",
	)
}

func tmplPartialsAlias_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsAlias_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/alias_type.tmpl", size: 130, mode: os.FileMode(0644), modTime: time.Unix(1562050070, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x95, 0xa7, 0xfc, 0xfb, 0x1c, 0xcc, 0xe4, 0xbf, 0x86, 0x2d, 0x79, 0x6f, 0xc3, 0x56, 0x7c, 0x78, 0x5, 0xa0, 0xdf, 0x2c, 0xb8, 0x5e, 0x8b, 0x3c, 0x94, 0xfd, 0x42, 0x4c, 0x4e, 0xa1, 0x14}}
	return a, nil
}

var _tmplPartialsConstantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x4d\xce\xcf\x2b\x2e\x51\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\xb8\x34\xa1\x0c\x40\x00\x00\x00\xff\xff\x13\xc6\xee\xf4\x7e\x00\x00\x00"

func tmplPartialsConstantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsConstantsTmpl,
		"tmpl/partials/constants.tmpl",
	)
}

func tmplPartialsConstantsTmpl() (*asset, error) {
	bytes, err := tmplPartialsConstantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/constants.tmpl", size: 126, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0xd7, 0x82, 0x8f, 0xff, 0x61, 0xd3, 0xbc, 0x2c, 0xec, 0xc7, 0xe4, 0x1, 0xed, 0x0, 0x11, 0x36, 0xe4, 0xc5, 0xc0, 0x4e, 0x7c, 0x52, 0x17, 0xfa, 0x7b, 0xa8, 0x5c, 0xba, 0x7f, 0x83, 0x10}}
	return a, nil
}

var _tmplPartialsEndpoint_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xcf\x6a\xf3\x30\x10\xc4\xef\xdf\x53\xcc\x17\x7c\xb0\xc1\x98\x9e\x53\x72\x0a\xf4\xd8\x43\xa1\xbd\x16\xe1\xac\x83\x40\x95\xd3\x95\x6c\x02\xcb\xbe\x7b\x91\xff\x04\x3b\xa6\x04\xea\x8b\xd1\xb2\x9a\xf9\xcd\xe8\x1f\x00\x30\xc5\x8e\x3d\x9a\xce\xd7\x79\x1d\xaf\xa8\x5b\x1f\xe9\x1a\xab\xe3\xf8\x2f\x01\x11\xdb\xe0\x1c\x91\x3b\xf2\xa8\xde\xe8\xbb\xa3\x10\xab\x0f\xc3\xa1\xc0\x93\x2a\x8f\x03\x11\x72\x81\x54\x3f\x45\xc8\x9f\x54\x61\x7d\x24\x6e\x4c\x4d\xa2\x05\xf2\xc5\xa9\x04\x31\xb7\x5c\x40\x06\x80\xf9\x7b\x6c\x83\xfd\x01\x93\x5b\x95\x8b\xdc\x76\x5e\xcd\x17\xa9\x16\x2b\x35\xdb\x24\x97\xe9\x46\xd5\x1b\x67\x4f\x26\x52\x5e\x3c\x0f\xe3\xff\x07\x78\xeb\xee\x00\x16\x6d\x0c\xe2\xe1\xd2\xfa\x40\x93\xfa\x84\xbd\xba\xa0\x77\xfc\x43\x6e\x11\x36\xfe\x4c\xc8\x6c\x99\xf5\xc9\xbf\x3a\x1a\xe7\xac\x3f\x27\xc5\xce\xc5\x90\x56\xb2\x7e\x96\x4d\xa1\x7d\x9b\x52\x9b\x10\x91\x59\x64\xf7\xfb\x85\x6a\x79\xd3\x1e\xab\xdd\x1f\x10\xfa\xba\x12\xb9\xed\x8e\x6a\xe9\x01\xcb\x2d\xc0\xb2\x4b\xd5\xa1\x90\x07\x08\xab\xf6\x37\xfe\xeb\xa6\x7f\xaf\x0c\x1b\x94\x4d\xb8\xd9\x9e\x30\xf1\x60\x47\xcc\x3b\xa4\x79\x6c\xdf\x2f\x17\xe2\x17\xcb\x09\x6b\xc6\xdd\xaf\xd0\x27\xac\xbf\x94\xb8\x78\x50\xfd\x09\x00\x00\xff\xff\xc7\x6f\x07\x95\x0a\x03\x00\x00"

func tmplPartialsEndpoint_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_funcTmpl,
		"tmpl/partials/endpoint_func.tmpl",
	)
}

func tmplPartialsEndpoint_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_func.tmpl", size: 778, mode: os.FileMode(0644), modTime: time.Unix(1563264992, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xe7, 0x36, 0xd0, 0x1c, 0x23, 0x53, 0x2e, 0x9a, 0xb9, 0x56, 0x7a, 0x26, 0xd4, 0xf6, 0x3f, 0x88, 0x43, 0xda, 0x57, 0x51, 0xf1, 0x54, 0x9c, 0x47, 0x39, 0x27, 0x40, 0xfb, 0x9c, 0xc, 0xc3}}
	return a, nil
}

var _tmplPartialsEndpoint_method_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xd6\x53\xcc\x1f\x74\xb0\xc1\x08\xfe\x6b\x20\xa7\x92\x1e\x4b\x09\xb4\x77\x51\x6f\x82\x40\x59\xbb\x2b\x25\x04\x16\xbd\x7b\x91\x6b\xe7\x50\x7c\x92\x90\x76\x67\xe6\x1b\x03\x00\x42\x69\xea\x41\x22\xd8\x1f\x40\x4e\xd5\xbd\xf8\x18\x03\x5f\xdc\x9b\xbf\x52\x29\x47\x1e\xa6\x31\x70\x6e\xbf\xf2\xa3\x87\xaa\x3b\xd1\xf7\x8d\x52\x5e\xbe\x15\xaa\xe2\xf9\x42\xb0\xa1\xb7\xf7\x2a\x62\x9f\x23\x9f\x5e\x52\x29\xaa\x79\xfc\x98\x26\x92\xd7\x20\x29\xc3\xde\x97\xd5\xbd\x2a\xda\xc0\x03\x3d\x60\x9f\xa6\xef\x5e\xfc\x95\x32\x49\x42\xeb\x87\x01\x36\xe0\x7f\xd7\xcd\x1b\xa8\x52\xe1\x0c\x1e\x33\xda\xe8\xab\x54\xf8\x63\xd6\x95\xd2\xab\x12\x0f\x75\x74\x3e\x50\x3a\xd3\x84\xf3\x0c\xf8\xef\x00\x0e\x11\x6a\x9a\x46\x28\xdf\x84\x4d\x53\x4c\x53\x0b\x18\x39\x51\x8d\x5e\xef\xae\x9d\x21\x7f\x1f\x97\xa8\x9d\x59\x36\xb6\x69\x97\xd9\x15\xb7\x66\xa4\x95\x13\xbb\xa3\xc8\x0e\xa5\xac\x3e\x4e\xf5\x59\xc1\x16\xcf\xda\xc4\x89\xd2\x2d\xe6\x0d\xa4\x95\x8c\x43\xfc\x09\x00\x00\xff\xff\x4d\x42\xc2\x08\xc2\x01\x00\x00"

func tmplPartialsEndpoint_method_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_method_funcTmpl,
		"tmpl/partials/endpoint_method_func.tmpl",
	)
}

func tmplPartialsEndpoint_method_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_method_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_method_func.tmpl", size: 450, mode: os.FileMode(0644), modTime: time.Unix(1563332658, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x88, 0x83, 0x3b, 0xe, 0x5c, 0xae, 0x9f, 0xd3, 0x71, 0xe5, 0x8b, 0xe6, 0x4a, 0xfe, 0x57, 0x5, 0x4f, 0x99, 0x97, 0xa8, 0x9c, 0x53, 0xa, 0xd4, 0x5b, 0xac, 0x23, 0x5a, 0x6a, 0x5, 0x34}}
	return a, nil
}

var _tmplPartialsEndpoint_responseTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\x4a\xc0\x30\x10\x44\x7f\x65\x29\x39\x28\x94\x7c\x40\xc1\x83\xa0\x07\x2f\x5a\x8a\x78\x0f\x3a\x95\x85\x36\xa9\xbb\x69\xa0\x2c\xf9\x77\x69\x8d\x20\xb8\x97\x81\x79\x03\x6f\xa9\x9d\x20\xef\x12\x49\xa0\x5b\x8a\x0a\xf5\x0f\x21\x87\x09\x6a\xf7\xe3\xd3\x1b\x44\x39\xc5\x81\x14\x52\xf8\x1d\xbe\x15\x66\x3c\x13\xbe\xc8\xb3\xbe\xc4\xe5\x78\x14\x99\xa0\x94\x65\x47\xad\x66\x58\xf4\x4a\x09\xf1\x13\xe4\xb8\x77\x85\x86\x3b\x72\x7e\x6a\x8e\x13\xf2\x4c\x11\xe4\x8a\x7f\x3d\x36\x50\x07\x91\x24\x5d\xad\x3d\xfd\xa0\x94\xe9\x86\x75\x14\x5e\x39\x73\xc1\x39\xd2\xdf\xf5\x6d\xad\xe7\x8f\x03\x89\x37\x73\xc5\x3f\x87\xf5\x8f\xb7\x21\x33\xc4\x8f\xab\xfd\x1f\xf5\x3b\x00\x00\xff\xff\xf4\x3a\x9a\xd8\xfc\x00\x00\x00"

func tmplPartialsEndpoint_responseTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_responseTmpl,
		"tmpl/partials/endpoint_response.tmpl",
	)
}

func tmplPartialsEndpoint_responseTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_responseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_response.tmpl", size: 252, mode: os.FileMode(0644), modTime: time.Unix(1591238372, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0xd2, 0x73, 0x44, 0x36, 0xca, 0xb5, 0xe1, 0xf9, 0x8c, 0x31, 0x15, 0xa9, 0xe1, 0xdd, 0x4, 0xf2, 0xe1, 0xbd, 0x3d, 0xad, 0xe8, 0xa7, 0xc7, 0xb7, 0x53, 0x27, 0x4f, 0x8f, 0x66, 0x5d, 0x99}}
	return a, nil
}

var _tmplPartialsFuncTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x39\xc5\xa0\x55\xb2\x31\xff\x0c\xbf\x37\xe8\x05\x42\x48\x94\x12\x70\x94\xd6\x96\x17\x45\xe8\xee\xc5\x4e\x5b\xe8\x6e\x46\x1a\xde\x8c\xd9\xb6\x42\x18\xe1\x72\xec\x3b\x8b\x82\xc8\xdd\xec\x63\xab\x66\x59\xdc\xd7\x22\x33\xcc\x94\xf7\x7b\x9c\x94\x41\x9b\x28\xa7\x75\x9a\x79\xac\x2f\x42\x70\x87\xe1\xc4\x1d\x8a\x9e\x1f\x08\xff\xc7\xf2\x04\xd1\xd0\x88\xd5\x34\x5c\xcc\xec\xde\xb5\xe4\x4d\xd1\x47\x16\x84\x2b\xe7\x12\x35\x0f\xf8\x73\x4f\xac\x25\xc9\x4f\x59\xad\x18\xcf\x3b\x7d\xc3\x0d\xd2\xc6\x01\x6f\xd1\xf9\x2b\x00\x00\xff\xff\x07\xa4\xf4\xd5\xd0\x00\x00\x00"

func tmplPartialsFuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFuncTmpl,
		"tmpl/partials/func.tmpl",
	)
}

func tmplPartialsFuncTmpl() (*asset, error) {
	bytes, err := tmplPartialsFuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func.tmpl", size: 208, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x28, 0xa, 0xa3, 0x33, 0x32, 0x89, 0x9d, 0xcf, 0x42, 0xa9, 0xb, 0x28, 0x28, 0xa4, 0x1f, 0x20, 0x8a, 0x1, 0x72, 0x2a, 0x7f, 0x57, 0x2d, 0x59, 0xda, 0x52, 0x39, 0x56, 0x1, 0x9b, 0xab}}
	return a, nil
}

var _tmplPartialsFunc_parametersTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x25\x0a\x1a\x39\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\x05\x08\x00\x00\xff\xff\x15\x5b\x78\xe8\x50\x00\x00\x00"

func tmplPartialsFunc_parametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_parametersTmpl,
		"tmpl/partials/func_parameters.tmpl",
	)
}

func tmplPartialsFunc_parametersTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_parametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_parameters.tmpl", size: 80, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0x34, 0xe8, 0xaf, 0xdf, 0x40, 0x15, 0xfd, 0xe2, 0x21, 0xe6, 0x9b, 0xbf, 0x3f, 0xb8, 0xed, 0x1c, 0xa8, 0x27, 0x1d, 0xe7, 0x5d, 0xd3, 0x55, 0x95, 0xc4, 0x85, 0x36, 0x35, 0x6a, 0xc2, 0x24}}
	return a, nil
}

var _tmplPartialsFunc_resultsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xd5\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x20\xfd\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\xa5\x09\xa5\x01\x01\x00\x00\xff\xff\xcc\x6e\x26\x22\x6c\x00\x00\x00"

func tmplPartialsFunc_resultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_resultsTmpl,
		"tmpl/partials/func_results.tmpl",
	)
}

func tmplPartialsFunc_resultsTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_resultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_results.tmpl", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0x9e, 0x52, 0xb8, 0x4b, 0x5, 0xb4, 0x2, 0x5c, 0xc6, 0xe9, 0x60, 0xa8, 0xca, 0xe9, 0x8f, 0x36, 0x63, 0x8f, 0x30, 0x6f, 0x4, 0x4a, 0x5a, 0xca, 0x31, 0x44, 0x13, 0x4e, 0xd6, 0xc2, 0xa}}
	return a, nil
}

var _tmplPartialsFunc_returnTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\x05\x31\x33\xd3\x14\xf2\xf2\x4b\x14\x34\x72\x12\x8b\x4b\x14\x54\x32\x15\x54\x34\x6b\x6b\x75\xaa\xab\x53\xf3\x52\x40\xb2\x60\x0a\x10\x00\x00\xff\xff\xbc\x66\xba\xd5\x44\x00\x00\x00"

func tmplPartialsFunc_returnTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_returnTmpl,
		"tmpl/partials/func_return.tmpl",
	)
}

func tmplPartialsFunc_returnTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_returnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_return.tmpl", size: 68, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0xaf, 0xd0, 0xc0, 0xf6, 0xdf, 0xa3, 0x56, 0x85, 0xcb, 0xef, 0x89, 0xb8, 0xf4, 0xfa, 0x49, 0xfb, 0xd8, 0xb0, 0xd1, 0x33, 0xa8, 0x61, 0xbd, 0x1, 0xf7, 0xe4, 0xb8, 0x32, 0x62, 0x77, 0x76}}
	return a, nil
}

var _tmplPartialsImportsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x50\xa9\xad\xcd\xcc\x2d\xc8\x2f\x2a\xd1\xe0\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x05\xc9\x81\xd5\xe4\xe5\x97\x28\x68\xa4\x16\x2a\xa8\x94\xe9\xf9\x25\xe6\xa6\x2a\x28\x29\x69\x82\x64\xa0\xdc\xda\x5a\x85\xea\xea\xd4\xbc\x14\xa8\x50\x48\x65\x41\x6a\x6d\x2d\x17\x54\x88\x4b\x13\xca\x00\x04\x00\x00\xff\xff\x34\xce\x15\xc7\x6d\x00\x00\x00"

func tmplPartialsImportsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsImportsTmpl,
		"tmpl/partials/imports.tmpl",
	)
}

func tmplPartialsImportsTmpl() (*asset, error) {
	bytes, err := tmplPartialsImportsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/imports.tmpl", size: 109, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x95, 0xaa, 0x53, 0x40, 0x66, 0x8e, 0x62, 0xf, 0x76, 0xff, 0xa7, 0x68, 0xe7, 0x23, 0x5b, 0x13, 0x2e, 0x5e, 0x96, 0x2a, 0x1d, 0x55, 0x9d, 0xd8, 0xe9, 0x89, 0xe7, 0xfb, 0x25, 0xb5, 0x1b}}
	return a, nil
}

var _tmplPartialsInterfaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x41\xca\xc2\x40\x14\x83\xf7\x3d\xc5\x63\x98\xe5\x4f\x0f\xf0\x83\x2b\xd7\x7a\x05\x19\xda\x8c\x0e\x38\xaf\xa5\x3e\x07\x24\xbc\xbb\x4b\x51\x2b\xb8\x4b\x42\xf2\x85\x2c\x59\x14\xd2\xef\xa7\x5a\xa1\x26\x21\xb8\x93\x1f\xbb\x6a\xe8\xe8\x6e\x8f\x19\x42\xf6\xc7\x54\xe1\x2e\x45\x0d\x4b\x4e\x03\x84\x1d\xb9\x24\x3d\x43\x62\xf9\x8b\x4d\xfe\x77\xd2\x1f\x60\x97\x69\xbc\xad\xe3\x17\x3d\xb6\x1f\xfe\x37\xd8\x1e\x48\x43\x9d\xaf\xc9\x20\x61\xc3\x9f\xf2\x5d\x87\x20\xb1\xb9\x77\xef\x5e\xe7\xcf\x00\x00\x00\xff\xff\xb4\xca\x7d\xe5\xb4\x00\x00\x00"

func tmplPartialsInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterfaceTmpl,
		"tmpl/partials/interface.tmpl",
	)
}

func tmplPartialsInterfaceTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface.tmpl", size: 180, mode: os.FileMode(0644), modTime: time.Unix(1572973369, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xeb, 0xf, 0x24, 0xbd, 0xf5, 0x27, 0xb6, 0xc3, 0x91, 0x3f, 0xe9, 0x18, 0xb9, 0x41, 0x70, 0xd3, 0x1e, 0x37, 0xf3, 0x74, 0x69, 0x7e, 0x7d, 0xfd, 0x8b, 0xa, 0x86, 0x78, 0x5a, 0xa7, 0xd2}}
	return a, nil
}

var _tmplPartialsInterface_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x2b\xcd\x4b\x8e\x2f\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\x52\xd0\x0b\x80\x73\x6a\x6b\x35\x31\x94\x16\xa5\x16\x97\xe6\x94\x80\xd4\x05\x41\x58\xb5\xb5\x80\x00\x00\x00\xff\xff\xc1\x2e\xd4\xb5\x59\x00\x00\x00"

func tmplPartialsInterface_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_funcTmpl,
		"tmpl/partials/interface_func.tmpl",
	)
}

func tmplPartialsInterface_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_func.tmpl", size: 89, mode: os.FileMode(0644), modTime: time.Unix(1572930878, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xfa, 0xf3, 0xc3, 0x81, 0xc1, 0x4d, 0xc, 0xf2, 0x59, 0x73, 0xbd, 0xc4, 0x83, 0x3, 0x64, 0x96, 0x4f, 0x1f, 0xfc, 0x89, 0x66, 0xe5, 0xb0, 0x74, 0xd5, 0xec, 0xd3, 0x61, 0xe9, 0x44, 0x40}}
	return a, nil
}

var _tmplPartialsInterface_stubTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x2e\x29\x2a\x4d\x2e\x51\x52\xd0\xab\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\xd4\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x45\xd5\x54\x9a\x14\x9f\x56\x9a\x97\x5c\x92\x99\x9f\xa7\xa4\xa0\x52\x56\x5b\xcb\xc5\x55\x5d\x9d\x9a\x97\x52\x5b\x0b\x08\x00\x00\xff\xff\x39\x10\x5c\x96\x5d\x00\x00\x00"

func tmplPartialsInterface_stubTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_stubTmpl,
		"tmpl/partials/interface_stub.tmpl",
	)
}

func tmplPartialsInterface_stubTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_stubTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_stub.tmpl", size: 93, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0x7b, 0xc0, 0xb4, 0x21, 0xe5, 0x1f, 0x70, 0x8b, 0x5a, 0x5d, 0x28, 0xbf, 0xd4, 0x71, 0x95, 0xa6, 0x26, 0x83, 0x68, 0x97, 0xfb, 0x36, 0x69, 0xa6, 0x97, 0x10, 0x13, 0x60, 0xcb, 0xb4, 0xb0}}
	return a, nil
}

var _tmplPartialsMiddleware_instrumentingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x4a\xc3\x40\x10\x86\xcf\xe9\x53\x8c\x21\x87\x5d\x08\x03\x5e\x85\x1e\xa4\x57\xa9\x60\x45\x0f\xe2\x21\x4d\x26\xe9\x40\x76\xa2\xb3\x93\x58\x59\xf6\xdd\xa5\xad\x97\xea\x69\x98\x99\xef\x87\xef\x2f\x3a\xea\x49\xa1\x9f\xa5\x75\x7b\x1a\x58\xc0\x38\x10\x3e\x73\x20\x0f\x69\x55\x14\xe3\x12\xe1\x6e\x0d\x6f\xef\xd1\x94\x65\x48\x65\x20\x3b\x4c\x5d\x59\x43\x99\x52\x85\x9b\x66\x1c\x59\x06\xdc\x36\x81\x72\x3e\x5d\x49\x75\xd2\xb2\x86\x3e\x18\xee\x3e\x94\xc5\x1c\xa9\xc2\xcd\x1a\x84\x47\x9f\x57\x45\xc1\x01\x95\x3e\x67\x8a\xb6\x99\x66\x31\x7c\x65\x3b\xb8\x71\x89\x88\xe8\xf1\xbe\xeb\xdc\xad\xbf\xa2\x1e\x1a\x23\x69\xbf\xaf\xb9\xc7\x7d\x24\x5d\xc8\x9d\x75\x77\x2c\x2d\x5d\xfc\x3d\xee\xa8\x9d\xa4\x8b\xce\xfb\x55\x91\x2f\xff\xed\xf4\x75\x5e\x95\x6c\x56\x01\x0e\x28\x74\x34\xfc\x5f\xc0\xb5\x76\xac\x21\x25\x6d\x64\x20\xa8\xb8\xae\x96\x53\xfb\x0a\x9f\x2e\x2a\xf8\xd2\x68\xcc\x39\xa5\x6a\xf9\x4d\xa4\xc4\x3d\xc8\x64\xe0\xc6\x26\x1a\x54\xfc\x07\xf6\x39\xd7\x29\x91\x74\x27\xf4\x3c\xfc\x4f\x00\x00\x00\xff\xff\xe9\x81\x20\xf9\x74\x01\x00\x00"

func tmplPartialsMiddleware_instrumentingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_instrumentingTmpl,
		"tmpl/partials/middleware_instrumenting.tmpl",
	)
}

func tmplPartialsMiddleware_instrumentingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_instrumentingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_instrumenting.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1562052640, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xfa, 0xed, 0xcf, 0x1c, 0x74, 0x9d, 0x83, 0x2a, 0x87, 0x35, 0xe7, 0xe3, 0xd4, 0x6d, 0xb8, 0xb2, 0x7a, 0x71, 0xd2, 0x15, 0x5d, 0xdb, 0x89, 0x10, 0x81, 0x6c, 0x21, 0x3e, 0x3e, 0xb6, 0xab}}
	return a, nil
}

var _tmplPartialsMiddleware_loggingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcf\xb1\x4a\xc7\x30\x10\xc7\xf1\x39\x79\x8a\x1f\x21\x43\x02\x21\x38\x0b\x4e\xae\xe2\xe0\xe0\x1e\xda\x6b\x2c\xa4\x29\x5e\xd3\x52\x38\xf2\xee\x22\xa2\x88\xc2\xbf\xd3\x71\x1c\x7c\xf9\x9c\x1a\x69\x22\xc6\xb4\xd7\xc1\x79\x88\x56\x00\x50\x96\x58\xd6\x9c\x89\xe3\xd3\x9a\x9d\x59\xa8\xbd\xad\xa3\x09\x30\x22\x36\x3e\xa6\x52\xe6\x9a\xe3\x73\x5a\xa8\x77\x03\x11\x4e\x35\x13\xec\x1c\xec\x81\xfb\x07\xd8\xf8\x42\xef\x3b\x6d\x2d\xbe\x26\xde\x7a\x17\x99\x27\xe4\x06\x57\xa8\xfe\x39\x7a\xdc\xf5\xfe\xd5\x3d\xbe\x83\x01\xbf\x36\x11\xaa\xe3\xcf\x08\x30\xc4\x6c\x02\x88\xd9\x6b\xd5\x9d\xd7\x5a\x31\xb5\x9d\xeb\xa7\xb9\xd2\xd9\xe2\x7f\xa2\x1b\xda\x89\x2b\xc4\xe5\x17\x37\x58\xfe\x23\x00\x00\xff\xff\x23\xf8\xad\xa2\x45\x01\x00\x00"

func tmplPartialsMiddleware_loggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_loggingTmpl,
		"tmpl/partials/middleware_logging.tmpl",
	)
}

func tmplPartialsMiddleware_loggingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_loggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_logging.tmpl", size: 325, mode: os.FileMode(0644), modTime: time.Unix(1577068587, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xd3, 0xf8, 0x12, 0x92, 0x78, 0xcd, 0x55, 0x33, 0xb6, 0xf4, 0xff, 0x4e, 0xee, 0xc2, 0xb, 0x8b, 0x67, 0x4c, 0xf7, 0x2f, 0x79, 0x1b, 0xab, 0xf1, 0xd3, 0x6d, 0x72, 0x3e, 0x41, 0x27, 0x77}}
	return a, nil
}

var _tmplPartialsStructTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\x08\x59\x4a\x0e\x50\x70\xe5\xde\x95\xb8\x6e\xd0\x51\x2a\x64\x5a\x92\x58\x28\x8f\xb9\xbb\xb4\xd8\xee\xbe\x19\x78\xfc\xe4\xf0\x82\x0a\xe2\x65\xcc\x59\xb4\xc1\x7b\x33\x72\x3f\x57\x8b\x3e\xcd\xda\x32\x09\xc8\x78\x4d\x59\xcc\x50\x5b\xf9\x3e\x1a\xe8\x40\x96\xa4\x6f\x41\x18\x4e\x61\x46\x77\x46\xbc\xa7\x52\xcd\x1c\x40\x86\x79\x1f\x6c\xbe\x2d\xd3\xea\xfe\x53\x47\xed\xfc\xf6\x3a\x3a\xbe\xc7\x3f\xe5\x60\xee\x17\x00\x00\xff\xff\xa5\x0b\x21\x15\x97\x00\x00\x00"

func tmplPartialsStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStructTmpl,
		"tmpl/partials/struct.tmpl",
	)
}

func tmplPartialsStructTmpl() (*asset, error) {
	bytes, err := tmplPartialsStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct.tmpl", size: 151, mode: os.FileMode(0644), modTime: time.Unix(1575469821, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x9d, 0x4, 0x16, 0x6d, 0x42, 0x5, 0xbe, 0xa4, 0x51, 0xbd, 0x36, 0xe7, 0x2c, 0x1f, 0x85, 0x25, 0x8d, 0xe, 0x34, 0xbd, 0xe0, 0x13, 0x6, 0x48, 0xe, 0xb8, 0x7, 0x30, 0x2c, 0x96, 0x5a}}
	return a, nil
}

var _tmplPartialsStruct_functionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x6e\x84\x30\x10\x44\xfb\x7c\xc5\xc8\x15\x34\x56\xbe\x21\xe9\x53\x24\xe9\x11\x82\x25\x42\xb2\x0d\x31\xeb\x02\xad\xe6\xdf\x23\x9b\xdc\x9d\xae\xda\x9d\xd1\xec\xbe\x31\x5b\x17\x24\x81\x7f\xdf\x62\x94\xa4\x70\x8e\x34\xbb\xc9\xba\x4b\x9a\xc9\xa5\xa4\x09\x9d\x99\xff\xd2\x5c\x26\xf5\x1f\x63\x14\x12\x0f\xe3\xfb\xdc\x85\xec\x61\xa6\x12\xf7\x30\xaa\xc0\xad\x49\x25\x2f\xe3\x24\x43\x3d\x77\xf0\xa4\xe1\x22\x6e\x8a\x4e\x7e\xe1\xdf\xb6\xf9\x84\x73\x7d\x83\x56\xd1\x88\xe1\x10\xf2\xa5\x25\x7f\x14\x5d\x90\x04\xff\x29\x47\x09\x7a\xf4\x78\x25\xb3\x68\xc9\xe9\x89\x55\x09\xc3\xe5\xbb\x7b\xb8\x3d\x69\xfd\xff\x07\xf8\x17\x00\x00\xff\xff\x61\xb8\x92\x3e\xf1\x00\x00\x00"

func tmplPartialsStruct_functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_functionTmpl,
		"tmpl/partials/struct_function.tmpl",
	)
}

func tmplPartialsStruct_functionTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_function.tmpl", size: 241, mode: os.FileMode(0644), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0x21, 0xec, 0x75, 0xa3, 0x85, 0x4c, 0x43, 0x6c, 0x55, 0x72, 0xff, 0x19, 0xac, 0xda, 0x69, 0xaa, 0x71, 0x5c, 0x15, 0xad, 0xab, 0xa8, 0xdd, 0x3c, 0xe0, 0x7e, 0x49, 0x7c, 0x9f, 0xa7, 0x46}}
	return a, nil
}

var _tmplPartialsStruct_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\xc8\x4b\x55\xd0\x73\xce\xcf\xcd\x4d\xcd\x2b\x51\x50\x52\xaa\xad\xad\xae\x86\x71\x41\xec\xd4\xbc\x94\xda\x5a\xae\x92\xca\x82\x54\x85\xea\x6a\x3d\xbf\xc4\xdc\xd4\xda\x5a\x10\x2b\xa4\xb2\x20\xb5\xb6\x16\x10\x00\x00\xff\xff\xac\xed\xb2\x28\x41\x00\x00\x00"

func tmplPartialsStruct_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_typeTmpl,
		"tmpl/partials/struct_type.tmpl",
	)
}

func tmplPartialsStruct_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_type.tmpl", size: 65, mode: os.FileMode(0644), modTime: time.Unix(1575469542, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0xef, 0xdb, 0xd7, 0x1e, 0x30, 0x3c, 0xe5, 0xbb, 0xed, 0x9d, 0x75, 0x51, 0x7b, 0xfe, 0x33, 0x67, 0x17, 0x1f, 0x8f, 0x8e, 0x56, 0xf5, 0x68, 0xfd, 0xf, 0x41, 0xd6, 0x66, 0x46, 0x98, 0x23}}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x31\x4b\xc6\x30\x10\x86\x77\x7f\xc5\xcb\x47\x86\x16\x4a\xc0\xf5\x03\x47\x1d\x1d\x0a\xba\x4a\xd0\xb3\x04\x62\x9a\x5e\xd2\x82\x1c\xf7\xdf\x25\xb1\x06\x74\x31\x4b\xe0\xee\xb9\xf7\x7d\x6e\x70\x3e\x11\xff\x0e\xda\x30\x04\x8a\xb0\x33\x6d\x3b\xe5\x62\x9f\x1d\xe7\x11\xb7\xaa\x2f\xb8\xc3\xc2\xe9\x75\xa6\x14\x3e\xed\x20\xd2\x91\x47\xf7\x41\xaa\xa3\x08\x85\x4c\xaa\x5c\x01\x5c\xff\xa7\xe3\x9b\x6a\x6f\x67\x2a\x3b\x47\x34\x30\xa7\x35\x66\x3a\x49\x81\x08\xbb\xb8\x10\x8c\x9f\xcc\x51\x83\xcd\x2f\x3b\xd5\x66\x1e\x09\xe6\x68\x37\xb8\xdc\x33\x5f\xea\xb8\xac\x4f\x29\x11\x3f\x78\xce\xe5\x67\xab\x7a\x6d\x86\x56\xa4\x4f\x4e\x99\xef\x9c\xb5\x60\x08\xae\x1e\xf8\x3f\x4d\xa3\xea\xd4\xd1\xf6\x41\x27\x44\x1f\xbe\x02\x00\x00\xff\xff\x19\x4b\x69\xc0\x44\x01\x00\x00"

func tmplPartialsTransport_grpc_client_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_decode_funcTmpl,
		"tmpl/partials/transport_grpc_client_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_decode_func.tmpl", size: 324, mode: os.FileMode(0644), modTime: time.Unix(1573701784, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x66, 0xcc, 0xe3, 0x69, 0xef, 0xd2, 0x4f, 0x63, 0x19, 0xfb, 0xe2, 0x38, 0x2c, 0x6c, 0x69, 0x1a, 0xac, 0x8d, 0x68, 0x27, 0x7, 0x6a, 0x6f, 0xa6, 0xa4, 0x12, 0x69, 0xb6, 0xd, 0xfe, 0xcb}}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xb1\xca\xc3\x30\x0c\x84\xf7\xff\x29\x6e\xf0\x90\x40\x08\xff\x1c\xe8\xda\xb1\x43\xa1\x5d\x8b\xa1\x6a\x31\xb8\x4a\x2c\x3b\x59\x84\xde\xbd\x24\x98\x40\xbb\x54\x8b\x90\xf8\x74\xba\xfb\x43\x2d\xd5\xf0\x00\x25\x34\x91\x18\xfd\x99\xd2\x4c\xb9\xf4\x57\x2f\xb9\xc5\xbf\xd9\x0d\x07\x48\x5d\x36\xaa\x3b\x70\xf2\x2f\x32\x6b\x55\x29\x66\x32\x13\x4a\x18\x7e\x91\x7c\x37\xdb\xff\x0a\x95\x59\x18\x1b\x98\xa7\x91\x33\x55\x52\xa1\x2a\x9e\x9f\x04\x17\x3a\xb7\xac\xb2\xee\xc3\x97\x99\x6a\x19\x2f\xd3\x44\x72\x0c\x92\x0b\xdc\x52\x4f\x07\xa1\xd4\xab\xee\xf3\x96\x8d\xc7\x82\x26\xfa\x95\x0b\x5f\x4a\xad\x59\x57\x7d\xd5\x06\xeb\xc0\x21\xbe\x03\x00\x00\xff\xff\x52\x75\x26\xd3\x1e\x01\x00\x00"

func tmplPartialsTransport_grpc_client_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_encode_funcTmpl,
		"tmpl/partials/transport_grpc_client_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_encode_func.tmpl", size: 286, mode: os.FileMode(0644), modTime: time.Unix(1573701077, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0x10, 0x16, 0x86, 0xe0, 0x23, 0x13, 0xd3, 0x62, 0x35, 0x27, 0xd6, 0x7c, 0x4c, 0x2c, 0x94, 0x59, 0xfa, 0x87, 0x6d, 0xa8, 0x0, 0x74, 0xf5, 0xae, 0x80, 0x34, 0xdf, 0xfc, 0x3, 0xb1, 0x8c}}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xb1\x6a\xc4\x30\x0c\x86\xf7\x3e\xc5\x3f\x78\x48\x20\x98\xce\x81\xae\x1d\x3b\x04\xda\xb5\x98\x3b\x5d\x30\xf8\x1c\x5b\x76\xb2\x08\xbd\xfb\x91\x60\x02\x77\xcb\x69\x11\x82\x4f\xbf\x3e\x7d\xa0\x95\x88\xbf\x81\x32\xba\x40\x11\x76\xa2\xbc\x52\xa9\xf6\xcf\x71\xe9\xf1\xa9\xfa\x8f\x2f\xcc\x9c\x2e\x13\x65\xdb\x89\x9c\xc0\x8f\xbb\x93\x6a\x2f\x42\xa1\x90\x2a\x53\xc6\xf8\x8e\x8c\x57\xd5\xf3\x2e\x53\x5d\x39\xe2\x00\x4b\x5a\x62\xa1\x46\x0a\x44\xd8\xc5\x99\x60\xfc\x60\xb6\x3d\xd6\x3c\x79\xa9\x8a\xd4\xe5\x37\x25\xe2\x6f\xcf\xa5\xc2\x6c\x6d\x75\x64\xca\x56\xe4\x9c\x8f\xdf\xe2\x52\xd1\x05\xb7\x73\xfe\x25\xa9\x57\x1d\x9a\x57\x6b\xd0\x01\xd1\x87\x47\x00\x00\x00\xff\xff\x16\x20\x7e\x39\x1e\x01\x00\x00"

func tmplPartialsTransport_grpc_server_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_decode_funcTmpl,
		"tmpl/partials/transport_grpc_server_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_decode_func.tmpl", size: 286, mode: os.FileMode(0644), modTime: time.Unix(1573700734, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x20, 0x0, 0xd2, 0xa1, 0xd, 0x3, 0x3d, 0xd3, 0x5a, 0x7d, 0x29, 0x9d, 0x46, 0xda, 0x18, 0xa5, 0x9f, 0xdc, 0x85, 0xf, 0x56, 0x62, 0x90, 0x60, 0xd8, 0xf4, 0xa4, 0x31, 0x4c, 0x56, 0xc2}}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x6a\xc6\x20\x10\x84\xef\x7d\x8a\xe5\xc7\x83\x42\xf0\x01\x7e\xe8\xa9\xd8\x63\x0f\x81\xf6\x2e\xc9\x36\x08\xa9\xda\xd5\x04\xca\xb2\xef\x5e\xb4\x49\x28\xbf\x07\xc5\xf1\x9b\x19\xf7\x09\x8e\x45\x98\xd7\x1f\xb8\x3f\xc3\x42\x79\x1a\xdb\xc5\x6a\x66\x3b\xe2\xf7\x86\xa5\xda\x37\xff\x85\x22\xe6\x1f\x5e\x37\x8a\xd0\x89\x92\x53\x2c\x78\x20\x0c\xcc\xe4\xe3\x82\xa0\xc2\xa0\xf6\x96\xa8\xae\x94\x0f\x4f\x45\x84\x39\x7c\x42\x44\x50\x7b\xf7\xc0\xcd\x11\xdd\x9a\x5c\xd3\x7b\xce\x48\xaf\x81\x4a\x3d\x5f\x45\xee\xfd\x6b\x96\xf9\x52\x98\x31\xce\x67\x4e\xaa\xa0\x57\xdf\x0c\xe1\xa1\xc9\x88\x0c\x17\xda\x0f\x90\xa1\xcf\xe7\xe2\x94\x66\x74\x44\x89\x34\xb6\xbd\xd8\x17\x5f\xaa\xfe\x6b\x72\x44\xc6\xfc\x06\x00\x00\xff\xff\x79\xe4\x5b\x2b\x19\x01\x00\x00"

func tmplPartialsTransport_grpc_server_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_encode_funcTmpl,
		"tmpl/partials/transport_grpc_server_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_encode_func.tmpl", size: 281, mode: os.FileMode(0644), modTime: time.Unix(1575536362, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0xc, 0xe5, 0x7e, 0xf8, 0xc0, 0xe0, 0x82, 0x40, 0x97, 0x62, 0x32, 0xa, 0x42, 0x3f, 0x6b, 0x89, 0x84, 0xac, 0xae, 0x5, 0xab, 0xe, 0xdb, 0x13, 0x3d, 0xfb, 0xfa, 0x38, 0xc0, 0xd5, 0x50}}
	return a, nil
}

var _tmplPartialsVarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\x47\xb9\xa1\x05\x11\x67\xa1\x93\x8b\x93\x93\x38\xb9\x04\xbc\x96\x40\x73\x2d\x69\x0c\x48\xb8\xff\x2e\x49\x8a\xe0\x94\xef\x7d\xb9\x7b\x97\x92\x1d\x31\x05\x74\x33\x0b\xa8\xc7\x49\x35\x1a\x8f\x2e\x25\x6f\x64\x62\x90\x3d\x50\xc4\x79\x00\xa9\x36\x65\x98\xe2\xf1\xb2\x38\xc7\x12\x54\x8b\x90\x25\xa0\x1b\xad\xdf\x02\xc8\x82\xfa\xac\x57\x6f\x25\x8c\x68\x9f\xd2\xe6\xc8\xf2\xca\xcf\xff\x6a\x91\x4d\xb1\x37\xe3\x58\x15\x85\xef\x9f\xb5\x72\xbd\x75\x35\xdb\xc3\xcc\x6f\x56\x1d\xea\xff\x9e\x7e\xa5\xb5\xa6\xdf\xe1\x1b\x00\x00\xff\xff\x1b\x65\x9e\x03\xd0\x00\x00\x00"

func tmplPartialsVarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsVarsTmpl,
		"tmpl/partials/vars.tmpl",
	)
}

func tmplPartialsVarsTmpl() (*asset, error) {
	bytes, err := tmplPartialsVarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/vars.tmpl", size: 208, mode: os.FileMode(0644), modTime: time.Unix(1563597101, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0x9a, 0xf5, 0xeb, 0xb2, 0xfe, 0x3c, 0x56, 0x27, 0xc, 0xd4, 0xbc, 0x8b, 0x88, 0x5, 0x6a, 0xa3, 0xea, 0xa8, 0x33, 0xa4, 0x12, 0x75, 0xde, 0x15, 0xa8, 0xe8, 0xd0, 0x77, 0xdc, 0x55, 0x3}}
	return a, nil
}

var _tmplProtoPbTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xab\xca\x61\x93\xa6\xee\xc0\x8d\xaa\x8f\x00\x42\xd3\xc4\x89\x4b\x68\xdd\x2d\x6a\x9b\x84\xd8\xad\x98\xac\xbc\x3b\x5a\xe9\x60\xd3\x00\xed\xc0\x29\xfe\x13\xc7\xfe\xbf\x9f\x0e\x8e\xcd\x3b\x94\x90\x85\xe8\xd9\xdf\x65\x85\x52\xc1\x54\xad\xd9\x21\x84\xd7\x42\xa9\xf5\x1a\xb6\x7b\x04\x91\xfc\xd1\xf4\x98\x12\x10\xc6\xd1\x56\x08\x35\x36\xd6\x59\xb6\xde\xe5\xea\x74\xf7\xdd\x25\x4a\x24\x1a\xb7\x43\xd0\x76\xa5\x47\xb8\x2f\x21\x7f\x40\xde\xfb\x9a\x52\x02\x88\xa1\x02\x11\x3d\xce\xed\x8b\xb3\x7a\x83\x6f\x03\x12\x2f\x21\x22\x0f\xd1\x11\x5c\x3e\x52\xf0\x8e\x70\x59\x88\xd8\x06\x9c\x67\x58\x74\x86\x18\xb4\x05\x7d\x5a\xb0\x4c\x49\x24\x44\xeb\xb8\x81\xec\xc5\x65\x47\x89\xae\xfe\x3a\x54\xfa\xcb\x9c\xea\x91\xe8\x88\x7f\xed\xe9\x9c\xaa\x5d\xe9\x76\xfa\xa9\xc7\xfc\xc9\x44\xd3\x23\x63\x9c\xd8\x44\x74\x3b\xe6\xdb\x43\x98\x72\x98\xc4\x1c\x4a\x39\xcb\x67\xd3\x0d\x98\xd2\x15\x43\x7b\x39\xec\x06\x8e\x9f\xcd\x7e\x66\xf4\x9b\xdb\x0d\xd2\xd0\xf1\x7f\x58\x9d\x27\xdd\x94\xf7\x54\x7d\x04\x00\x00\xff\xff\x00\x3d\x1e\x0d\x6e\x02\x00\x00"

func tmplProtoPbTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProtoPbTmpl,
		"tmpl/proto.pb.tmpl",
	)
}

func tmplProtoPbTmpl() (*asset, error) {
	bytes, err := tmplProtoPbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto.pb.tmpl", size: 622, mode: os.FileMode(0644), modTime: time.Unix(1577070263, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0xcc, 0x39, 0xa9, 0x89, 0x8f, 0x29, 0x9a, 0x1c, 0x8c, 0x8, 0x31, 0xac, 0x9e, 0xe, 0xc0, 0xf2, 0x6a, 0x2e, 0x11, 0xa1, 0x91, 0x25, 0xcf, 0x2e, 0xf1, 0xe2, 0x6f, 0x1e, 0x49, 0x17, 0xca}}
	return a, nil
}

var _tmplProto_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x6a\x04\x31\x0c\x45\xfb\x39\x85\x2e\x60\xbb\x48\x67\xd8\x3a\xa4\x49\x13\x52\x07\xcd\xac\xa2\x35\x68\x2c\x63\xc9\x21\xb0\xec\xdd\x83\x67\x03\x21\x90\x26\x8d\x10\x9f\xf7\x1f\xfc\x9c\xe1\xa9\x9a\xa3\x08\xb4\xae\xae\x0f\x71\xc9\x19\x2e\xee\xcd\x72\x4a\x5c\xfc\x32\xd6\xb8\xe9\x9e\x58\x95\x85\xd2\x01\xad\xe3\x3d\x75\x12\x42\x23\x9b\xf8\x6b\x3b\xa3\xd3\x5d\xb0\xc1\xa3\xc2\x5a\xea\xb9\x54\x36\xf8\x28\x38\x01\x60\x05\x26\x87\x30\xe0\x97\x52\xb0\xf2\x8f\xf2\x78\xfe\x89\x6f\x81\xa9\x06\x9e\xb5\xd9\x7c\x21\x02\x14\xbb\x5b\xfe\x5a\xd1\xdb\x76\x9c\xc0\x9a\xbc\x13\xa5\x1d\xcd\xa9\x27\xfa\xc4\xbd\x09\xd9\xb2\x7c\xaf\xb8\x5e\xe3\x33\xee\x74\xbb\xc5\x23\x80\x10\x58\xdf\x74\xf8\xa9\xc9\xe0\x52\xed\x34\x2d\x39\x7e\x05\x00\x00\xff\xff\xa9\xcb\x56\x7a\x40\x01\x00\x00"

func tmplProto_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileBatTmpl,
		"tmpl/proto_compile.bat.tmpl",
	)
}

func tmplProto_compileBatTmpl() (*asset, error) {
	bytes, err := tmplProto_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.bat.tmpl", size: 320, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0x1e, 0xc, 0x86, 0xc8, 0x78, 0x99, 0xd8, 0xcb, 0x6a, 0xce, 0x45, 0x11, 0x41, 0x50, 0xea, 0x71, 0x99, 0xb6, 0xc7, 0x33, 0x60, 0x42, 0xb2, 0x71, 0x2e, 0x14, 0xe6, 0xe9, 0xa2, 0x6c, 0xc5}}
	return a, nil
}

var _tmplProto_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\x2b\x31\x14\x84\x7b\x3d\xc5\x5c\xb6\xbd\x2b\x15\xe9\x6c\x5c\x87\x34\x49\x61\x52\x07\xad\x7c\x7c\x56\x44\xd2\x59\xf4\xe3\x24\x18\xbf\x7b\x58\x79\x09\x04\xd2\x48\x83\x18\xbe\x6f\x34\xfc\x33\xad\x64\x33\xf9\x64\x28\x5d\x50\x66\xa5\x06\x3c\xa5\x52\x6d\x08\x58\xb2\x54\x79\xc0\x39\x4b\x44\x91\x96\x1d\x21\x5a\xf7\x72\x84\xa4\xf0\xa5\xd5\x00\x4c\x99\x3e\xe0\xb7\xba\x6d\x55\x9c\xa4\x73\x0f\xd1\xbe\x13\x82\x9f\xaa\x48\x58\x9b\xec\x2b\x5c\x90\x44\x98\x6b\x5d\xca\xce\x18\xf6\x75\x6e\x93\x76\x12\x0d\x8b\x70\x20\xd3\x7d\x53\x3b\xaf\x7d\x6d\x56\x0a\x53\xd2\x65\xc6\x1e\xda\xac\x64\xcf\x2d\x13\xf6\xe8\xf0\xed\xda\xec\x6a\x50\x03\x5e\x97\x93\xad\x74\xdf\xed\xf0\x28\x98\x7c\x3a\xf9\xc4\x05\x17\x6f\xfb\x0a\x01\x53\xc5\xd8\xf0\xcb\x1e\x6c\xe2\x1f\xbb\xb9\xf6\xf4\xff\x4e\x19\x99\xd2\xc8\x72\xeb\xfc\x23\x11\x6c\x28\xb2\xa2\xfe\xfa\x46\x5e\x5c\x3f\x46\x16\x53\x33\x91\x89\xb6\x54\xca\x86\x3e\x6d\x5c\x02\x15\xa5\xb6\x69\xd7\xab\x7e\xb6\x91\x6e\x37\xdd\x1f\x30\x8e\x2c\x6f\xd2\xea\x61\x09\x8d\x7d\x2a\x87\x95\xb2\xd3\xdf\x01\x00\x00\xff\xff\xf5\x6a\x2e\xbe\x9e\x01\x00\x00"

func tmplProto_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileShTmpl,
		"tmpl/proto_compile.sh.tmpl",
	)
}

func tmplProto_compileShTmpl() (*asset, error) {
	bytes, err := tmplProto_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.sh.tmpl", size: 414, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x9c, 0x25, 0xc6, 0x24, 0x2a, 0x3a, 0xcd, 0x27, 0x2, 0x39, 0x55, 0xec, 0xf6, 0x5c, 0x31, 0xfe, 0x31, 0x1a, 0x1c, 0x4a, 0x8d, 0x11, 0x6a, 0x6d, 0xc0, 0x46, 0x73, 0x1c, 0xa2, 0xb8, 0x79}}
	return a, nil
}

var _tmplSvcThriftTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x2d\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x56\x29\xd3\x0b\x4a\x2d\xc8\xa9\xac\xad\xad\xe6\xaa\xe5\x42\x15\x2e\x2c\x4d\x2d\x2e\x01\x4b\x54\x57\xa7\xe6\xa5\xd4\xd6\x72\x71\x15\xa7\x16\x95\x65\x26\xa7\x2a\x54\x57\xeb\xf9\x25\xe6\xa6\xd6\xd6\x06\xc3\x04\xb8\xf0\xd8\x86\x62\x0f\x84\x03\xd1\xad\xa0\x61\x68\x85\x66\x9b\x42\x51\x6a\xa1\x26\x17\xd4\xc2\x5a\x2e\x2e\x40\x00\x00\x00\xff\xff\x3c\x08\xab\xcd\xc5\x00\x00\x00"

func tmplSvcThriftTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSvcThriftTmpl,
		"tmpl/svc.thrift.tmpl",
	)
}

func tmplSvcThriftTmpl() (*asset, error) {
	bytes, err := tmplSvcThriftTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/svc.thrift.tmpl", size: 197, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0x8e, 0xf7, 0x95, 0xff, 0x3c, 0x79, 0x5c, 0x18, 0x6e, 0x8a, 0x45, 0x9b, 0x9c, 0x48, 0x71, 0x62, 0xb3, 0x1a, 0xf5, 0x14, 0x9a, 0xef, 0x52, 0xc, 0x9f, 0xf1, 0xe, 0x3c, 0xbf, 0x10, 0x63}}
	return a, nil
}

var _tmplThrift_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\x41\xaa\xc3\x20\x10\xc6\xf1\xbd\xa7\x90\xac\x9f\xce\x5e\xc8\x01\xde\xa6\xf4\x06\x61\x92\x98\x51\x6a\x1c\x31\x53\x5a\x10\xef\xde\x85\x59\xce\x8f\xf9\xf8\x3b\xa7\xff\xf3\x25\x98\x92\x96\x50\xe3\x21\xda\xe9\x20\x52\x2e\x07\x30\xc0\x62\xc1\x2d\x78\xcb\x95\x60\xe7\x4f\x4e\x8c\xbb\xba\x7f\x4d\xd5\xc6\x90\xcf\x7a\x22\x76\x05\xb7\x17\x92\x5f\x4a\xf5\x47\xfc\xce\xad\xd9\xe7\x90\xde\x81\x7c\x36\xc4\xf0\x37\x76\x4b\x3c\x0b\x57\x99\x29\x4a\x78\xaf\x76\xe3\x13\x46\xe4\x4e\x42\x8a\x2b\x10\xdf\xd7\xa4\x5b\xb3\x0f\x3c\x7d\xef\x76\x88\x52\xea\x17\x00\x00\xff\xff\x24\x72\xa9\x61\xb8\x00\x00\x00"

func tmplThrift_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileBatTmpl,
		"tmpl/thrift_compile.bat.tmpl",
	)
}

func tmplThrift_compileBatTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.bat.tmpl", size: 184, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0xc2, 0xae, 0xf4, 0x5c, 0xf1, 0xd8, 0x71, 0x26, 0x7e, 0x42, 0xea, 0x81, 0xe8, 0xea, 0xab, 0x41, 0xc2, 0xd, 0x3c, 0x52, 0x5, 0xf6, 0x9b, 0x95, 0xd1, 0xe4, 0x62, 0x40, 0xe0, 0x3c, 0xb6}}
	return a, nil
}

var _tmplThrift_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x0a\xd1\x5c\x17\x9b\x6d\xb7\x40\xaf\x83\x5d\xb6\xbd\x41\xb1\x53\x55\x11\x73\x2c\x63\xab\x6b\x21\xe4\xdd\x47\xb1\x4f\x3d\xea\xff\x24\xfd\xdf\x00\x9f\xa9\xaa\x8f\x11\x74\x29\x7c\x51\x58\xfd\xfc\x5d\xad\x19\xe0\xd5\x42\x28\x78\x03\xee\x3c\x88\x54\x35\x03\xbc\x3d\xe5\x91\x03\xfe\x61\x7a\xa0\xf7\x27\xd4\x5e\x9a\x01\x3e\xa4\x40\xe4\x74\xbd\x43\x45\x84\x09\x16\xd5\x5c\x27\xe7\xda\x82\xf5\xd9\xcf\x0b\x5a\x29\xe4\xce\x72\x4b\x51\xfc\xd9\x74\x9d\xb1\xc0\x38\x12\x26\x38\x90\x4c\xd9\xcf\xbf\x9e\xf0\x94\x0b\x5e\xf8\x7e\xdc\x36\xfb\xd3\x92\x7d\x77\x84\x69\x24\x71\x2f\xed\xee\xc4\x6b\x96\xa2\x47\x62\x5d\xae\xc1\xce\xb2\xba\x56\xd2\x2b\x5d\xe4\xe0\x48\xfa\x74\x80\x6d\xb3\x5f\x7e\xc5\x7d\xb7\xdd\xd9\x98\xff\x00\x00\x00\xff\xff\xef\x99\x12\x70\x1a\x01\x00\x00"

func tmplThrift_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileShTmpl,
		"tmpl/thrift_compile.sh.tmpl",
	)
}

func tmplThrift_compileShTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.sh.tmpl", size: 282, mode: os.FileMode(0644), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0xd1, 0x98, 0xaf, 0x9e, 0xa2, 0xf4, 0xf2, 0x54, 0x94, 0xd0, 0x34, 0x62, 0x22, 0x9e, 0x8c, 0xc8, 0x82, 0x20, 0x11, 0xad, 0xb7, 0x81, 0x94, 0x44, 0x87, 0xc5, 0x60, 0x52, 0x87, 0xd4, 0xf8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/custom_errors.go.tmpl":                           tmplCustom_errorsGoTmpl,
	"tmpl/custom_responses.go.tmpl":                        tmplCustom_responsesGoTmpl,
	"tmpl/custom_responses_decode.go.tmpl":                 tmplCustom_responses_decodeGoTmpl,
	"tmpl/custom_responses_error.go.tmpl":                  tmplCustom_responses_errorGoTmpl,
	"tmpl/custom_responses_httpstatus.go.tmpl":             tmplCustom_responses_httpstatusGoTmpl,
	"tmpl/file.tmpl":                                       tmplFileTmpl,
	"tmpl/gk.json.tmpl":                                    tmplGkJsonTmpl,
	"tmpl/partials/alias_type.tmpl":                        tmplPartialsAlias_typeTmpl,
	"tmpl/partials/constants.tmpl":                         tmplPartialsConstantsTmpl,
	"tmpl/partials/endpoint_func.tmpl":                     tmplPartialsEndpoint_funcTmpl,
	"tmpl/partials/endpoint_method_func.tmpl":              tmplPartialsEndpoint_method_funcTmpl,
	"tmpl/partials/endpoint_response.tmpl":                 tmplPartialsEndpoint_responseTmpl,
	"tmpl/partials/func.tmpl":                              tmplPartialsFuncTmpl,
	"tmpl/partials/func_parameters.tmpl":                   tmplPartialsFunc_parametersTmpl,
	"tmpl/partials/func_results.tmpl":                      tmplPartialsFunc_resultsTmpl,
	"tmpl/partials/func_return.tmpl":                       tmplPartialsFunc_returnTmpl,
	"tmpl/partials/imports.tmpl":                           tmplPartialsImportsTmpl,
	"tmpl/partials/interface.tmpl":                         tmplPartialsInterfaceTmpl,
	"tmpl/partials/interface_func.tmpl":                    tmplPartialsInterface_funcTmpl,
	"tmpl/partials/interface_stub.tmpl":                    tmplPartialsInterface_stubTmpl,
	"tmpl/partials/middleware_instrumenting.tmpl":          tmplPartialsMiddleware_instrumentingTmpl,
	"tmpl/partials/middleware_logging.tmpl":                tmplPartialsMiddleware_loggingTmpl,
	"tmpl/partials/struct.tmpl":                            tmplPartialsStructTmpl,
	"tmpl/partials/struct_function.tmpl":                   tmplPartialsStruct_functionTmpl,
	"tmpl/partials/struct_type.tmpl":                       tmplPartialsStruct_typeTmpl,
	"tmpl/partials/transport_grpc_client_decode_func.tmpl": tmplPartialsTransport_grpc_client_decode_funcTmpl,
	"tmpl/partials/transport_grpc_client_encode_func.tmpl": tmplPartialsTransport_grpc_client_encode_funcTmpl,
	"tmpl/partials/transport_grpc_server_decode_func.tmpl": tmplPartialsTransport_grpc_server_decode_funcTmpl,
	"tmpl/partials/transport_grpc_server_encode_func.tmpl": tmplPartialsTransport_grpc_server_encode_funcTmpl,
	"tmpl/partials/vars.tmpl":                              tmplPartialsVarsTmpl,
	"tmpl/proto.pb.tmpl":                                   tmplProtoPbTmpl,
	"tmpl/proto_compile.bat.tmpl":                          tmplProto_compileBatTmpl,
	"tmpl/proto_compile.sh.tmpl":                           tmplProto_compileShTmpl,
	"tmpl/svc.thrift.tmpl":                                 tmplSvcThriftTmpl,
	"tmpl/thrift_compile.bat.tmpl":                         tmplThrift_compileBatTmpl,
	"tmpl/thrift_compile.sh.tmpl":                          tmplThrift_compileShTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"custom_errors.go.tmpl":               &bintree{tmplCustom_errorsGoTmpl, map[string]*bintree{}},
		"custom_responses.go.tmpl":            &bintree{tmplCustom_responsesGoTmpl, map[string]*bintree{}},
		"custom_responses_decode.go.tmpl":     &bintree{tmplCustom_responses_decodeGoTmpl, map[string]*bintree{}},
		"custom_responses_error.go.tmpl":      &bintree{tmplCustom_responses_errorGoTmpl, map[string]*bintree{}},
		"custom_responses_httpstatus.go.tmpl": &bintree{tmplCustom_responses_httpstatusGoTmpl, map[string]*bintree{}},
		"file.tmpl":                           &bintree{tmplFileTmpl, map[string]*bintree{}},
		"gk.json.tmpl":                        &bintree{tmplGkJsonTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"alias_type.tmpl":                        &bintree{tmplPartialsAlias_typeTmpl, map[string]*bintree{}},
			"constants.tmpl":                         &bintree{tmplPartialsConstantsTmpl, map[string]*bintree{}},
			"endpoint_func.tmpl":                     &bintree{tmplPartialsEndpoint_funcTmpl, map[string]*bintree{}},
			"endpoint_method_func.tmpl":              &bintree{tmplPartialsEndpoint_method_funcTmpl, map[string]*bintree{}},
			"endpoint_response.tmpl":                 &bintree{tmplPartialsEndpoint_responseTmpl, map[string]*bintree{}},
			"func.tmpl":                              &bintree{tmplPartialsFuncTmpl, map[string]*bintree{}},
			"func_parameters.tmpl":                   &bintree{tmplPartialsFunc_parametersTmpl, map[string]*bintree{}},
			"func_results.tmpl":                      &bintree{tmplPartialsFunc_resultsTmpl, map[string]*bintree{}},
			"func_return.tmpl":                       &bintree{tmplPartialsFunc_returnTmpl, map[string]*bintree{}},
			"imports.tmpl":                           &bintree{tmplPartialsImportsTmpl, map[string]*bintree{}},
			"interface.tmpl":                         &bintree{tmplPartialsInterfaceTmpl, map[string]*bintree{}},
			"interface_func.tmpl":                    &bintree{tmplPartialsInterface_funcTmpl, map[string]*bintree{}},
			"interface_stub.tmpl":                    &bintree{tmplPartialsInterface_stubTmpl, map[string]*bintree{}},
			"middleware_instrumenting.tmpl":          &bintree{tmplPartialsMiddleware_instrumentingTmpl, map[string]*bintree{}},
			"middleware_logging.tmpl":                &bintree{tmplPartialsMiddleware_loggingTmpl, map[string]*bintree{}},
			"struct.tmpl":                            &bintree{tmplPartialsStructTmpl, map[string]*bintree{}},
			"struct_function.tmpl":                   &bintree{tmplPartialsStruct_functionTmpl, map[string]*bintree{}},
			"struct_type.tmpl":                       &bintree{tmplPartialsStruct_typeTmpl, map[string]*bintree{}},
			"transport_grpc_client_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_client_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_encode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_encode_funcTmpl, map[string]*bintree{}},
			"vars.tmpl":                              &bintree{tmplPartialsVarsTmpl, map[string]*bintree{}},
		}},
		"proto.pb.tmpl":           &bintree{tmplProtoPbTmpl, map[string]*bintree{}},
		"proto_compile.bat.tmpl":  &bintree{tmplProto_compileBatTmpl, map[string]*bintree{}},
		"proto_compile.sh.tmpl":   &bintree{tmplProto_compileShTmpl, map[string]*bintree{}},
		"svc.thrift.tmpl":         &bintree{tmplSvcThriftTmpl, map[string]*bintree{}},
		"thrift_compile.bat.tmpl": &bintree{tmplThrift_compileBatTmpl, map[string]*bintree{}},
		"thrift_compile.sh.tmpl":  &bintree{tmplThrift_compileShTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
