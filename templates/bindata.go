// Code generated by go-bindata.
// sources:
// tmpl/consul_register.go.tmpl
// tmpl/consul_resolver.go.tmpl
// tmpl/errors.go.tmpl
// tmpl/file.tmpl
// tmpl/gk.json.tmpl
// tmpl/partials/alias_type.tmpl
// tmpl/partials/constants.tmpl
// tmpl/partials/endpoint_func.tmpl
// tmpl/partials/endpoint_method_func.tmpl
// tmpl/partials/func.tmpl
// tmpl/partials/func_parameters.tmpl
// tmpl/partials/func_results.tmpl
// tmpl/partials/func_return.tmpl
// tmpl/partials/imports.tmpl
// tmpl/partials/interface.tmpl
// tmpl/partials/interface_func.tmpl
// tmpl/partials/interface_stub.tmpl
// tmpl/partials/middleware_instrumenting.tmpl
// tmpl/partials/middleware_logging.tmpl
// tmpl/partials/struct.tmpl
// tmpl/partials/struct_function.tmpl
// tmpl/partials/struct_type.tmpl
// tmpl/partials/transport_grpc_client_decode_func.tmpl
// tmpl/partials/transport_grpc_client_encode_func.tmpl
// tmpl/partials/transport_grpc_server_decode_func.tmpl
// tmpl/partials/transport_grpc_server_encode_func.tmpl
// tmpl/partials/vars.tmpl
// tmpl/proto.pb.tmpl
// tmpl/proto_compile.bat.tmpl
// tmpl/proto_compile.sh.tmpl
// tmpl/svc.thrift.tmpl
// tmpl/thrift_compile.bat.tmpl
// tmpl/thrift_compile.sh.tmpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplConsul_registerGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x5d\x6b\x1b\x47\x17\xbe\xde\xf9\x15\x93\x85\x98\x5d\x23\xcf\x24\xf0\x5e\xe9\xc5\x17\xc6\x86\x56\x90\x1a\x11\xfb\xae\x94\x30\x5e\xcd\x8e\x06\x8d\x66\x96\xd9\x91\x8b\x31\x06\x07\x0a\x69\xc1\xf4\xa6\x2e\x06\x37\x25\x2d\x25\xb4\x37\xa5\x86\x86\x36\x04\x87\xfe\x19\x4b\x89\xaf\xfc\x17\xca\x99\xfd\xd0\xae\x65\xb9\x8b\x85\xad\x73\x9e\x7d\xe6\x9c\xe7\x7c\x8c\x33\x96\x8c\x98\xe0\x58\xd8\x2c\xc9\x2d\x42\x72\x9c\x19\xeb\x70\x84\x82\x30\x1d\xbb\x10\x05\xa1\xe6\xfe\x97\x93\x63\x1e\x22\x14\x84\x42\xba\xe1\x64\x8f\x24\x66\x4c\x85\x59\x1b\x49\x47\xe1\xa3\x8c\x08\x51\x90\x18\x9d\x4f\x54\x3e\xc0\x4b\x50\xf9\x80\x16\x90\xb0\x4d\x34\x64\xf9\x50\x26\xc6\x66\xa5\x9b\xb2\x4c\x86\x28\x46\xc8\x1d\x64\x1c\x6f\x7a\xdb\x53\x2e\x64\xee\xb8\xc5\xb9\xb3\x93\xc4\xe1\x43\x14\x14\x8e\x8d\xc1\xc0\xf2\x3c\xc7\x0b\x4f\xee\xac\xd4\x02\x63\x4c\x29\x2e\x78\x31\x2b\xb0\x28\xd8\xe1\x76\x5f\x26\x7c\x9b\x8d\xf9\xe2\x8b\xed\x57\xf3\x02\x8a\x35\x1b\x73\x14\xec\x32\x71\xc7\x51\xf5\xf3\xf9\x17\xe5\xab\xf3\x33\x1d\x13\xf3\x03\xfb\xa0\xee\x1d\x8f\xd4\xa5\x99\xd2\xea\x3c\x28\x04\x0a\xb6\xb8\x2d\x13\xdf\xb4\xd2\xc9\x84\xa9\x92\x69\x23\x05\x31\xa0\x2c\x64\x6b\x62\x99\x93\x46\xa3\xa0\xa7\x1d\xb7\xfb\x4c\x2d\x89\xee\x16\x5a\x19\x21\xb8\x5d\x9a\x8b\x32\x82\x3c\xf1\x10\x74\x84\x50\x3a\xd1\x09\xde\xe6\x5f\xb6\xab\x11\x25\xcd\x1a\x74\x2a\xb1\xbc\xae\x85\x12\xb5\xcd\xa7\x2e\xb5\xeb\x78\x45\x6a\xa5\x3a\xb8\x0c\x63\x7e\x5c\x8c\x57\x6f\xd5\xfc\x10\x05\x96\xbb\x89\xd5\x78\xa5\xed\x39\x44\x41\xbb\x0d\xba\x8b\x79\xb4\x43\x44\x41\xb3\xf8\x77\xc0\x71\x33\x09\x80\x43\xc9\xef\xc4\x55\xaa\x32\xd1\xa4\x85\x3c\xef\xa3\x05\x3f\xc0\xef\xaf\x6c\xb7\x5d\xac\xe8\x71\x8c\x57\x0b\xd3\x67\x52\x4f\x9c\x0f\xac\xaa\xf6\xb2\xe0\x6e\x31\x3c\xaa\x29\x76\x78\x62\xf4\x00\x28\x0a\xed\x97\x67\x57\xf8\x3b\x28\x38\x82\x1e\xa0\x14\x0f\x9d\xcb\xf2\x2e\xa5\x8d\xe9\xb5\x93\x35\x6b\x92\x11\xb7\x54\x98\x91\x74\x6b\x99\x62\x07\xc2\x9a\x89\x1e\xd0\x3d\x65\xf6\xe8\x98\x41\x92\x54\x19\xcb\xc7\x6b\xe5\x80\x57\xa9\x13\x61\x96\xb0\x0e\x99\x53\x46\x73\x75\x40\x87\x5c\x29\x23\x8c\x62\x5a\xb4\x08\x73\x36\xce\x14\xa7\x6c\x30\x28\x95\xa5\x12\x04\xd1\x4c\xd1\x62\x9d\x95\xdb\xe4\x59\xf3\x30\xdf\xc6\x91\xbd\xdd\x61\xf1\xbc\xb5\x3f\x79\xda\xdf\xac\xdb\x3b\xc6\xd1\x6a\xb5\xd5\x48\x61\xb5\xcc\x76\x30\xb7\xd6\xd8\x18\xfa\xb2\xf0\x6e\x1a\x9d\x4a\x81\xbb\xeb\x98\x65\x92\x6c\xf1\x94\x4d\x94\x2b\x8c\x51\xdc\x06\x91\x6a\x61\xad\x63\x4b\x5a\xbd\x5b\xe3\x94\xe4\x30\x27\xdc\xda\x8a\x11\xa2\xf3\xd6\xa8\x49\x15\xa3\x40\xa6\x1e\xf6\x60\x1d\x6b\xa9\x20\x9e\x6a\x50\xb4\x54\x9e\x01\x4a\x17\x24\xfe\x5d\x20\xab\x93\x59\x60\xf4\x5f\x62\x84\x82\x5e\x1f\x80\xca\x24\x4c\xf5\xfa\x10\xbd\xe5\x3e\xb3\x15\x08\x64\x43\x70\xed\xca\x46\xad\xf4\x80\xf6\x82\x93\x7b\x5b\x65\x23\xa5\x63\x47\x76\x32\x2b\xb5\x4b\xa3\xf0\xe1\xfe\x9a\xff\x09\x3b\xd8\x92\xc6\xe8\x75\x70\xaf\xdf\x30\xc1\x58\xc4\xd0\x92\xf5\x58\xb6\x58\xa0\xa2\x64\xc8\x99\x72\x43\xb2\xff\x98\x2c\xd2\xc5\xad\x51\xb5\x64\xb7\x9c\xca\x7a\x1c\x5b\x27\x81\xa7\xde\x18\xbd\x3e\x7c\xdd\x1c\xf2\x64\xd4\x5d\xcc\xd2\xdb\x21\xbd\x80\x52\x3c\x7d\xfe\x7a\xfa\xee\xef\xd9\x2f\xc7\xb3\x57\xaf\xaf\xcf\xde\x5c\x9f\x9f\x82\x63\x3e\x88\x96\x54\x7f\x93\x1d\xbf\xde\x22\x1f\x57\x40\x7d\x4b\xe2\xd9\xe9\x1f\xb3\x93\xe7\x37\x97\x27\xb3\x6f\x7e\xfd\xf8\xf3\x49\x93\xed\xc3\xf9\x57\xd3\x97\x17\xd3\x1f\x8f\x6f\x2e\x4f\xaa\x2b\xe0\xea\xf2\xfc\xea\xf2\xa7\xe9\xd7\x17\xf8\xd3\x22\x73\x1f\x0b\x9e\xbe\x78\x3f\xfb\xfe\xe2\xea\xed\xef\xc0\x0c\xed\xda\xbd\xad\x78\xf7\xe1\x3e\xf5\x12\x2d\x48\x7c\x97\x6a\x90\xd8\xec\xcf\xdf\xae\x4f\x8f\x67\x67\x7f\x5d\x9f\xbd\xb9\xb9\x3c\xf9\xf0\xc3\xdb\xe9\xfb\xef\xae\xde\x7d\xfb\xf1\x9f\x17\xb3\x97\xaf\x0a\x3b\x40\xff\x6b\x6b\x59\x72\x3f\xa2\x25\xcb\x91\x5f\x2c\x55\xc7\x36\x5b\xb3\x1e\xb5\x28\x29\x87\xc1\x72\x01\xb1\x17\x0b\x29\xee\x40\x7f\xd7\xd7\x52\xdd\xab\x38\xca\x1f\x95\xf7\x8e\x1f\x4e\xb8\xef\xf3\x7a\x90\x34\x77\x45\x79\x52\x96\x70\xa8\x7e\x1e\xdd\x37\x41\x61\xe8\xa3\x4b\x8d\xc5\xcf\x3a\xd5\xbf\x0e\xc0\x63\x99\x16\xdc\x1b\x72\x8f\x97\x29\x96\x99\xe6\xae\x83\xcd\xc8\x0f\x6c\x01\x25\xd1\xaa\x3f\xb1\xbf\xcd\x5d\xfc\x7f\xf0\xad\xac\xe0\x07\x1e\x49\x7a\x7d\xd2\xcb\x9f\x18\x93\xed\xb1\x64\x14\xf9\x58\xe7\x3c\xe0\xdd\x35\xff\x8b\xe2\x66\x50\x75\x58\x35\xa4\x52\x12\x9c\x47\xc8\x7f\xe6\x62\x86\x21\x3a\x42\xff\x06\x00\x00\xff\xff\x82\x2a\x03\x62\xde\x09\x00\x00"

func tmplConsul_registerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplConsul_registerGoTmpl,
		"tmpl/consul_register.go.tmpl",
	)
}

func tmplConsul_registerGoTmpl() (*asset, error) {
	bytes, err := tmplConsul_registerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/consul_register.go.tmpl", size: 2526, mode: os.FileMode(420), modTime: time.Unix(1563282934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplConsul_resolverGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6b\x24\x45\x14\x3f\x57\x7d\x8a\xb7\x0d\x86\xee\xd0\x74\x7b\x10\x0f\x2d\x73\x58\xb2\x87\x5d\x91\x5d\xff\x20\x39\x84\x20\xb5\x3d\xaf\x7b\x8a\xf4\x54\x35\x55\xd5\x33\xbb\x0c\x03\xa2\x22\x0a\x39\x78\x90\x45\x8d\x08\x1e\x04\x11\x84\x39\xe4\xb0\xe2\x82\x5f\x66\x33\xb3\x9e\xf6\x2b\x48\xfd\xe9\xce\x4c\x12\x73\xda\x4b\xc8\x54\xbf\xfa\xfd\x7b\xaf\x5e\xcb\xca\x13\x56\x23\xd4\xaa\x2d\x9b\xc7\x94\xf2\x69\x2b\x95\x81\x98\x92\x48\xa0\x89\x28\x89\xb4\x51\xa5\x14\xb3\x88\x52\x12\xd5\xdc\x4c\xba\xc7\x59\x29\xa7\xf9\x84\xe9\x09\x2f\xa5\x6a\xf3\x52\x0a\xdd\x35\x39\x6b\x79\xb4\x5b\xa2\xb9\xea\x5a\x8d\x22\x6f\x64\xad\x3a\xed\xbe\x4a\x59\x37\x98\xd5\xb2\x61\xa2\xce\xa4\xaa\x73\x4b\x9c\x0b\x36\xe5\xa2\x8e\x68\x42\x69\x9e\xc3\x43\x9c\x1f\x38\xcc\x8f\x51\xcb\x66\x86\x0a\x3c\x05\xa8\xf0\x9b\x56\x9d\x28\xaf\x97\xc5\x6c\x3c\x56\xa8\x35\x68\xa3\xb8\xa8\x53\xd0\xa8\x66\xbc\xc4\xf0\x3b\x01\x4f\x93\x0d\xb0\x0b\x4a\x14\x9a\x4e\x09\xd8\x2b\x77\x90\x16\x94\x90\x00\x56\x40\xf8\x27\xa5\x84\x04\xc0\xa2\x47\x4e\x29\x59\xd2\x25\xa5\xe6\x69\x8b\xb0\x0b\x61\x49\xbb\xd2\x58\x8e\x5d\x59\x94\xec\xca\xb2\xf7\xf3\x1c\xc2\x3d\xe0\xd3\xb6\xc1\x29\x0a\xe3\x4d\xc6\x0a\xf6\x77\x81\x93\xbe\x34\x36\x4c\xd5\x68\x06\x77\x71\xb0\x77\xc8\x4c\x39\x41\x95\x02\x2a\x25\x55\x62\x15\x94\x52\x54\xbc\x86\x62\x04\xac\xe5\xd9\x3d\xac\x58\xd7\x98\x03\x77\x18\x27\xfd\xe7\xec\x6e\xd0\x39\x02\x95\x05\xcd\x94\x94\x0d\x47\x61\x1c\x58\x7f\xdf\x06\xef\x4e\x63\x7f\x31\xa1\x84\x57\xae\xe0\xce\x08\x04\x6f\x2c\x63\x1f\xac\xe0\x8d\xbb\x6b\x83\xba\x9a\x76\x10\x6a\xab\x3d\x4b\x01\x10\xe8\xb6\xb3\x56\xd9\x65\xda\x2e\x4b\x5d\x00\xc0\x94\xb5\x47\xde\xf9\xb1\x4f\x7a\xb1\x5c\x2c\x6d\x3f\x52\xcb\x79\xa5\x29\x81\x69\xab\x27\x9e\x07\x00\x60\xdf\x5a\xf2\x7e\x2e\x5b\x03\x43\xb3\x1c\xa1\xad\xbb\x89\x91\x92\x86\x69\xf3\x40\x8c\xf1\x09\x74\x5c\x98\x77\xdf\xb1\xc4\xbe\x71\xf3\xbe\x71\x81\x3c\x81\x87\xf8\xc4\xc4\x09\xc4\x47\xc7\xfb\xa1\x55\x9f\xb6\x63\x66\x70\xbb\x53\x95\x74\x63\xd9\x0b\xd1\x29\x4c\xd1\x30\x2e\x2a\x39\xb4\x60\x9e\x79\xf1\xd9\x7d\x64\x8d\x99\xc4\x49\xf6\x89\x2f\x8e\xe7\x43\x52\x10\x45\x29\x18\xd5\x61\x0a\x7b\xd6\xdf\x47\x1d\xaa\xa7\x8f\x5a\xc3\xa5\xd0\x16\x9e\x1c\x32\xee\x75\x17\x30\xcf\x06\x13\x29\xe4\x39\x5c\x7c\x77\xba\xfe\xf3\xb7\xcd\x17\x7f\xbd\x7e\x71\xfa\xea\x9f\x1f\x5f\x3e\xff\xe3\xd5\xea\xcb\xcd\xf7\xbf\x5f\xac\xbe\x7e\xf9\xfc\xf3\xcd\xd9\xf9\xbf\x3f\xfc\x7d\xf1\xeb\x2f\xaf\x5f\x9c\x6e\xce\xce\x2f\xbe\x59\xad\x7f\xfe\x76\xfd\x6c\xb5\xf9\xe9\xab\xf5\xd9\xf9\xfa\xd9\x8a\x12\xb2\x4c\x28\xb9\x61\x24\x88\xdf\x03\xd9\x21\x53\x22\x8e\x9c\x67\x50\x68\x14\xc7\x19\x17\x35\x70\xa1\x0d\x13\x25\x6a\xa8\x94\x9c\x82\x7f\xdb\x05\xbc\x35\x8b\x9c\x75\x8b\xb9\xa4\x84\x6c\xc9\x85\xd1\x90\x4e\xf6\x41\x7f\x48\xfb\x29\xb1\x59\xdd\x38\x25\x94\xb8\x98\x3f\xbb\x5c\x10\xc5\x08\x14\x13\x35\xf6\x07\xda\xeb\x75\x30\x47\x02\x4d\xf6\xbe\xe4\xe2\xbe\xd4\xe6\x43\xa9\x4c\x1c\x8a\xfa\xd8\xfb\x77\x93\x42\x58\x95\xd9\x03\x23\xd9\xb5\x2a\x7b\x35\x49\x8e\x61\x04\x3b\x4a\xec\xb3\x20\x33\xa6\xa0\x73\xb3\xa0\xe1\xea\x74\x04\xb5\x56\xcb\xa5\xce\x79\xe6\x2d\x3a\x99\xbc\xb2\x5e\xe4\x89\x7b\x9f\x4e\xb2\xfd\x7b\xfc\x1e\xdc\x91\x27\xbe\x82\xf4\xe0\xf6\x01\xb7\x28\xc6\x71\x38\x48\x61\x6f\x87\x6c\xf1\xa8\x2d\xfa\x35\x79\x0f\x1b\xb4\xc3\x69\xed\xf9\x2d\xe8\xfa\x4a\x06\xd5\xd7\x65\xfd\x8f\xa8\xa0\xf6\xcd\xc8\xba\x3b\x1e\xdf\xa2\x89\x57\xd0\xa0\xe8\x71\x12\x3b\x7e\x6f\x7b\xb2\x3e\xb2\x90\x91\x3d\x0a\xeb\x68\x20\xb5\x8b\xc3\x61\x2d\x6f\x7b\xc6\x07\x8d\xd4\x18\xbb\xd7\x9a\xe7\x20\xa4\x99\xd8\xe9\x35\x12\xc6\x92\x2e\xe9\x7f\x01\x00\x00\xff\xff\xf5\xac\xab\xbf\x51\x07\x00\x00"

func tmplConsul_resolverGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplConsul_resolverGoTmpl,
		"tmpl/consul_resolver.go.tmpl",
	)
}

func tmplConsul_resolverGoTmpl() (*asset, error) {
	bytes, err := tmplConsul_resolverGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/consul_resolver.go.tmpl", size: 1873, mode: os.FileMode(420), modTime: time.Unix(1563282910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplErrorsGoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x53\xdb\x30\x10\x85\xcf\xd1\xaf\xd0\xe4\x04\x17\xfb\xce\x8d\x86\xa4\x65\x68\x49\x26\x84\x1f\xb0\x91\x16\x45\x83\xbc\xeb\xae\x56\x01\xca\xf0\xdf\x3b\xc6\x30\xc5\x8c\x3d\xd3\xf6\x26\xd9\xef\xbd\xfd\x66\xfd\xdc\x82\xbb\x87\x80\x56\x05\x28\xb7\x2c\x9a\x8d\x89\x4d\x77\xb0\x27\x66\x36\x27\xd4\xfa\xa0\xda\xce\x8d\x99\xcd\x03\x73\x48\x58\x05\x4e\x40\xa1\x62\x09\x75\x90\xd6\xd5\x8e\x3d\xe6\xb9\x39\x35\xa6\xae\xed\xb7\xdd\x6e\x73\xa3\xa0\x25\xaf\x84\x9b\x05\x7b\xb4\x8e\xe9\x88\xa2\xd9\x82\x0d\xdb\xcd\xc2\xa2\x08\x8b\xed\x5c\x36\x92\xb2\xd5\x43\xa7\x11\xc1\xdc\x32\xf9\x48\xe1\x35\xc4\xf6\xf7\x8c\x36\xbf\xc6\x55\x5d\xfa\x0d\xe2\x99\xed\x78\xf2\x59\x5d\x87\xa8\x87\xb2\xaf\x1c\x37\x75\x4f\x06\x6d\xcc\x1f\x8f\xfb\xc4\xfb\xba\x81\xac\x28\x6f\x8f\xeb\x77\xde\xaa\x15\x56\x36\x77\x85\xdc\x08\xf2\x89\xeb\xb9\x3d\xe6\xaa\xbb\x9f\x76\xa0\xf6\xd9\xcc\xf2\x43\x54\x77\xe8\xd9\x9f\xcd\xcc\x41\x7e\x97\xad\xaf\xce\xcc\x6c\x26\xa8\x45\xe8\x95\xb0\xea\x23\xd7\x57\x03\xd9\x02\xc8\x61\x42\x3f\x2e\xde\xe2\xcf\x82\x59\x77\xb1\x41\x2e\x3a\x30\xde\xd2\x3d\xf1\x03\x8d\xfb\x2e\x49\x51\x08\xd2\x0d\xca\x11\x65\xd9\xed\x77\x60\xbe\xa4\x23\xa4\xe8\xcf\x25\x94\x06\x49\xc7\x43\xbe\x80\x7f\x9b\x3f\xf0\x5e\x20\xf8\x14\x09\x97\x8f\x0e\xd1\x4f\x91\x7f\x05\xc5\x07\x78\x1a\x23\xbf\x66\x5d\x71\xa1\x09\xe3\xfb\xdb\x81\xe5\x3c\x09\x82\x7f\x5a\x3e\xc6\xac\x79\xdc\xb7\x60\xba\x4b\xd1\x0d\x47\x6d\x50\x9a\x98\x73\x64\xba\x40\x8a\x53\xac\x2b\x96\x7d\xf4\x1e\xe9\xd3\x82\xa1\xe8\x01\x49\xa3\x03\x9d\xb2\xf6\x22\x96\xf8\x0b\x87\xc4\x5b\xcc\x5c\xc4\xe1\xf2\xf1\x00\x25\x4f\xfa\x77\xcc\x3f\x80\x9e\xde\xf6\x9c\x07\x11\x2b\x88\x09\xfd\x46\xd0\x75\x7f\x81\x46\x9e\xf8\xd8\x1f\x15\xbd\x67\xb8\xbb\x3d\xcb\xe4\xfc\xd1\xad\xad\x8b\xae\xef\xb6\x40\x01\xff\xa9\x18\xb7\x14\x9b\x36\x61\x57\xa8\xa9\x71\xd7\xac\x97\x7f\x34\x9f\x2a\xd9\x57\xf6\xff\x0a\x7d\x4b\x70\x84\x98\x60\x9f\x26\x98\x3b\x63\x74\xf8\x41\x37\x2c\x35\x28\x7c\xe7\x3c\xd1\xad\xd1\xe9\x2f\xc6\xfc\xa5\xf4\xc5\xfc\x0e\x00\x00\xff\xff\x80\xb8\x74\xc4\x55\x05\x00\x00"

func tmplErrorsGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplErrorsGoTmpl,
		"tmpl/errors.go.tmpl",
	)
}

func tmplErrorsGoTmpl() (*asset, error) {
	bytes, err := tmplErrorsGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/errors.go.tmpl", size: 1365, mode: os.FileMode(420), modTime: time.Unix(1563332755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplFileTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6a\xb4\x40\x10\xc4\xef\x3e\x45\x33\x78\xf8\x3e\x08\x92\x73\x20\x87\xb0\xa7\x3d\x24\x04\x12\x72\x5d\x1a\xb7\x35\x43\xb4\x35\x63\xaf\xb0\x34\xf3\xee\x61\xfc\xc7\xb8\x51\xc8\x4d\xbb\xaa\x7f\x55\x34\xa3\x6a\x0b\x60\x82\xec\xd0\xd4\x35\xb1\x80\x31\xde\xab\xce\xbf\xde\x27\xaa\xc4\x67\xef\x93\xa4\xc5\xfc\x0b\x4b\x02\xd5\xec\x75\xfc\x0c\xd3\x01\x50\x0a\xfc\xab\x88\x21\x3b\xd6\x6d\xe3\xa4\xfb\x0f\xf7\xc3\xa6\x50\xdd\x56\x28\x04\xc6\x8e\x82\x59\x2c\x31\x79\xcd\x38\x34\xdc\x09\xf2\x16\x25\x9f\x25\x13\xd9\xf6\x49\x1f\xe8\x36\x20\x3d\xba\xb0\x1f\xc4\xfd\xd5\xa7\xca\x62\xf7\x7e\x6d\xe9\xf7\x3e\x06\xe9\x24\xd7\x96\x4c\xe4\xdb\x47\x1d\x59\xc8\x15\x98\xd3\xd2\xc5\x21\x97\x04\xa9\xbd\x4b\x7b\x78\x78\x8c\x1d\xe1\xf6\xd1\xd1\xe6\xb9\x81\xb4\x8f\x02\x76\x82\xde\xc4\x5d\x72\xd9\x4d\x99\xe4\x75\x44\x37\x0c\xff\xc6\x7f\x26\xf9\x6c\xce\x37\xfc\x28\x60\xd2\x07\xd1\x16\x40\xdf\x90\xf6\x53\x6a\xf6\x82\x35\x0d\x6f\x6b\x75\xca\xe2\xc2\xf9\x98\xad\x4a\x55\x47\x37\xf2\x58\xee\x14\x5c\x62\x1b\xde\x6e\xb9\x94\xfd\x09\x00\x00\xff\xff\x0d\x88\xed\x2a\xcb\x02\x00\x00"

func tmplFileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplFileTmpl,
		"tmpl/file.tmpl",
	)
}

func tmplFileTmpl() (*asset, error) {
	bytes, err := tmplFileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/file.tmpl", size: 715, mode: os.FileMode(420), modTime: time.Unix(1562043715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGkJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xbd\x6e\xe3\x30\x10\x84\x7b\x3f\x05\xc1\xfa\x60\xf7\x6a\x0d\x5c\x79\x8d\x7c\xb5\xbc\xa2\xd6\x32\x61\x89\x64\x96\x2b\x07\x01\xa1\x77\x0f\x64\x91\xfa\x71\x0c\x24\x31\xe0\x52\xdc\xe1\x37\x3b\x23\x86\x8d\x10\xd2\x23\x5d\xb5\x42\x99\x0d\x5f\x42\x48\x07\x7c\x96\x99\x74\x97\x3a\x84\x93\x6e\x30\x47\x07\x04\x6c\xa9\xef\x43\x38\x86\xc0\x36\x37\x70\xc1\x3d\x78\x14\xdb\x7c\xbc\xfc\x0f\x5a\xec\xfb\xe3\xa0\xb8\xbb\x92\xe8\x7f\x46\xf8\x30\x2d\x0c\xb4\x28\xb3\x64\xbc\xad\x6d\x9a\x6a\xc3\x48\x27\x50\x93\x24\x1a\xfe\x77\x0e\xe9\xaf\x26\xcf\x7b\x68\xb1\x79\x6c\x9d\xaf\x9d\x3c\x53\xa7\x78\xf2\xe2\xae\x8c\xb0\x1f\x20\x36\x42\xf4\x03\x46\xb6\xba\xaa\x1a\x7c\x07\x9a\xeb\x89\xc0\x79\x32\xec\x3f\x5d\x40\x53\x39\xab\x0d\xfb\x17\xd5\x39\xf3\x1f\x14\x3a\x0d\x17\x95\x12\xbe\x75\xe8\xd9\x17\x4b\x61\x3a\x5c\xe9\xbc\xb3\xc6\xe3\xbd\x30\x9e\xae\x42\x32\x81\xf1\xce\x12\xbf\x28\xe4\xc4\x7f\x98\xf2\x06\xdc\x1e\x92\xe6\xf0\xe1\x46\xcc\x6a\x45\x57\x7e\xd9\xad\x7c\x62\xb5\x19\xa8\xda\x2a\x12\x13\x50\xb5\xd5\x33\xc4\x5b\xa2\x55\xa0\x16\xb4\x59\x2d\xaf\xac\xf1\x5d\x23\x33\x11\xd2\xbf\xa9\xb5\x67\xa4\xe9\x64\x91\x4b\x0c\xa5\xef\xfc\x19\x08\xab\xc2\x81\xba\x40\x8d\xbb\x9a\x9c\xf2\x14\xcb\xbb\x2f\x30\xf1\x8b\x84\x8d\xde\xd1\x7d\x7c\x0b\xb6\xb9\xfe\xd2\xaf\x29\xbf\xf7\x1b\xb1\xb3\xdf\x94\xb8\xc2\x13\x74\x0d\x17\x8b\x97\x25\xcf\xcc\x4e\x6e\xfa\xcf\x00\x00\x00\xff\xff\x8e\x0f\x9a\xa2\xa4\x04\x00\x00"

func tmplGkJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGkJsonTmpl,
		"tmpl/gk.json.tmpl",
	)
}

func tmplGkJsonTmpl() (*asset, error) {
	bytes, err := tmplGkJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/gk.json.tmpl", size: 1188, mode: os.FileMode(420), modTime: time.Unix(1563288682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsAlias_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\x01\x0b\x66\xa6\x29\xe4\xa5\x2a\xa8\x94\xe9\x39\xe7\xe7\xe6\xa6\xe6\x95\x28\x28\x29\xd5\xd6\x56\x57\x23\x04\x40\xbc\xd4\xbc\x94\xda\x5a\xae\x92\xca\x82\x54\x05\xb0\x94\x5f\x62\x6e\x6a\x6d\x2d\x84\x1d\x52\x59\x90\x0a\x36\x09\xa2\x08\x4a\x03\x02\x00\x00\xff\xff\x50\x74\x8a\x9b\x82\x00\x00\x00"

func tmplPartialsAlias_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsAlias_typeTmpl,
		"tmpl/partials/alias_type.tmpl",
	)
}

func tmplPartialsAlias_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsAlias_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/alias_type.tmpl", size: 130, mode: os.FileMode(420), modTime: time.Unix(1562050070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsConstantsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\x4d\xce\xcf\x2b\x2e\x51\xd0\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xe5\xaa\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x20\xec\xcc\x34\x05\x95\x32\x3d\x8f\xc4\xe2\xb0\xc4\x9c\xd2\xd4\xda\x5a\x5b\x88\x3c\x94\x57\x5d\x9d\x9a\x97\x02\xa7\xb8\x34\xa1\x0c\x40\x00\x00\x00\xff\xff\x13\xc6\xee\xf4\x7e\x00\x00\x00"

func tmplPartialsConstantsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsConstantsTmpl,
		"tmpl/partials/constants.tmpl",
	)
}

func tmplPartialsConstantsTmpl() (*asset, error) {
	bytes, err := tmplPartialsConstantsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/constants.tmpl", size: 126, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xcf\x6a\xf3\x30\x10\xc4\xef\xdf\x53\xcc\x17\x7c\xb0\xc1\x98\x9e\x53\x72\x0a\xf4\xd8\x43\xa1\xbd\x16\xe1\xac\x83\x40\x95\xd3\x95\x6c\x02\xcb\xbe\x7b\x91\xff\x04\x3b\xa6\x04\xea\x8b\xd1\xb2\x9a\xf9\xcd\xe8\x1f\x00\x30\xc5\x8e\x3d\x9a\xce\xd7\x79\x1d\xaf\xa8\x5b\x1f\xe9\x1a\xab\xe3\xf8\x2f\x01\x11\xdb\xe0\x1c\x91\x3b\xf2\xa8\xde\xe8\xbb\xa3\x10\xab\x0f\xc3\xa1\xc0\x93\x2a\x8f\x03\x11\x72\x81\x54\x3f\x45\xc8\x9f\x54\x61\x7d\x24\x6e\x4c\x4d\xa2\x05\xf2\xc5\xa9\x04\x31\xb7\x5c\x40\x06\x80\xf9\x7b\x6c\x83\xfd\x01\x93\x5b\x95\x8b\xdc\x76\x5e\xcd\x17\xa9\x16\x2b\x35\xdb\x24\x97\xe9\x46\xd5\x1b\x67\x4f\x26\x52\x5e\x3c\x0f\xe3\xff\x07\x78\xeb\xee\x00\x16\x6d\x0c\xe2\xe1\xd2\xfa\x40\x93\xfa\x84\xbd\xba\xa0\x77\xfc\x43\x6e\x11\x36\xfe\x4c\xc8\x6c\x99\xf5\xc9\xbf\x3a\x1a\xe7\xac\x3f\x27\xc5\xce\xc5\x90\x56\xb2\x7e\x96\x4d\xa1\x7d\x9b\x52\x9b\x10\x91\x59\x64\xf7\xfb\x85\x6a\x79\xd3\x1e\xab\xdd\x1f\x10\xfa\xba\x12\xb9\xed\x8e\x6a\xe9\x01\xcb\x2d\xc0\xb2\x4b\xd5\xa1\x90\x07\x08\xab\xf6\x37\xfe\xeb\xa6\x7f\xaf\x0c\x1b\x94\x4d\xb8\xd9\x9e\x30\xf1\x60\x47\xcc\x3b\xa4\x79\x6c\xdf\x2f\x17\xe2\x17\xcb\x09\x6b\xc6\xdd\xaf\xd0\x27\xac\xbf\x94\xb8\x78\x50\xfd\x09\x00\x00\xff\xff\xc7\x6f\x07\x95\x0a\x03\x00\x00"

func tmplPartialsEndpoint_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_funcTmpl,
		"tmpl/partials/endpoint_func.tmpl",
	)
}

func tmplPartialsEndpoint_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_func.tmpl", size: 778, mode: os.FileMode(420), modTime: time.Unix(1563264992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsEndpoint_method_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xd6\x53\xcc\x1f\x74\xb0\xc1\x08\xfe\x6b\x20\xa7\x92\x1e\x4b\x09\xb4\x77\x51\x6f\x82\x40\x59\xbb\x2b\x25\x04\x16\xbd\x7b\x91\x6b\xe7\x50\x7c\x92\x90\x76\x67\xe6\x1b\x03\x00\x42\x69\xea\x41\x22\xd8\x1f\x40\x4e\xd5\xbd\xf8\x18\x03\x5f\xdc\x9b\xbf\x52\x29\x47\x1e\xa6\x31\x70\x6e\xbf\xf2\xa3\x87\xaa\x3b\xd1\xf7\x8d\x52\x5e\xbe\x15\xaa\xe2\xf9\x42\xb0\xa1\xb7\xf7\x2a\x62\x9f\x23\x9f\x5e\x52\x29\xaa\x79\xfc\x98\x26\x92\xd7\x20\x29\xc3\xde\x97\xd5\xbd\x2a\xda\xc0\x03\x3d\x60\x9f\xa6\xef\x5e\xfc\x95\x32\x49\x42\xeb\x87\x01\x36\xe0\x7f\xd7\xcd\x1b\xa8\x52\xe1\x0c\x1e\x33\xda\xe8\xab\x54\xf8\x63\xd6\x95\xd2\xab\x12\x0f\x75\x74\x3e\x50\x3a\xd3\x84\xf3\x0c\xf8\xef\x00\x0e\x11\x6a\x9a\x46\x28\xdf\x84\x4d\x53\x4c\x53\x0b\x18\x39\x51\x8d\x5e\xef\xae\x9d\x21\x7f\x1f\x97\xa8\x9d\x59\x36\xb6\x69\x97\xd9\x15\xb7\x66\xa4\x95\x13\xbb\xa3\xc8\x0e\xa5\xac\x3e\x4e\xf5\x59\xc1\x16\xcf\xda\xc4\x89\xd2\x2d\xe6\x0d\xa4\x95\x8c\x43\xfc\x09\x00\x00\xff\xff\x4d\x42\xc2\x08\xc2\x01\x00\x00"

func tmplPartialsEndpoint_method_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsEndpoint_method_funcTmpl,
		"tmpl/partials/endpoint_method_func.tmpl",
	)
}

func tmplPartialsEndpoint_method_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsEndpoint_method_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/endpoint_method_func.tmpl", size: 450, mode: os.FileMode(420), modTime: time.Unix(1563332658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFuncTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x39\xc5\xa0\x55\xb2\x31\xff\x0c\xbf\x37\xe8\x05\x42\x48\x94\x12\x70\x94\xd6\x96\x17\x45\xe8\xee\xc5\x4e\x5b\xe8\x6e\x46\x1a\xde\x8c\xd9\xb6\x42\x18\xe1\x72\xec\x3b\x8b\x82\xc8\xdd\xec\x63\xab\x66\x59\xdc\xd7\x22\x33\xcc\x94\xf7\x7b\x9c\x94\x41\x9b\x28\xa7\x75\x9a\x79\xac\x2f\x42\x70\x87\xe1\xc4\x1d\x8a\x9e\x1f\x08\xff\xc7\xf2\x04\xd1\xd0\x88\xd5\x34\x5c\xcc\xec\xde\xb5\xe4\x4d\xd1\x47\x16\x84\x2b\xe7\x12\x35\x0f\xf8\x73\x4f\xac\x25\xc9\x4f\x59\xad\x18\xcf\x3b\x7d\xc3\x0d\xd2\xc6\x01\x6f\xd1\xf9\x2b\x00\x00\xff\xff\x07\xa4\xf4\xd5\xd0\x00\x00\x00"

func tmplPartialsFuncTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFuncTmpl,
		"tmpl/partials/func.tmpl",
	)
}

func tmplPartialsFuncTmpl() (*asset, error) {
	bytes, err := tmplPartialsFuncTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_parametersTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x25\x0a\x1a\x39\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\x05\x08\x00\x00\xff\xff\x15\x5b\x78\xe8\x50\x00\x00\x00"

func tmplPartialsFunc_parametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_parametersTmpl,
		"tmpl/partials/func_parameters.tmpl",
	)
}

func tmplPartialsFunc_parametersTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_parametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_parameters.tmpl", size: 80, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_resultsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x48\x2f\x51\xd0\xc8\x49\xcd\x53\x50\xd1\x54\x30\xa8\xad\xd5\xa8\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\xad\xad\x55\x00\xb3\x43\x2a\x0b\x52\x41\xc2\x99\x69\x0a\x79\xf9\x20\xfd\x89\xc5\x25\x0a\x2a\x99\x0a\x2a\x9a\xb5\xb5\x3a\xd5\xd5\xa9\x79\x29\x20\x59\x30\xa5\x09\xa5\x01\x01\x00\x00\xff\xff\xcc\x6e\x26\x22\x6c\x00\x00\x00"

func tmplPartialsFunc_resultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_resultsTmpl,
		"tmpl/partials/func_results.tmpl",
	)
}

func tmplPartialsFunc_resultsTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_resultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_results.tmpl", size: 108, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsFunc_returnTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\x50\xa9\xad\xad\xae\x56\x29\xd3\xf3\x4b\xcc\x4d\x05\x31\x33\xd3\x14\xf2\xf2\x4b\x14\x34\x72\x12\x8b\x4b\x14\x54\x32\x15\x54\x34\x6b\x6b\x75\xaa\xab\x53\xf3\x52\x40\xb2\x60\x0a\x10\x00\x00\xff\xff\xbc\x66\xba\xd5\x44\x00\x00\x00"

func tmplPartialsFunc_returnTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsFunc_returnTmpl,
		"tmpl/partials/func_return.tmpl",
	)
}

func tmplPartialsFunc_returnTmpl() (*asset, error) {
	bytes, err := tmplPartialsFunc_returnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/func_return.tmpl", size: 68, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsImportsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\x50\xa9\xad\xcd\xcc\x2d\xc8\x2f\x2a\xd1\xe0\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x05\xc9\x81\xd5\xe4\xe5\x97\x28\x68\xa4\x16\x2a\xa8\x94\xe9\xf9\x25\xe6\xa6\x2a\x28\x29\x69\x82\x64\xa0\xdc\xda\x5a\x85\xea\xea\xd4\xbc\x14\xa8\x50\x48\x65\x41\x6a\x6d\x2d\x17\x54\x88\x4b\x13\xca\x00\x04\x00\x00\xff\xff\x34\xce\x15\xc7\x6d\x00\x00\x00"

func tmplPartialsImportsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsImportsTmpl,
		"tmpl/partials/imports.tmpl",
	)
}

func tmplPartialsImportsTmpl() (*asset, error) {
	bytes, err := tmplPartialsImportsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/imports.tmpl", size: 109, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterfaceTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\x08\x59\x4a\x0e\x20\xb8\x72\xad\x57\x90\xd0\xbe\x68\xc0\x4c\x4b\x1d\x0b\x32\xcc\xdd\xa5\xa0\xdd\xbd\xb7\xf8\x7e\xb3\x56\x21\x44\x3e\x4f\xbd\x53\x14\x31\xba\x9b\xfd\xef\xb6\x29\xa3\xbb\x7e\x66\xc2\x2c\x5f\x4b\xa7\x3b\x9a\x28\x97\x5a\x06\xc2\x82\xd9\x52\xe4\x4e\xa4\x76\x48\x2b\x8e\x27\xe4\x0b\xf5\x31\x8d\xaf\x0d\x2b\xfb\xfc\x2c\x4a\xc4\x9d\xdc\xea\x5b\x86\x88\xb4\xba\x87\x5f\x3d\xf8\x37\x00\x00\xff\xff\x19\x53\x8a\x78\x88\x00\x00\x00"

func tmplPartialsInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterfaceTmpl,
		"tmpl/partials/interface.tmpl",
	)
}

func tmplPartialsInterfaceTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface.tmpl", size: 136, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x2b\xcd\x4b\x8e\x2f\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\x56\x52\xd0\x0b\x80\x73\x6a\x6b\x35\x31\x94\x16\xa5\x16\x97\xe6\x94\x80\xd4\x05\x41\x58\xb5\xb5\x80\x00\x00\x00\xff\xff\xc1\x2e\xd4\xb5\x59\x00\x00\x00"

func tmplPartialsInterface_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_funcTmpl,
		"tmpl/partials/interface_func.tmpl",
	)
}

func tmplPartialsInterface_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_func.tmpl", size: 89, mode: os.FileMode(420), modTime: time.Unix(1562123977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsInterface_stubTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x2e\x29\x2a\x4d\x2e\x51\x52\xd0\xab\xad\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\xd4\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x45\xd5\x54\x9a\x14\x9f\x56\x9a\x97\x5c\x92\x99\x9f\xa7\xa4\xa0\x52\x56\x5b\xcb\xc5\x55\x5d\x9d\x9a\x97\x52\x5b\x0b\x08\x00\x00\xff\xff\x39\x10\x5c\x96\x5d\x00\x00\x00"

func tmplPartialsInterface_stubTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsInterface_stubTmpl,
		"tmpl/partials/interface_stub.tmpl",
	)
}

func tmplPartialsInterface_stubTmpl() (*asset, error) {
	bytes, err := tmplPartialsInterface_stubTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/interface_stub.tmpl", size: 93, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsMiddleware_instrumentingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x4a\xc3\x40\x10\x86\xcf\xe9\x53\x8c\x21\x87\x5d\x08\x03\x5e\x85\x1e\xa4\x57\xa9\x60\x45\x0f\xe2\x21\x4d\x26\xe9\x40\x76\xa2\xb3\x93\x58\x59\xf6\xdd\xa5\xad\x97\xea\x69\x98\x99\xef\x87\xef\x2f\x3a\xea\x49\xa1\x9f\xa5\x75\x7b\x1a\x58\xc0\x38\x10\x3e\x73\x20\x0f\x69\x55\x14\xe3\x12\xe1\x6e\x0d\x6f\xef\xd1\x94\x65\x48\x65\x20\x3b\x4c\x5d\x59\x43\x99\x52\x85\x9b\x66\x1c\x59\x06\xdc\x36\x81\x72\x3e\x5d\x49\x75\xd2\xb2\x86\x3e\x18\xee\x3e\x94\xc5\x1c\xa9\xc2\xcd\x1a\x84\x47\x9f\x57\x45\xc1\x01\x95\x3e\x67\x8a\xb6\x99\x66\x31\x7c\x65\x3b\xb8\x71\x89\x88\xe8\xf1\xbe\xeb\xdc\xad\xbf\xa2\x1e\x1a\x23\x69\xbf\xaf\xb9\xc7\x7d\x24\x5d\xc8\x9d\x75\x77\x2c\x2d\x5d\xfc\x3d\xee\xa8\x9d\xa4\x8b\xce\xfb\x55\x91\x2f\xff\xed\xf4\x75\x5e\x95\x6c\x56\x01\x0e\x28\x74\x34\xfc\x5f\xc0\xb5\x76\xac\x21\x25\x6d\x64\x20\xa8\xb8\xae\x96\x53\xfb\x0a\x9f\x2e\x2a\xf8\xd2\x68\xcc\x39\xa5\x6a\xf9\x4d\xa4\xc4\x3d\xc8\x64\xe0\xc6\x26\x1a\x54\xfc\x07\xf6\x39\xd7\x29\x91\x74\x27\xf4\x3c\xfc\x4f\x00\x00\x00\xff\xff\xe9\x81\x20\xf9\x74\x01\x00\x00"

func tmplPartialsMiddleware_instrumentingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_instrumentingTmpl,
		"tmpl/partials/middleware_instrumenting.tmpl",
	)
}

func tmplPartialsMiddleware_instrumentingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_instrumentingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_instrumenting.tmpl", size: 372, mode: os.FileMode(420), modTime: time.Unix(1562052640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsMiddleware_loggingTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xbf\x4a\x04\x31\x10\xc7\xf1\x7a\xf7\x29\x7e\x84\x14\x09\x84\x3c\x80\x60\x65\x2b\x57\x88\xd8\xc7\xdb\xd9\x18\xc8\x1f\x9c\xcd\x9e\x07\x61\xde\x5d\x4e\x44\x0e\x6d\xbc\x6a\x18\x98\x2f\x7c\x66\x5a\x68\x25\xc6\xba\xd7\xa3\x79\xa5\x98\x2a\x7a\x2a\xe4\x9f\x53\x21\x8b\x31\x4f\x00\x90\x8b\xcf\x2d\x46\x62\xff\xd8\xa2\x51\x85\xfa\x5b\x5b\x94\x83\x1a\x43\xfb\x87\x90\x73\xaa\xd1\x1f\x42\x21\x11\xe5\x30\x06\x87\x1a\x09\x3a\x39\x7d\xc2\xdd\x3d\xb4\x7f\xa2\xf7\x9d\xb6\xee\x5f\x02\x6f\x22\x97\xec\x74\x7d\xff\xb3\x61\x8c\xb4\xa2\xb6\x0e\x93\xc3\xd6\xa1\xd3\xaf\xd8\x8a\xb8\x31\xa8\x2e\x22\xdf\xc3\x41\x11\xb3\x72\x20\x66\x3b\x4f\x62\xbe\xf8\x87\xf6\x61\xac\x9d\xe7\x89\xa9\xef\x5c\x2f\x1f\x54\x3a\x77\xff\x17\x6c\x8e\xfd\xfc\x0f\xf3\x15\xf2\x76\xa3\xfd\x0c\x00\x00\xff\xff\xb0\xf5\xcb\x68\x65\x01\x00\x00"

func tmplPartialsMiddleware_loggingTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsMiddleware_loggingTmpl,
		"tmpl/partials/middleware_logging.tmpl",
	)
}

func tmplPartialsMiddleware_loggingTmpl() (*asset, error) {
	bytes, err := tmplPartialsMiddleware_loggingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/middleware_logging.tmpl", size: 357, mode: os.FileMode(420), modTime: time.Unix(1561962713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStructTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\x08\x59\x4a\x0e\x50\x70\xe5\xde\x95\xb8\x6e\xd0\x51\x2a\x64\x5a\x92\x58\x28\x8f\xb9\xbb\xb4\xd8\xee\xbe\x19\x78\xfc\xe4\xf0\x82\x0a\xe2\x65\xcc\x59\xb4\xc1\x7b\x33\x72\x3f\x57\x8b\x3e\xcd\xda\x32\x09\xc8\x78\x4d\x59\xcc\x50\x5b\xf9\x3e\x1a\xe8\x40\x96\xa4\x6f\x41\x18\x4e\x61\x46\x77\x46\xbc\xa7\x52\xcd\x1c\x40\x86\x79\x1f\x6c\xbe\x2d\xd3\xea\xfe\x53\x47\xed\xfc\xf6\x3a\x3a\xbe\xc7\x3f\xe5\x60\xbf\x00\x00\x00\xff\xff\x71\x9c\x4c\xf4\x96\x00\x00\x00"

func tmplPartialsStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStructTmpl,
		"tmpl/partials/struct.tmpl",
	)
}

func tmplPartialsStructTmpl() (*asset, error) {
	bytes, err := tmplPartialsStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct.tmpl", size: 150, mode: os.FileMode(420), modTime: time.Unix(1562053863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_functionTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x6e\x84\x30\x10\x44\xfb\x7c\xc5\xc8\x15\x34\x56\xbe\x21\xe9\x53\x24\xe9\x11\x82\x25\x42\xb2\x0d\x31\xeb\x02\xad\xe6\xdf\x23\x9b\xdc\x9d\xae\xda\x9d\xd1\xec\xbe\x31\x5b\x17\x24\x81\x7f\xdf\x62\x94\xa4\x70\x8e\x34\xbb\xc9\xba\x4b\x9a\xc9\xa5\xa4\x09\x9d\x99\xff\xd2\x5c\x26\xf5\x1f\x63\x14\x12\x0f\xe3\xfb\xdc\x85\xec\x61\xa6\x12\xf7\x30\xaa\xc0\xad\x49\x25\x2f\xe3\x24\x43\x3d\x77\xf0\xa4\xe1\x22\x6e\x8a\x4e\x7e\xe1\xdf\xb6\xf9\x84\x73\x7d\x83\x56\xd1\x88\xe1\x10\xf2\xa5\x25\x7f\x14\x5d\x90\x04\xff\x29\x47\x09\x7a\xf4\x78\x25\xb3\x68\xc9\xe9\x89\x55\x09\xc3\xe5\xbb\x7b\xb8\x3d\x69\xfd\xff\x07\xf8\x17\x00\x00\xff\xff\x61\xb8\x92\x3e\xf1\x00\x00\x00"

func tmplPartialsStruct_functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_functionTmpl,
		"tmpl/partials/struct_function.tmpl",
	)
}

func tmplPartialsStruct_functionTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_function.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1561708425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsStruct_typeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\xc8\x4b\x55\xd0\x73\xce\xcf\xcd\x4d\xcd\x2b\x51\x50\x52\xaa\xad\xad\xae\x86\x71\x41\xec\xd4\xbc\x94\xda\x5a\xae\x92\xca\x82\x54\x85\xea\x6a\x3d\xbf\xc4\xdc\xd4\xda\x5a\x10\x2b\xa4\xb2\x20\xb5\xb6\x16\x10\x00\x00\xff\xff\xac\xed\xb2\x28\x41\x00\x00\x00"

func tmplPartialsStruct_typeTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsStruct_typeTmpl,
		"tmpl/partials/struct_type.tmpl",
	)
}

func tmplPartialsStruct_typeTmpl() (*asset, error) {
	bytes, err := tmplPartialsStruct_typeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/struct_type.tmpl", size: 65, mode: os.FileMode(420), modTime: time.Unix(1561742882, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\x0a\xc2\x30\x0c\x86\xef\x3e\x45\x18\x3d\x6c\x30\xfa\x00\x03\x8f\x7a\xf4\x30\xd0\x7b\xd1\x38\x0a\x33\xab\x69\x37\x90\x90\x77\x97\x96\x6d\x88\xb9\x84\xfc\xf9\xfe\x3f\x39\xc0\x5a\x8c\x61\xfc\x40\x77\x84\x81\xc3\xbd\xcf\x83\xad\x45\x6c\x8f\xef\x19\x63\xb2\x17\xf7\x42\xd5\xe6\x07\x4f\x33\x13\x14\x22\x86\x89\x22\xae\x88\x80\x08\x3b\x1a\x10\x8c\x6f\xcd\x92\x13\xcd\x9e\x72\x73\x1c\x55\x45\xfc\x13\x08\xc1\x2c\xc5\x03\xd5\x89\xb9\xca\x72\x9a\xae\x21\x20\x9f\x3d\xc7\xb4\x6d\x55\xbb\xf2\x9a\x15\xd9\x15\x11\xa4\xc7\x96\x33\x25\xa8\x47\x97\x0d\xfe\xef\x52\xa3\xda\xee\x68\x69\xa0\x2d\x90\x1f\xbf\x01\x00\x00\xff\xff\xe8\xad\xf6\xee\xf5\x00\x00\x00"

func tmplPartialsTransport_grpc_client_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_decode_funcTmpl,
		"tmpl/partials/transport_grpc_client_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_decode_func.tmpl", size: 245, mode: os.FileMode(420), modTime: time.Unix(1563270481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_client_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\x0a\xc3\x30\x0c\x05\xd0\xbd\xa7\xd0\xe0\x21\x81\x90\x03\x04\xba\x76\xec\x50\x68\x77\x43\xd5\x62\x48\x65\x47\x76\xb2\x7c\x74\xf7\xe2\x60\x42\xa9\x96\x2f\xc1\xd3\x3f\x51\x1b\xe5\x85\xa6\x73\x8d\x95\x73\x19\x3b\x60\xbc\xb5\xfd\xea\x3f\x6c\xd6\xff\xd0\xb2\xaa\xd0\x2e\x72\x8a\x92\xb9\x11\x10\xa0\x5e\xde\x4c\x2e\x0c\x6e\xab\x7d\xee\x68\x79\x78\xcd\x66\x40\x89\xf7\x94\x58\x2f\x41\x73\x21\xb7\xb5\xd7\x49\x79\x19\x81\xe3\x06\xc2\x8b\x24\x16\xea\x66\x5f\x5d\xf8\x6b\xea\xcd\x06\x80\xe5\x59\xe9\x1e\x64\x03\x49\x98\xbf\x01\x00\x00\xff\xff\xcd\x8f\xe0\x8c\xd1\x00\x00\x00"

func tmplPartialsTransport_grpc_client_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_client_encode_funcTmpl,
		"tmpl/partials/transport_grpc_client_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_client_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_client_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_client_encode_func.tmpl", size: 209, mode: os.FileMode(420), modTime: time.Unix(1563270493, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_decode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\xaa\xc3\x30\x0c\xc6\xf1\xfd\x9d\x42\x83\x87\x04\x82\x0f\x10\x78\x6b\xc7\x0e\x81\x76\x37\xad\x1a\x0c\xa9\x62\xcb\x4e\x96\x0f\xdd\xbd\x24\x84\x50\xaa\x45\x08\x7e\xfa\xff\xd1\x31\xca\x99\xfa\x7f\x1a\x35\x3d\x06\xce\xbe\x01\xfc\xc0\x79\xe1\x52\xfd\x35\xbc\xd9\xac\xfd\xa2\x75\x51\xa1\x5d\x94\x34\x4b\xe1\x83\x80\x00\x0d\x32\x32\xb9\xd8\xb9\x75\xeb\xb9\xb3\x72\x0f\x5a\xcc\x80\x3a\xdf\x52\x62\xbd\x44\x2d\x95\xdc\x7a\xbc\xf6\xca\xd9\x03\xe7\x0d\xc4\x17\xc9\x5c\xa9\x99\xc2\xe6\xe2\x4f\xa9\x35\xeb\x00\x96\xe7\x46\xf7\x45\xd6\x91\xc4\xe9\x13\x00\x00\xff\xff\x27\x87\xbf\x51\xd1\x00\x00\x00"

func tmplPartialsTransport_grpc_server_decode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_decode_funcTmpl,
		"tmpl/partials/transport_grpc_server_decode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_decode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_decode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_decode_func.tmpl", size: 209, mode: os.FileMode(420), modTime: time.Unix(1563270490, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsTransport_grpc_server_encode_funcTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x6a\xc4\x20\x10\x86\xef\x7d\x8a\x21\x78\x48\x20\xf8\x00\x81\x1e\xed\xb1\x87\x40\x7b\x97\x64\x1a\x84\x54\xdd\xd1\x04\x96\x61\xde\x7d\xd1\x4d\xc2\xb2\x5e\xc4\xdf\xef\xff\x74\x3e\xe0\x58\x84\x71\xbd\xc3\xf0\x09\x0b\xc5\x69\x2c\x07\xdd\x32\xeb\x11\x6f\x1b\xa6\xac\xbf\xed\x3f\x8a\x74\x2f\x78\xde\xc8\x43\x25\x52\x0c\x3e\xe1\x81\x30\x30\x93\xf5\x0b\x82\x72\xbd\xda\x8b\x51\x5d\x96\x5f\x4b\x49\x84\xd9\xfd\x81\x47\x50\x7b\xed\x40\x63\x88\x9a\x12\xe7\xf0\x13\x23\xd2\x97\xa3\x94\xcf\x5b\x91\xa1\x7e\x4d\x33\x5f\x09\x33\xfa\xf9\xf4\x84\x0c\xed\x6a\x4b\xc1\xbd\xbd\xd4\x89\xf4\x17\x5a\x37\x90\xbe\xce\x67\xfc\x14\x66\x34\x44\x81\xda\xa7\xdd\x10\x75\x8f\x00\x00\x00\xff\xff\xb6\xb3\x0b\x90\x0c\x01\x00\x00"

func tmplPartialsTransport_grpc_server_encode_funcTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsTransport_grpc_server_encode_funcTmpl,
		"tmpl/partials/transport_grpc_server_encode_func.tmpl",
	)
}

func tmplPartialsTransport_grpc_server_encode_funcTmpl() (*asset, error) {
	bytes, err := tmplPartialsTransport_grpc_server_encode_funcTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/transport_grpc_server_encode_func.tmpl", size: 268, mode: os.FileMode(420), modTime: time.Unix(1563270484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPartialsVarsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfe\x8a\x47\xb9\xa1\x05\x11\x67\xa1\x93\x8b\x93\x93\x38\xb9\x04\xbc\x96\x40\x73\x2d\x69\x0c\x48\xb8\xff\x2e\x49\x8a\xe0\x94\xef\x7d\xb9\x7b\x97\x92\x1d\x31\x05\x74\x33\x0b\xa8\xc7\x49\x35\x1a\x8f\x2e\x25\x6f\x64\x62\x90\x3d\x50\xc4\x79\x00\xa9\x36\x65\x98\xe2\xf1\xb2\x38\xc7\x12\x54\x8b\x90\x25\xa0\x1b\xad\xdf\x02\xc8\x82\xfa\xac\x57\x6f\x25\x8c\x68\x9f\xd2\xe6\xc8\xf2\xca\xcf\xff\x6a\x91\x4d\xb1\x37\xe3\x58\x15\x85\xef\x9f\xb5\x72\xbd\x75\x35\xdb\xc3\xcc\x6f\x56\x1d\xea\xff\x9e\x7e\xa5\xb5\xa6\xdf\xe1\x1b\x00\x00\xff\xff\x1b\x65\x9e\x03\xd0\x00\x00\x00"

func tmplPartialsVarsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPartialsVarsTmpl,
		"tmpl/partials/vars.tmpl",
	)
}

func tmplPartialsVarsTmpl() (*asset, error) {
	bytes, err := tmplPartialsVarsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/partials/vars.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1563597101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProtoPbTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xcf\x4e\xc3\x30\x0c\xc6\xef\x79\x0a\xab\xca\x61\x93\xa6\xee\xc0\x8d\xaa\x8f\x00\x42\xd3\xc4\x89\x4b\x68\xdd\x2d\x6a\x9b\x86\xc4\xad\xa8\x2c\xbf\x3b\x5a\x69\x19\x8c\x3f\xda\x81\x53\xf2\xc5\xb1\xfd\xfb\xbe\x38\x3a\x32\xaf\x90\x43\xe2\x43\x47\xdd\x4d\x92\x29\xe5\x4d\x51\x9b\x03\x82\x7f\xce\x94\xda\x6e\x61\x7f\x44\x60\x4e\xef\x4d\x8b\x22\x10\x31\x0c\xb6\x40\x28\xb1\xb2\xce\x92\xed\x5c\xaa\x96\xb7\xf3\x2f\x56\x00\x00\xcc\xc1\xb8\x03\x82\xb6\x1b\x3d\xc0\x6d\x0e\xe9\x1d\xd2\xb1\x2b\xa3\xc8\x54\x0f\xbe\x00\x66\x3d\x2c\x5d\xab\x4f\x62\x87\x2f\x3d\x46\x5a\x43\x40\xea\x83\x8b\x17\x45\xdf\x8c\xeb\x79\x8b\x30\xdb\x0a\x5c\x47\xb0\x6a\x4c\x24\xd0\x16\xf4\xb2\x68\x2d\xc2\xec\x83\x75\x54\x41\xf2\xe4\x92\x93\x44\x57\x7e\x1c\x4a\xd4\x5f\x90\x2d\xc6\x78\x8a\xe2\x3b\x17\xf0\xb9\xb1\xde\xe8\x7a\xea\xd4\x43\xfa\x60\x82\x69\x91\x30\x44\x91\xf7\x08\x74\x3d\xa4\xfb\xd1\x4f\xa9\x4c\x62\x36\x9b\xcf\xf2\xd1\x34\x3d\x8a\x64\x97\x2e\xea\xaf\xe3\xae\x70\xf2\x33\xae\x6f\xc6\xdf\x60\x77\x18\xfb\x86\xfe\x87\x74\x9e\x75\x55\xe0\xd3\xed\x2d\x00\x00\xff\xff\xce\x43\x06\x7b\x7b\x02\x00\x00"

func tmplProtoPbTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProtoPbTmpl,
		"tmpl/proto.pb.tmpl",
	)
}

func tmplProtoPbTmpl() (*asset, error) {
	bytes, err := tmplProtoPbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto.pb.tmpl", size: 635, mode: os.FileMode(420), modTime: time.Unix(1562118577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x6a\x04\x31\x0c\x45\xfb\x39\x85\x2e\x60\xbb\x48\x67\xd8\x3a\xa4\x49\x13\x52\x07\xcd\xac\xa2\x35\x68\x2c\x63\xc9\x21\xb0\xec\xdd\x83\x67\x03\x21\x90\x26\x8d\x10\x9f\xf7\x1f\xfc\x9c\xe1\xa9\x9a\xa3\x08\xb4\xae\xae\x0f\x71\xc9\x19\x2e\xee\xcd\x72\x4a\x5c\xfc\x32\xd6\xb8\xe9\x9e\x58\x95\x85\xd2\x01\xad\xe3\x3d\x75\x12\x42\x23\x9b\xf8\x6b\x3b\xa3\xd3\x5d\xb0\xc1\xa3\xc2\x5a\xea\xb9\x54\x36\xf8\x28\x38\x01\x60\x05\x26\x87\x30\xe0\x97\x52\xb0\xf2\x8f\xf2\x78\xfe\x89\x6f\x81\xa9\x06\x9e\xb5\xd9\x7c\x21\x02\x14\xbb\x5b\xfe\x5a\xd1\xdb\x76\x9c\xc0\x9a\xbc\x13\xa5\x1d\xcd\xa9\x27\xfa\xc4\xbd\x09\xd9\xb2\x7c\xaf\xb8\x5e\xe3\x33\xee\x74\xbb\xc5\x23\x80\x10\x58\xdf\x74\xf8\xa9\xc9\xe0\x52\xed\x34\x2d\x39\x7e\x05\x00\x00\xff\xff\xa9\xcb\x56\x7a\x40\x01\x00\x00"

func tmplProto_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileBatTmpl,
		"tmpl/proto_compile.bat.tmpl",
	)
}

func tmplProto_compileBatTmpl() (*asset, error) {
	bytes, err := tmplProto_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.bat.tmpl", size: 320, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplProto_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\x2b\x31\x14\x84\x7b\x3d\xc5\x5c\xb6\xbd\x2b\x15\xe9\x6c\x5c\x87\x34\x49\x61\x52\x07\xad\x7c\x7c\x56\x44\xd2\x59\xf4\xe3\x24\x18\xbf\x7b\x58\x79\x09\x04\xd2\x48\x83\x18\xbe\x6f\x34\xfc\x33\xad\x64\x33\xf9\x64\x28\x5d\x50\x66\xa5\x06\x3c\xa5\x52\x6d\x08\x58\xb2\x54\x79\xc0\x39\x4b\x44\x91\x96\x1d\x21\x5a\xf7\x72\x84\xa4\xf0\xa5\xd5\x00\x4c\x99\x3e\xe0\xb7\xba\x6d\x55\x9c\xa4\x73\x0f\xd1\xbe\x13\x82\x9f\xaa\x48\x58\x9b\xec\x2b\x5c\x90\x44\x98\x6b\x5d\xca\xce\x18\xf6\x75\x6e\x93\x76\x12\x0d\x8b\x70\x20\xd3\x7d\x53\x3b\xaf\x7d\x6d\x56\x0a\x53\xd2\x65\xc6\x1e\xda\xac\x64\xcf\x2d\x13\xf6\xe8\xf0\xed\xda\xec\x6a\x50\x03\x5e\x97\x93\xad\x74\xdf\xed\xf0\x28\x98\x7c\x3a\xf9\xc4\x05\x17\x6f\xfb\x0a\x01\x53\xc5\xd8\xf0\xcb\x1e\x6c\xe2\x1f\xbb\xb9\xf6\xf4\xff\x4e\x19\x99\xd2\xc8\x72\xeb\xfc\x23\x11\x6c\x28\xb2\xa2\xfe\xfa\x46\x5e\x5c\x3f\x46\x16\x53\x33\x91\x89\xb6\x54\xca\x86\x3e\x6d\x5c\x02\x15\xa5\xb6\x69\xd7\xab\x7e\xb6\x91\x6e\x37\xdd\x1f\x30\x8e\x2c\x6f\xd2\xea\x61\x09\x8d\x7d\x2a\x87\x95\xb2\xd3\xdf\x01\x00\x00\xff\xff\xf5\x6a\x2e\xbe\x9e\x01\x00\x00"

func tmplProto_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplProto_compileShTmpl,
		"tmpl/proto_compile.sh.tmpl",
	)
}

func tmplProto_compileShTmpl() (*asset, error) {
	bytes, err := tmplProto_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/proto_compile.sh.tmpl", size: 414, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplSvcThriftTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x29\x53\xb0\xb2\x55\xd0\xf3\x4d\x2d\xc9\xc8\x4f\x29\xae\xad\x2d\x2e\x29\x2a\x4d\x2e\x51\xa8\xae\x56\x29\xd3\x0b\x4a\x2d\xc8\xa9\xac\xad\xad\xe6\xaa\xe5\x42\x15\x2e\x2c\x4d\x2d\x2e\x01\x4b\x54\x57\xa7\xe6\xa5\xd4\xd6\x72\x71\x15\xa7\x16\x95\x65\x26\xa7\x2a\x54\x57\xeb\xf9\x25\xe6\xa6\xd6\xd6\x06\xc3\x04\xb8\xf0\xd8\x86\x62\x0f\x84\x03\xd1\xad\xa0\x61\x68\x85\x66\x9b\x42\x51\x6a\xa1\x26\x17\xd4\xc2\x5a\x2e\x2e\x40\x00\x00\x00\xff\xff\x3c\x08\xab\xcd\xc5\x00\x00\x00"

func tmplSvcThriftTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSvcThriftTmpl,
		"tmpl/svc.thrift.tmpl",
	)
}

func tmplSvcThriftTmpl() (*asset, error) {
	bytes, err := tmplSvcThriftTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/svc.thrift.tmpl", size: 197, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileBatTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\x41\xaa\xc3\x20\x10\xc6\xf1\xbd\xa7\x90\xac\x9f\xce\x5e\xc8\x01\xde\xa6\xf4\x06\x61\x92\x98\x51\x6a\x1c\x31\x53\x5a\x10\xef\xde\x85\x59\xce\x8f\xf9\xf8\x3b\xa7\xff\xf3\x25\x98\x92\x96\x50\xe3\x21\xda\xe9\x20\x52\x2e\x07\x30\xc0\x62\xc1\x2d\x78\xcb\x95\x60\xe7\x4f\x4e\x8c\xbb\xba\x7f\x4d\xd5\xc6\x90\xcf\x7a\x22\x76\x05\xb7\x17\x92\x5f\x4a\xf5\x47\xfc\xce\xad\xd9\xe7\x90\xde\x81\x7c\x36\xc4\xf0\x37\x76\x4b\x3c\x0b\x57\x99\x29\x4a\x78\xaf\x76\xe3\x13\x46\xe4\x4e\x42\x8a\x2b\x10\xdf\xd7\xa4\x5b\xb3\x0f\x3c\x7d\xef\x76\x88\x52\xea\x17\x00\x00\xff\xff\x24\x72\xa9\x61\xb8\x00\x00\x00"

func tmplThrift_compileBatTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileBatTmpl,
		"tmpl/thrift_compile.bat.tmpl",
	)
}

func tmplThrift_compileBatTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileBatTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.bat.tmpl", size: 184, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplThrift_compileShTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x0a\xd1\x5c\x17\x9b\x6d\xb7\x40\xaf\x83\x5d\xb6\xbd\x41\xb1\x53\x55\x11\x73\x2c\x63\xab\x6b\x21\xe4\xdd\x47\xb1\x4f\x3d\xea\xff\x24\xfd\xdf\x00\x9f\xa9\xaa\x8f\x11\x74\x29\x7c\x51\x58\xfd\xfc\x5d\xad\x19\xe0\xd5\x42\x28\x78\x03\xee\x3c\x88\x54\x35\x03\xbc\x3d\xe5\x91\x03\xfe\x61\x7a\xa0\xf7\x27\xd4\x5e\x9a\x01\x3e\xa4\x40\xe4\x74\xbd\x43\x45\x84\x09\x16\xd5\x5c\x27\xe7\xda\x82\xf5\xd9\xcf\x0b\x5a\x29\xe4\xce\x72\x4b\x51\xfc\xd9\x74\x9d\xb1\xc0\x38\x12\x26\x38\x90\x4c\xd9\xcf\xbf\x9e\xf0\x94\x0b\x5e\xf8\x7e\xdc\x36\xfb\xd3\x92\x7d\x77\x84\x69\x24\x71\x2f\xed\xee\xc4\x6b\x96\xa2\x47\x62\x5d\xae\xc1\xce\xb2\xba\x56\xd2\x2b\x5d\xe4\xe0\x48\xfa\x74\x80\x6d\xb3\x5f\x7e\xc5\x7d\xb7\xdd\xd9\x98\xff\x00\x00\x00\xff\xff\xef\x99\x12\x70\x1a\x01\x00\x00"

func tmplThrift_compileShTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplThrift_compileShTmpl,
		"tmpl/thrift_compile.sh.tmpl",
	)
}

func tmplThrift_compileShTmpl() (*asset, error) {
	bytes, err := tmplThrift_compileShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/thrift_compile.sh.tmpl", size: 282, mode: os.FileMode(420), modTime: time.Unix(1561708087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/consul_register.go.tmpl": tmplConsul_registerGoTmpl,
	"tmpl/consul_resolver.go.tmpl": tmplConsul_resolverGoTmpl,
	"tmpl/errors.go.tmpl": tmplErrorsGoTmpl,
	"tmpl/file.tmpl": tmplFileTmpl,
	"tmpl/gk.json.tmpl": tmplGkJsonTmpl,
	"tmpl/partials/alias_type.tmpl": tmplPartialsAlias_typeTmpl,
	"tmpl/partials/constants.tmpl": tmplPartialsConstantsTmpl,
	"tmpl/partials/endpoint_func.tmpl": tmplPartialsEndpoint_funcTmpl,
	"tmpl/partials/endpoint_method_func.tmpl": tmplPartialsEndpoint_method_funcTmpl,
	"tmpl/partials/func.tmpl": tmplPartialsFuncTmpl,
	"tmpl/partials/func_parameters.tmpl": tmplPartialsFunc_parametersTmpl,
	"tmpl/partials/func_results.tmpl": tmplPartialsFunc_resultsTmpl,
	"tmpl/partials/func_return.tmpl": tmplPartialsFunc_returnTmpl,
	"tmpl/partials/imports.tmpl": tmplPartialsImportsTmpl,
	"tmpl/partials/interface.tmpl": tmplPartialsInterfaceTmpl,
	"tmpl/partials/interface_func.tmpl": tmplPartialsInterface_funcTmpl,
	"tmpl/partials/interface_stub.tmpl": tmplPartialsInterface_stubTmpl,
	"tmpl/partials/middleware_instrumenting.tmpl": tmplPartialsMiddleware_instrumentingTmpl,
	"tmpl/partials/middleware_logging.tmpl": tmplPartialsMiddleware_loggingTmpl,
	"tmpl/partials/struct.tmpl": tmplPartialsStructTmpl,
	"tmpl/partials/struct_function.tmpl": tmplPartialsStruct_functionTmpl,
	"tmpl/partials/struct_type.tmpl": tmplPartialsStruct_typeTmpl,
	"tmpl/partials/transport_grpc_client_decode_func.tmpl": tmplPartialsTransport_grpc_client_decode_funcTmpl,
	"tmpl/partials/transport_grpc_client_encode_func.tmpl": tmplPartialsTransport_grpc_client_encode_funcTmpl,
	"tmpl/partials/transport_grpc_server_decode_func.tmpl": tmplPartialsTransport_grpc_server_decode_funcTmpl,
	"tmpl/partials/transport_grpc_server_encode_func.tmpl": tmplPartialsTransport_grpc_server_encode_funcTmpl,
	"tmpl/partials/vars.tmpl": tmplPartialsVarsTmpl,
	"tmpl/proto.pb.tmpl": tmplProtoPbTmpl,
	"tmpl/proto_compile.bat.tmpl": tmplProto_compileBatTmpl,
	"tmpl/proto_compile.sh.tmpl": tmplProto_compileShTmpl,
	"tmpl/svc.thrift.tmpl": tmplSvcThriftTmpl,
	"tmpl/thrift_compile.bat.tmpl": tmplThrift_compileBatTmpl,
	"tmpl/thrift_compile.sh.tmpl": tmplThrift_compileShTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"consul_register.go.tmpl": &bintree{tmplConsul_registerGoTmpl, map[string]*bintree{}},
		"consul_resolver.go.tmpl": &bintree{tmplConsul_resolverGoTmpl, map[string]*bintree{}},
		"errors.go.tmpl": &bintree{tmplErrorsGoTmpl, map[string]*bintree{}},
		"file.tmpl": &bintree{tmplFileTmpl, map[string]*bintree{}},
		"gk.json.tmpl": &bintree{tmplGkJsonTmpl, map[string]*bintree{}},
		"partials": &bintree{nil, map[string]*bintree{
			"alias_type.tmpl": &bintree{tmplPartialsAlias_typeTmpl, map[string]*bintree{}},
			"constants.tmpl": &bintree{tmplPartialsConstantsTmpl, map[string]*bintree{}},
			"endpoint_func.tmpl": &bintree{tmplPartialsEndpoint_funcTmpl, map[string]*bintree{}},
			"endpoint_method_func.tmpl": &bintree{tmplPartialsEndpoint_method_funcTmpl, map[string]*bintree{}},
			"func.tmpl": &bintree{tmplPartialsFuncTmpl, map[string]*bintree{}},
			"func_parameters.tmpl": &bintree{tmplPartialsFunc_parametersTmpl, map[string]*bintree{}},
			"func_results.tmpl": &bintree{tmplPartialsFunc_resultsTmpl, map[string]*bintree{}},
			"func_return.tmpl": &bintree{tmplPartialsFunc_returnTmpl, map[string]*bintree{}},
			"imports.tmpl": &bintree{tmplPartialsImportsTmpl, map[string]*bintree{}},
			"interface.tmpl": &bintree{tmplPartialsInterfaceTmpl, map[string]*bintree{}},
			"interface_func.tmpl": &bintree{tmplPartialsInterface_funcTmpl, map[string]*bintree{}},
			"interface_stub.tmpl": &bintree{tmplPartialsInterface_stubTmpl, map[string]*bintree{}},
			"middleware_instrumenting.tmpl": &bintree{tmplPartialsMiddleware_instrumentingTmpl, map[string]*bintree{}},
			"middleware_logging.tmpl": &bintree{tmplPartialsMiddleware_loggingTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{tmplPartialsStructTmpl, map[string]*bintree{}},
			"struct_function.tmpl": &bintree{tmplPartialsStruct_functionTmpl, map[string]*bintree{}},
			"struct_type.tmpl": &bintree{tmplPartialsStruct_typeTmpl, map[string]*bintree{}},
			"transport_grpc_client_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_client_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_client_encode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_decode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_decode_funcTmpl, map[string]*bintree{}},
			"transport_grpc_server_encode_func.tmpl": &bintree{tmplPartialsTransport_grpc_server_encode_funcTmpl, map[string]*bintree{}},
			"vars.tmpl": &bintree{tmplPartialsVarsTmpl, map[string]*bintree{}},
		}},
		"proto.pb.tmpl": &bintree{tmplProtoPbTmpl, map[string]*bintree{}},
		"proto_compile.bat.tmpl": &bintree{tmplProto_compileBatTmpl, map[string]*bintree{}},
		"proto_compile.sh.tmpl": &bintree{tmplProto_compileShTmpl, map[string]*bintree{}},
		"svc.thrift.tmpl": &bintree{tmplSvcThriftTmpl, map[string]*bintree{}},
		"thrift_compile.bat.tmpl": &bintree{tmplThrift_compileBatTmpl, map[string]*bintree{}},
		"thrift_compile.sh.tmpl": &bintree{tmplThrift_compileShTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

